| *Addr* | *R/W* | *Reg* | *Content*                                |
|--------+-------+-------+------------------------------------------|
|   0x10 | R     | R20   | - Clear U68 (outputs = 1)                |
|   0x10 | W     | W20   | - U68 count down                         |
|   0x11 | R     | R21   | b15: w2                                  |
|        |       |       | b14: confidence test                     |
|   0x11 | W     | W21   | b15: TDAV/                               |
|        |       |       | b14: TRFD/                               |
|        |       |       | b13: TDAC/                               |
|        |       |       | b12: TDEN/                               |
|        |       |       | b11: TEOI/                               |
|        |       |       | b10: TATN/                               |
|        |       |       | b5..b0: inverted b5..b0 of SPAS response |
|   0x12 | R     | R22   | b15: dcl (1)                             |
|        |       |       | b14: rhs (1)                             |
|        |       |       | b13: ths (0)                             |
|        |       |       | b12: 9815 mode (always 0?)               |
|        |       |       | b11: SRQ                                 |
|        |       |       | b10: DAV                                 |
|        |       |       | b9: RFD/                                 |
|        |       |       | b8: DAC/                                 |
|        |       |       | b7..b0: rx data                          |
|   0x12 | W     | W22   | b15: ppe (0)                             |
|        |       |       | b14: rdy  (0?)                           |
|        |       |       | b13: nba (0)                             |
|        |       |       | b12: rsv (0)                             |
|        |       |       | b11: u214-3 (clear DCL? = 0)             |
|        |       |       | b10: u214-11 (set LISTEN? = 0)           |
|        |       |       | b9: u214-8 (force IFC? = 0)              |
|        |       |       | b8: u214-6 (set TALK = 0)                |
|        |       |       | b6..b0: b6..b0 of inverted tx data       |
|   0x13 | R     | R23   | b15: paper sensor (0)                    |
|        |       |       | b14..b13: -                              |
|        |       |       | b12: pen select 1 (1)                    |
|        |       |       | b11: pen select 2 (1)                    |
|        |       |       | b10: pen select 3 (1)                    |
|        |       |       | b9: pen select 4 (1)                     |
|        |       |       | b8: pen stable 4 (1)                     |
|        |       |       | b7: pen stable 3 (1)                     |
|        |       |       | b6: pen stable 2 (1)                     |
|        |       |       | b5: pen stable 1 (1)                     |
|        |       |       | b4: HALF (0)                             |
|        |       |       | b3: FULL (0)                             |
|        |       |       | b2: CUTTER (0)                           |
|        |       |       | b1: -                                    |
|        |       |       | b0: METRIC/ENGLISH                       |
|   0x13 | W     | W23   | b15..b3: -                               |
|        |       |       | b2: RELAY                                |
|        |       |       | b1: ZPWR                                 |
|        |       |       | b0: CUTTER DISABLE                       |
|   0x14 | R     | R24   | -                                        |
|   0x14 | W     | W24   | -                                        |
|   0x15 | R     | R25   | - Disable INT                            |
|   0x15 | W     | W25   | - Enable INT                             |
|   0x16 | R     | R26   | b15: pen select 5 (1)                    |
|        |       |       | b14: pen select 6 (1)                    |
|        |       |       | b13: pen select 7 (1)                    |
|        |       |       | b12: pen select 8 (1)                    |
|        |       |       | b11..b5: -                               |
|        |       |       | b4: pen stable 8 (1)                     |
|        |       |       | b3: pen stable 7 (1)                     |
|        |       |       | b2: pen stable 6 (1)                     |
|        |       |       | b1: pen stable 5 (1)                     |
|        |       |       | b0: pen in arm (1)                       |
|   0x16 | W     | W26   | b15..b12: value for interpolator         |
|        |       |       | b11..b3: -                               |
|        |       |       | b2: power control (0 = ON)               |
|        |       |       | b1..b0: select X/Y LSB/MSB               |
|   0x17 | R     | R27   | b15: y limit                             |
|        |       |       | b14: x limit                             |
|        |       |       | b13: enter                               |
|        |       |       | b12: paper advance present               |
|        |       |       | b11: W1 (1 = fitted)                     |
|        |       |       | b10: chart hold                          |
|        |       |       | b9: pen up                               |
|        |       |       | b8: pen down                             |
|        |       |       | b7: down                                 |
|        |       |       | b6: up                                   |
|        |       |       | b5: right                                |
|        |       |       | b4: left                                 |
|        |       |       | b3: fast                                 |
|        |       |       | b2: p2                                   |
|        |       |       | b1: p1                                   |
|        |       |       | b0: chart load                           |
|   0x17 | W     | W27   | b15..b5: -                               |
|        |       |       | b4: enter LED                            |
|        |       |       | b3: out of limit LED                     |
|        |       |       | b2: error LED                            |
|        |       |       | b1: chart load LED                       |
|        |       |       | b0: pen solenoid (1 = down)              |

Decoding of U49/U50 enable: XSMC & !R10 & RAL

R10 = RAL & STM & A4/ & A3

ROM enable = (R10 | !RAL) & READ & STM & !A14 & !A13

ROM addr = x00a'aaaa'aaaa'aaaa

RAM enable = A10 & A14 & XSMC

RAM addr = x1xx'x1aa'aaaa'aaaa

DC input = S4-1

STS input = S4-2

FLG input = S3

fe01 Error code
fe02 P1.x
fe03 P1.y
fe04 P2.x
fe05 P2.y
fe06 Pen x position
fe07 Pen y position

fe09 Fraction of x position [0..5]
fe0a Fraction of y position [0..5]
fe0b LS part of X speed for interpolator
fe0c MS part of X speed for interpolator
fe0d LS part of Y speed for interpolator
fe0e MS part of Y speed for interpolator
fe0f something related to adaptive speed
fe10 Status byte/inverted mirror of w21

fe16 S-mask
fe17 P-mask
fe18 E-mask
fe19 != 0 when drawing characters

fe1b If != 0 command fns just return instead of returning to main loop (simulated cmd mode)

fe25 Status of W1 jumper

fe28 != 0 when decimal number required
fe29 != 0 when parsing LB string
fe2a 0: param(s) present, != 0: no params
fe2b cmd character pair or parsed param

fe2e Commanded x pen pos, destination point when drawing (PU)
fe2f Commanded y pen pos, destination point when drawing (PU)
fe30 Commanded pen state, by PD/PU (1 = up)
fe31 Tmp to save (fe30)
fe32 Pen state for anything other than PD/PU

fe36 Xmin of window
fe37 Ymin of window
fe38 Xmax of window
fe39 Ymax of window
fe3a Bitmap of (fe3f):(fe40) point wrt window
fe3b Bitmap of (fe2e):(fe2f) point wrt window, status of "out of limit" LED (0 OFF, != 0 ON)

fe3f Absolute x position of pen (starting point when drawing)
fe40 Absolute y position of pen (starting point when drawing)

fe48 Lost state if != 0 (Out of limit LED is blinking)

fe4b Relative/absolute X position to move to
fe4c Relative/absolute Y position to move to
fe4d Pen command and actual up/down state (1 = up)
fe4e When starting motion: == 0 pos in (fe4b):(fe4c) is abs, != 0 pos is relative
fe4f MSB of some accumulator ?
fe50 LSB of some accumulator ?
fe51 min(x dist, y dist) / max(x dist, y dist) * 32768
fe52 X distance - Y distance

fe57 X delta to travel (signed)
fe58 Y delta to travel (signed)
fe59 Timer to delay start of motion
fe5a X distance to travel (abs value)

fe5c Y distance to travel (abs value)

fe63 X component of speed, max = +-90 (unit = 0.407 cm/s)
fe64 Y component of speed, max = +-90 (unit = 0.407 cm/s)

fe68 State of movement FSM (0 = pen not moving, 1..7 = moving, 8 = moving as commanded by keys)
fe69 Save A during ISR
fe6a Save B during ISR
fe6b Save E (b15) and O (b0) during ISR

fe6d Speed for pen 1
fe6e Speed for pen 2
fe6f Speed for pen 3
fe70 Speed for pen 4
fe71 Speed for pen 5
fe72 Speed for pen 6
fe73 Speed for pen 7
fe74 Speed for pen 8
fe75 Current pen no.
fe76 Automatic pen pickup if != 0
fe77 Automatic pen pickup timer
fe78 Speed to use during motion
fe79 == 0: normal speed, != 0 adaptive speed

fe7c Use 9 cm/s speed when != 0 and (fe7d) == 0
fe7d Use (feed) speed when != 0

fe8b Mirror of W27
fe8c Timer (when != 0, Enter LED is blinking)
fe8d Timer
fe8e Timer
fe8f Timer
fe90 Timer
fe91 Timer
fe92 Timer
fe93 Timer for LED blinking

fe9b Param accumulator when parsing

fe9d Skip rest of cmd if != 0
fe9e Param parsing if != 0

fea0 State of parser start=ffff, 1st cmd char=0000, 2nd cmd char=0001,params=0002/0003
fea1 Neg/pos sign parsed
fea2 negative number being parsed
fea3 Point parsed
fea4 10^(fea5+1) = 10,100,1000
fea5 Counter of decimal digits [0..4]
fea6 At least one digit parsed
fea7 deferred error 3 from parsing
fea8 Accumulator of parallel poll active conditions
fea9 Accumulator of serial poll active conditions

feab Character being parsed
feac Byte to be sent over HPIB if != 0

feb2 "tp" value of TL cmd (unit = 0.01 / 256)
feb3 -"tn" value of TL cmd (unit = 0.01 / 256)
feb4 |P1.y - P2.y| * tp
feb5 |P1.y - P2.y| * -tn
feb6 |P1.x - P2.x| * tp
feb7 |P1.x - P2.x| * -tn
feb8 Pattern active if != 0
feb9 pattern length of LT cmd (unit = 0.01 / 256)
feba sqrt(((feb9)*|P1.x-P2.x|/25600)^2+((feb9)*|P1.y-P2.y|/25600)^2)

febf Number of pattern segments
fec0 Current segment of pattern (b0 = pen position, 1 = up)
fec1 Pointer to length of pattern segments
fec2 Saved x component of dest point when drawing pattern
fec3 Saved y component of dest point when drawing pattern
fec4 Remaining length of current pattern segment (PU)

fec9 tmp
feca tmp

fecd Points to fecf for std charset, fed1 for alt. charset
fece Points to fed0 for std charset, fed2 for alt. charset
fecf Standard charset no.
fed0 Ptr to standard charset font (=16df)
fed1 Alternate charset no.
fed2 Ptr to alternate charset font (=16df)

fed4 Absolute x position, saved at start of char. drawing
fed5 Absolute y position, saved at start of char. drawing
fed6 Accumulator of horiz. movement for char. drawing Integer part
fed7 Fractional part
fed8 Accumulator of vert. movement for char. drawing Integer part
fed9 Fractional part
feda X position inside character cell (in 1/96 of width)
fedb Y position inside character cell (in 1/128 of height)

fedd == 0 Absolute char. size != 0 Relative char. size
fede width of char. space (PU)
fedf height of char. space (PU)
fee0 0 when DI cmd issued, "run" part of DR cmd (maximised by 16a1)
fee1 0 when DI cmd issued, "rise" part of DR cmd (maximised by 16a1)
fee2 "run" part of DI/DR cmd as X component of unit vector (normalized by 01bb)
fee3 "rise" part of DI/DR cmd as Y component of unit vector (normalized by 01bb)
fee4 "tan theta" param of SL cmd

fee6 tmp
fee7 tmp
fee8 tmp
fee9 tmp
feea tmp
feeb SM mode enabled when != 0 (it holds 177e: ptr to glyph table)
feec When SM mode is enabled, it holds the offset into glyph table of first op code
feed Speed to use during motion if (fe7d) != 0

fef0 Inverted mirror of w23
fef1 Reduced precision mode if < 0 (during pattern drawing)
fef2 Commanded X position of pen in scaling mode
fef3 Commanded Y position of pen in scaling mode
fef4 Scaling Xmin
fef5 Scaling Ymin
fef6 Scaling Xmax
fef7 Scaling Ymax
fef8 Scaling active if != 0
fef9 Require inverse scaling when != 0, wait for parameters to end when < 0 (LB, CP, UC cmds)

fefb Do a lightweight handling of HPIB when != 0
fefc State of \x1b.^ parser 0 -> 1 -> 8001
fefd Status of circ. buffer. b15 = set when enqueueing, clear when dequeueing; b0 = 1 when buffer has space.
fefe IN ptr of circular buffer
feff OUT ptr of circular buffer
ff00 Inverted mirror of w22
ff01 Start of circular buffer, init = 7dff
ff02 Start of stack

| *Cmd* | *Addr* | *Emulated?* |
|-------+--------+-------------|
| AF    | 04dc   | N           |
| AH    | 04de   | N           |
| AP    | 0b5d   | N           |
| CA    | 1613   | Y           |
| CP    | 14a0   | Y           |
| CS    | 1611   | Y           |
| DC    | 0ad3   | N           |
| DF    | 0893   | Y           |
| DI    | 168d   | Y           |
| DP    | 0ad6   | N           |
| DR    | 1687   | Y           |
| EC    | 04d0   | N           |
| IM    | 12d7   | Y           |
| IN    | 050c   | Y           |
| IP    | 0610   | Y           |
| IW    | 09b8   | Y           |
| LB    | 140f   | Y           |
| LT    | 0a73   | Y           |
| OA    | 0565   | Y           |
| OC    | 1035   | Y           |
| OD    | 1027   | N           |
| OE    | 1000   | Y           |
| OF    | 0547   | Y           |
| OI    | 054d   | Y           |
| OO    | 0535   | Y           |
| OP    | 1018   | Y           |
| OS    | 100b   | Y           |
| PA    | 067c   | Y           |
| PD    | 02e5   | Y           |
| PG    | 04e1   | N           |
| PR    | 067f   | Y           |
| PU    | 02eb   | Y           |
| SA    | 1448   | Y           |
| SC    | 05df   | Y           |
| SI    | 16bf   | Y           |
| SL    | 16b9   | Y           |
| SM    | 1463   | Y           |
| SP    | 0c24   | Y           |
| SR    | 1637   | Y           |
| SS    | 1445   | Y           |
| TL    | 09fa   | Y           |
| UC    | 14b4   | Y           |
| VA    | 0b64   | N           |
| VN    | 0b66   | N           |
| VS    | 0c00   | N           |
| XT    | 0a4c   | Y           |
| YT    | 0a6e   | Y           |

0000: 0000  NOP
0001: 0000  NOP
0002: 0000  NOP
0003: 0000  NOP
0004: 0000  NOP
0005: 0000  NOP
0006: 0000  NOP
0007: 0000  NOP
0008: 040d  LDA $020d           Interrupt vector
0009: 0000  NOP
000a: 0000  NOP
000b: 0000  NOP
000c: 0000  NOP
000d: 0000  NOP
000e: 0000  NOP
000f: 0000  NOP
0010: 0000  NOP
0011: 0000  NOP
0012: 0000  NOP
0013: 0000  NOP
0014: 0000  NOP
0015: 0000  NOP
0016: 0000  NOP
0017: 0000  NOP
0018: 0000  NOP
0019: 0000  NOP
001a: 0000  NOP
001b: 0000  NOP
001c: 0000  NOP
001d: 0000  NOP
001e: 0000  NOP
001f: 0000  NOP
*
* Reset location
*
0020: f060  CMA
0021: 0084  LDA $0084           = ffff
0022: 3016  STA $0016
0023: 2084  ADA $0084
0024: 3016  STA $0016
0025: 2084  ADA $0084
0026: 3016  STA $0016
0027: 2084  ADA $0084
0028: 3016  STA $0016           Set null X/Y speeds in interpolator
0029: 7c82  SSS $002b
002a: e8d5  JMP $00d5,I         Normal start -> 04f7
002b: e8d7  JMP $00d7,I         Self test    -> 0304
002c: 5041  AND $0041           "PA"
002d: 067c  LDA $007c
002e: 5055  AND $0055           "PU"
002f: 02eb  LDA $feeb
0030: 5044  AND $0044           "PD"
0031: 02e5  LDA $fee5
0032: 5052  AND $0052           "PR"
0033: 067f  LDA $007f
0034: 4350  JSM $ff50           "CP"
0035: 14a0  CPA $02a0
0036: 5352  AND $ff52           "SR"
0037: 1637  CPA $0037
0038: 5349  AND $ff49           "SI"
0039: 16bf  CPA $00bf
003a: 4443  JSM $0243           "DC"
003b: 0ad3  LDB $fed3
003c: 4446  JSM $0246           "DF"
003d: 0893  LDB $0093
003e: 4449  JSM $0249           "DI"
003f: 168d  CPA $008d
0040: 4450  JSM $0250           "DP"
0041: 0ad6  LDB $fed6
0042: 4452  JSM $0252           "DR"
0043: 1687  CPA $0087
0044: 4950  ISZ $0150           "IP"
0045: 0610  LDA $0010
0046: 494d  ISZ $014d           "IM"
0047: 12d7  CPA $fed7
0048: 494e  ISZ $014e           "IN"
0049: 050c  LDA $030c
004a: 4957  ISZ $0157           "IW"
004b: 09b8  LDB $01b8
004c: 4c42  ISZ $0242           "LB"
004d: 140f  CPA $020f
004e: 4c54  ISZ $0254           "LT"
004f: 0a73  LDB $fe73
0050: 4f43  ISZ $0143           "OC"
0051: 1035  CPA $0035
0052: 4f44  ISZ $0144           "OD"
0053: 1027  CPA $0027
0054: 4f45  ISZ $0145           "OE"
0055: 1000  CPA $0000(A)
0056: 4f50  ISZ $0150           "OP"
0057: 1018  CPA $0018
0058: 4f53  ISZ $0153           "OS"
0059: 100b  CPA $000b
005a: 4353  JSM $ff53           "CS"
005b: 1611  CPA $0011
005c: 5353  AND $ff53           "SS"
005d: 1445  CPA $0245
005e: 4341  JSM $ff41           "CA"
005f: 1613  CPA $0013
0060: 5341  AND $ff41           "SA"
0061: 1448  CPA $0248
0062: 534c  AND $ff4c           "SL"
0063: 16b9  CPA $00b9
0064: 534d  AND $ff4d           "SM"
0065: 1463  CPA $0263
0066: 5350  AND $ff50           "SP"
0067: 0c24  LDB $0224
0068: 544c  AND $024c           "TL"
0069: 09fa  LDB $01fa
006a: 5543  AND $0343           "UC"
006b: 14b4  CPA $02b4
006c: 5653  AND $0053           "VS"
006d: 0c00  LDB $0200
006e: 5641  AND $0041           "VA"
006f: 0b64  LDB $ff64
0070: 564e  AND $004e           "VN"
0071: 0b66  LDB $ff66
0072: 5854  DSZ $0054           "XT"
0073: 0a4c  LDB $fe4c
0074: 5954  DSZ $0154           "YT"
0075: 0a6e  LDB $fe6e
0076: 4150  JSM $0150           "AP"
0077: 0b5d  LDB $ff5d
0078: 0078  LDA $0078
0079: 0079  LDA $0079
007a: 0001  LDA $0001(B)
007b: 0002  LDA $0002(P)
007c: 0003  LDA $0003(R)
007d: 0005  LDA $0005
007e: 000a  LDA $000a
007f: 0014  LDA $0014
0080: 001d  LDA $001d
0081: 0033  LDA $0033
0082: 005a  LDA $005a
0083: 0083  LDA $0083
0084: ffff  SES $0083,S
0085: fff8  SES $007d,S
0086: fff7  SES $007d,S
0087: fff6  SES $007d,S
0088: fff4  SES $007c,S
0089: fffe  SES $0087,S
008a: fff0  SES $007a,S
008b: ffef  SES $007a,S
008c: fffd  SES $0089,S
008d: ffe8  SES $0075,S
008e: fffc  SES $008a,S
008f: ff00  SES $008f
0090: ffdf  SES $00af,S
0091: fffb  SES $008c,S
0092: fffa  SES $008c,S
0093: ffd0  SES $00a3,S
0094: fff9  SES $008d,S
0095: 0000  NOP
0096: 0008  LDA $0008
0097: 004f  LDA $004f
0098: 000f  LDA $000f
0099: 0200  LDA $fe00
009a: 1000  CPA $0000(A)
009b: 8000  LDA $0000(A),I
009c: 1400  CPA $0200
009d: 005f  LDA $005f
009e: 000c  LDA $000c
009f: 000d  LDA $000d
00a0: 007f  LDA $007f
00a1: 0010  LDA $0010
00a2: 0011  LDA $0011
00a3: 0400  LDA $0200
00a4: 2000  ADA $0000(A)
00a5: 0018  LDA $0018
00a6: 001b  LDA $001b
00a7: 001e  LDA $001e
00a8: 001f  LDA $001f
00a9: 00ff  LDA $00ff
00aa: 3000  STA $0000(A)
00ab: 0004  LDA $0004
00ac: 0020  LDA $0020
00ad: 0024  LDA $0024
00ae: 0100  LDA $0100
00af: 0800  LDB $0000(A)
00b0: 4000  JSM $0000(A)
00b1: 002b  LDA $002b
00b2: 002c  LDA $002c
00b3: 0a00  LDB $fe00
00b4: 0006  LDA $0006
00b5: 0030  LDA $0030
00b6: 0007  LDA $0007
00b7: 7fff  RLB $00b6,S
00b8: 003b  LDA $003b
00b9: 003f  LDA $003f
00ba: 01ff  LDA $01ff
00bb: ff80  SES $00bb,C
00bc: 0064  LDA $0064
00bd: 03e8  LDA $ffe8
00be: 3fff  STB $01ff
00bf: 0190  LDA $0190
00c0: 7e00  SLB $00c0
00c1: 7c00  RZB $00c1
00c2: ff05  SES $00c7
00c3: 7ff9  RLB $00bc,S
00c4: 7f02  RLB $00c6           Bottom of stack (it grows upwards)
00c5: 08cb  LDB $00cb
00c6: 08cf  LDB $00cf
00c7: 08d1  LDB $00d1
00c8: 058d  LDA $038d
00c9: 058b  LDA $038b
00ca: 09f5  LDB $01f5
00cb: 0c2c  LDB $022c
00cc: 091f  LDB $011f
00cd: 0903  LDB $0103
00ce: 093c  LDB $013c
00cf: 098f  LDB $018f
00d0: 0989  LDB $0189
00d1: 1484  CPA $0284
00d2: 1486  CPA $0286
00d3: 071a  LDA $011a
00d4: 0570  LDA $0370
00d5: 04f7  LDA $02f7
00d6: 1274  CPA $fe74
00d7: 0304  LDA $ff04
00d8: 0fc5  LDB $01c5
00d9: 12a1  CPA $fea1
00da: 0f70  LDB $0170
00db: 0af2  LDB $fef2
00dc: 0a45  LDB $fe45
00dd: 0107  LDA $0107
00de: 0cb4  LDB $02b4
00df: 0b6a  LDB $ff6a
00e0: 3e80  STB $0080
00e1: 2c88  ADB $0288
00e2: c288  JSM $fe88,I
00e3: d480  AND $0280,I
00e4: fef8  SEC $00dc,S
00e5: 0016  LDA $0016
00e6: 0208  LDA $fe08
00e7: 017c  LDA $017c
00e8: 3d68  STB $0368
00e9: 288c  ADB $008c
00ea: 022c  LDA $fe2c
00eb: 03c8  LDA $ffc8
00ec: 0dfc  LDB $03fc           X pos of pen 1 stable: 3580
00ed: 143c  CPA $023c           X pos of pen 2 stable: 5180
00ee: 1a7c  CPB $fe7c           X pos of pen 3 stable: 6780
00ef: 20bc  ADA $00bc           X pos of pen 4 stable: 8380
00f0: 26fc  ADA $00fc           X pos of pen 5 stable: 9980
00f1: 2d3c  ADB $033c           X pos of pen 6 stable: 11580
00f2: 337c  STA $ff7c           X pos of pen 7 stable: 13180
00f3: 39bc  STB $01bc           X pos of pen 8 stable: 14780
00f4: 0080  LDA $0080
00f5: 0400  LDA $0200
00f6: 00df  LDA $00df
00f7: 0000  NOP
00f8: 0000  NOP
00f9: ffce  SES $0107,S
00fa: fff6  SES $00f0,S
00fb: fff6  SES $00f1,S
00fc: 00c0  LDA $00c0
00fd: 0180  LDA $0180
00fe: 0049  LDA $0049
00ff: 0060  LDA $0060
*
* Wait for a parameter
*
0100: 022a  LDA $fe2a
0101: 7502  SZA $0103
0102: 692d  JMP $012d
0103: 8003  LDA $0003(R),I
0104: 207a  ADA $007a
0105: 3200  STA $fe00           Pop return address from stack and save it @fe00
0106: 5803  DSZ $0003(R)
*
* Back to main loop
*
0107: e908  JMP $0108,I         = 0596
0108: 0596  LDA $0396
0109: bfff  STB $01ff,I
010a: 021b  LDA $fe1b
010b: 7502  SZA $010d
010c: f081  RET 1
010d: 6907  JMP $0107
010e: 1152  CPA $0152
010f: 0421  LDA $0221
0110: 0fd9  LDB $01d9
*
* Get exactly 1 parameter (A != 0: decimal, A == 0: integer)
*
0111: 4123  JSM $0123
0112: 4128  JSM $0128
0113: 0001  LDA $0001(B)
0114: f081  RET 1
*
* Get exactly 2 decimal parameters
*
0115: 007a  LDA $007a
*
* Get exactly 2 parameters (A != 0: decimal, A == 0: integer)
*
0116: 4123  JSM $0123
0117: 322c  STA $fe2c
0118: 4124  JSM $0124
0119: 4128  JSM $0128
011a: 3a2d  STB $fe2d
011b: 022c  LDA $fe2c
011c: f081  RET 1
*
* Get 2 parameters (A != 0: decimal, A == 0: integer)
*
011d: 4123  JSM $0123
011e: 322c  STA $fe2c
011f: 4124  JSM $0124
0120: 022c  LDA $fe2c
0121: 3a2d  STB $fe2d
0122: f081  RET 1
*
* Get 1 parameter (A != 0: decimal, A == 0: integer)
*
0123: 3228  STA $fe28
0124: 4100  JSM $0100
0125: 022b  LDA $fe2b
0126: 0800  LDB $0000(A)
0127: f081  RET 1
*
* Check no (more) params given
*
0128: 022a  LDA $fe2a
0129: 7502  SZA $012b
012a: f081  RET 1
012b: 007a  LDA $007a           = 1
012c: 329d  STA $fe9d
012d: 007b  LDA $007b           = 2
012e: 6935  JMP $0135           Set wrong no. of params error
012f: 007c  LDA $007c           = 3
0130: 6932  JMP $0132           Set bad parameter error
*
* Command not recognized
*
0131: 007a  LDA $007a           = 1
0132: 0a2a  LDB $fe2a
0133: 7c02  RZB $0135
0134: 329d  STA $fe9d
0135: 413b  JSM $013b           Set unrecognized command error
*
* Purge stack & return to main loop
*
0136: 00c4  LDA $00c4
0137: 3003  STA $0003(R)
0138: 00dd  LDA $00dd           = 0107
0139: 32aa  STA $feaa
013a: 6907  JMP $0107
*
* Raise error in A
*
013b: 32c9  STA $fec9
013c: 087a  LDB $007a           = 1
013d: f020  TCA
013e: 207a  ADA $007a           = 1
013f: 7503  SZA $0142
0140: f980  SBL 1
0141: 693e  JMP $013e
0142: 0001  LDA $0001(B)        B = 2^(error-1)
0143: 5218  AND $fe18
0144: 0a01  LDB $fe01
0145: 750a  SZA $014f
0146: 7c09  RZB $014f           Another error already pending
0147: 02c9  LDA $fec9
0148: 3201  STA $fe01
0149: 08ac  LDB $00ac           = 0020 -> error bit mask in status byte
014a: c0d6  JSM $00d6,I         = 1274
* Turn error LED ON
014b: 028b  LDA $fe8b
014c: 60ab  IOR $00ab           = 4
014d: 328b  STA $fe8b
014e: 3017  STA $0017
014f: f081  RET 1
*
* B:A += feca:fec9
*
0150: 2aca  ADB $feca
0151: fe81  SEC $0152,C
0152: 22c9  ADA $fec9
0153: fe02  SEC $0155
0154: 287a  ADB $007a
0155: f081  RET 1
*
* Delay
* OUT: A = 0
*
0156: 4800  ISZ $0000(A)
0157: 6956  JMP $0156
0158: f081  RET 1
*
* Wait for movement to end; deal with a subset of HPIB activities in the meantime
* OUT: A = 0
*
0159: 007a  LDA $007a
015a: 32fb  STA $fefb
015b: c10e  JSM $010e,I         = 1152
015c: 0268  LDA $fe68
015d: 743c  RZA $0159
015e: 32fb  STA $fefb
015f: f081  RET 1
*
* Signed division
* IN: B:A       signed dividend
*     fecb      signed divisor
* OUT: O        Overflow
*      A        signed quotient
*      B        remainder (has sign of dividend)
*
0160: 3a1c  STB $fe1c
0161: 0acb  LDB $fecb
0162: fe81  SEC $0163,C         E = 0
0163: fc03  SBP $0166
0164: f820  TCB
0165: fec1  SEC $0166,S         E = sign of divisor
0166: 3a1e  STB $fe1e           = |divisor|
0167: f820  TCB
0168: 3a1f  STB $fe1f           = -|divisor|
0169: 088a  LDB $008a           = fff0
016a: 3a20  STB $fe20
016b: 0889  LDB $0089           = fffe
016c: 3a21  STB $fe21
016d: 3a1d  STB $fe1d
016e: 0a1c  LDB $fe1c
016f: fc09  SBP $0178
0170: 4a1d  ISZ $fe1d           Dividend is negative
0171: f860  CMB
0172: fec2  SEC $0174,S
0173: ff81  SES $0174,C         Complement E
0174: 7503  SZA $0177
0175: f020  TCA
0176: 6978  JMP $0178
0177: 287a  ADB $007a           = 1
0178: fe02  SEC $017a           B:A = |dividend|
0179: 4a21  ISZ $fe21
017a: f6c1  SOC $017b,S
017b: 3a1c  STB $fe1c
017c: 2a1f  ADB $fe1f
017d: fc15  SBP $0192
017e: 0a1c  LDB $fe1c
017f: f980  SBL 1
0180: f402  SAP $0182
0181: 287a  ADB $007a           = 1
0182: f180  SAL 1
0183: 2a1f  ADB $fe1f
0184: fd03  SBM $0187
0185: 207a  ADA $007a
0186: 6988  JMP $0188
0187: 2a1e  ADB $fe1e
0188: 4a20  ISZ $fe20
0189: 697f  JMP $017f
018a: f508  SAM $0192
018b: f020  TCA
018c: 4a21  ISZ $fe21
018d: f020  TCA
018e: 4a1d  ISZ $fe1d
018f: 6991  JMP $0191
0190: f820  TCB
0191: f681  SOC $0192,C         O = 0
0192: f081  RET 1
*
* B:A = A * B (signed multiplication)
*
0193: 3a1c  STB $fe1c
0194: 0889  LDB $0089           = fffe
0195: 3a1d  STB $fe1d
0196: 0a1c  LDB $fe1c
0197: fe81  SEC $0198,C
0198: f403  SAP $019b
0199: f020  TCA
019a: fec1  SEC $019b,S
019b: fc04  SBP $019f
019c: f820  TCB
019d: fec2  SEC $019f,S
019e: ff81  SES $019f,C
019f: fe02  SEC $01a1
01a0: 4a1d  ISZ $fe1d           -> ffff: result is negative
01a1: 3a1c  STB $fe1c
01a2: 0898  LDB $0098           = 000f
01a3: 3a1e  STB $fe1e
01a4: 0895  LDB $0095           = 0
01a5: 7602  SLA $01a7
01a6: 2a1c  ADB $fe1c
01a7: f140  SAR 1
01a8: 7e02  SLB $01aa
01a9: 609b  IOR $009b           = 8000
01aa: f940  SBR 1
01ab: 5a1e  DSZ $fe1e
01ac: 69a5  JMP $01a5
01ad: f140  SAR 1
01ae: 7e02  SLB $01b0
01af: 609b  IOR $009b
01b0: f940  SBR 1
01b1: 4a1d  ISZ $fe1d
01b2: 69b7  JMP $01b7
01b3: f860  CMB
01b4: f020  TCA
01b5: 7402  RZA $01b7
01b6: 287a  ADB $007a
01b7: f681  SOC $01b8,C
01b8: f081  RET 1
*
* A = A ^ B
*
01b9: e9ba  JMP $01ba,I         = 0800
01ba: 0800  LDB $0000(A)
*
* IN: A         signed X component
*     B         signed Y component
* OUT: A        = X/D*16384
*      B        = Y/D*16384
*      fec8     = D
*      fecb     = D
* where
* D = sqrt(X * X + Y * Y)
*
01bb: 32c6  STA $fec6
01bc: 3ac7  STB $fec7
01bd: 0800  LDB $0000(A)
01be: 4193  JSM $0193
01bf: 3aca  STB $feca
01c0: 32c9  STA $fec9           feca:fec9 = X*X
01c1: 02c7  LDA $fec7
01c2: 0800  LDB $0000(A)
01c3: 4193  JSM $0193
01c4: 4150  JSM $0150
01c5: 3aca  STB $feca
01c6: 32c9  STA $fec9           feca:fec9 = X*X+Y*Y
01c7: 0091  LDA $0091           = fffb
01c8: 32c8  STA $fec8
01c9: 02c6  LDA $fec6
01ca: f402  SAP $01cc
01cb: f020  TCA
01cc: 0ac7  LDB $fec7
01cd: fc02  SBP $01cf
01ce: f820  TCB
01cf: 32cb  STA $fecb
01d0: f140  SAR 1
01d1: 2001  ADA $0001(B)
01d2: f940  SBR 1
01d3: 2acb  ADB $fecb
01d4: 3acb  STB $fecb
01d5: f820  TCB
01d6: 2800  ADB $0000(A)
01d7: fd02  SBM $01d9
01d8: 32cb  STA $fecb
01d9: 0aca  LDB $feca
01da: 02c9  LDA $fec9
01db: 4160  JSM $0160
01dc: 22cb  ADA $fecb
01dd: f140  SAR 1
01de: 4ac8  ISZ $fec8
01df: 69d8  JMP $01d8
01e0: 32c8  STA $fec8           A = sqrt(X*X+Y*Y)
01e1: 32cb  STA $fecb
01e2: 0095  LDA $0095
01e3: 0889  LDB $0089           = fffe
01e4: 3acc  STB $fecc
01e5: 0ac7  LDB $fec7
01e6: c0dc  JSM $00dc,I
01e7: 4160  JSM $0160           B:A = Y * 16384
01e8: 32c7  STA $fec7           A = Y * 16384 / sqrt(X*X+Y*Y)
01e9: 0089  LDA $0089           = fffe
01ea: 32cc  STA $fecc
01eb: 0ac6  LDB $fec6
01ec: 0095  LDA $0095
01ed: c0dc  JSM $00dc,I
01ee: 4160  JSM $0160           B:A = X * 16384
01ef: 32c6  STA $fec6           A = X * 16384 / sqrt(X*X+Y*Y)
01f0: 0ac7  LDB $fec7           B = Y * 16384 / sqrt(X*X+Y*Y)
01f1: f081  RET 1
01f2: 0000  NOP
01f3: 0000  NOP
01f4: 0000  NOP
01f5: 0000  NOP
01f6: 0000  NOP
01f7: 0000  NOP
01f8: 0000  NOP
01f9: 0000  NOP
01fa: 0000  NOP
01fb: 0000  NOP
01fc: 0000  NOP
01fd: 0000  NOP
01fe: 0000  NOP
*
* Handle user keys
*
01ff: 0268  LDA $fe68
0200: 1096  CPA $0096           = 8
0201: 6c04  JMP $0204
0202: 7502  SZA $0204
0203: 6c3b  JMP $023b
0204: c0df  JSM $00df,I         = 0b6a
0205: 0017  LDA $0017
0206: f103  AAR 4
0207: 3286  STA $fe86
0208: 0282  LDA $fe82
0209: 6283  IOR $fe83
020a: 7411  RZA $021b
020b: 0286  LDA $fe86
020c: 7606  SLA $0212
020d: 0890  LDB $0090           = ffdf
020e: 3a8f  STB $fe8f
020f: 007a  LDA $007a           = 1
0210: 3283  STA $fe83
0211: 6c18  JMP $0218
0212: f100  AAR 1
0213: 7608  SLA $021b
0214: 0890  LDB $0090           = ffdf
0215: 3a8e  STB $fe8e
0216: 007a  LDA $007a           = 1
0217: 3282  STA $fe82
0218: 0896  LDB $0096           = 8
0219: 324f  STA $fe4f
021a: 3a68  STB $fe68
021b: 0285  LDA $fe85
021c: 6284  IOR $fe84
021d: 7412  RZA $022f
021e: 0286  LDA $fe86
021f: f101  AAR 2
0220: 7606  SLA $0226
0221: 0890  LDB $0090
0222: 3a91  STB $fe91
0223: 007a  LDA $007a
0224: 3284  STA $fe84
0225: 6c2c  JMP $022c
0226: f100  AAR 1
0227: 7608  SLA $022f
0228: 0890  LDB $0090
0229: 3a92  STB $fe92
022a: 007a  LDA $007a
022b: 3285  STA $fe85
022c: 0896  LDB $0096
022d: 324f  STA $fe4f
022e: 3a68  STB $fe68
022f: 0895  LDB $0095
0230: 0282  LDA $fe82
0231: 6283  IOR $fe83
0232: 6284  IOR $fe84
0233: 6285  IOR $fe85
0234: 7507  SZA $023b
0235: 44a8  JSM $02a8
0236: 3a8c  STB $fe8c
0237: 0a14  LDB $fe14
0238: 7c02  RZB $023a
0239: 44cd  JSM $02cd
023a: 6907  JMP $0107
023b: 0a8d  LDB $fe8d
023c: 7c3e  RZB $023a
023d: c0df  JSM $00df,I
023e: 088e  LDB $008e
023f: 3a98  STB $fe98
0240: 087a  LDB $007a
0241: 3a97  STB $fe97
0242: 0013  LDA $0013
0243: f182  SAL 3
0244: 4451  JSM $0251
0245: 6c5e  JMP $025e
0246: e8cb  JMP $00cb,I
0247: 088e  LDB $008e
0248: 3a98  STB $fe98
0249: 087d  LDB $007d
024a: 3a97  STB $fe97
024b: 0016  LDA $0016
024c: 4451  JSM $0251
024d: 6c5e  JMP $025e
024e: e8cb  JMP $00cb,I
024f: 6c61  JMP $0261
0250: f180  SAL 1
0251: f408  SAP $0259
0252: 0890  LDB $0090
0253: 3a8d  STB $fe8d
0254: 0a97  LDB $fe97
0255: 028c  LDA $fe8c
0256: 7502  SZA $0258
0257: f081  RET 1
0258: f082  RET 2
0259: 287a  ADB $007a
025a: 3a97  STB $fe97
025b: 4a98  ISZ $fe98
025c: 6c50  JMP $0250
025d: f083  RET 3
025e: 3a75  STB $fe75
025f: 44cb  JSM $02cb
0260: e8cb  JMP $00cb,I
0261: 0017  LDA $0017
0262: 7602  SLA $0264
0263: 6c85  JMP $0285
0264: f1c9  RAR 10
0265: 7603  SLA $0268
0266: 448f  JSM $028f
0267: 6907  JMP $0107
0268: f1c6  RAR 7
0269: 7602  SLA $026b
026a: 6c97  JMP $0297
026b: 3295  STA $fe95
026c: f100  AAR 1
026d: 7602  SLA $026f
026e: 6ca2  JMP $02a2
026f: 3296  STA $fe96
0270: f105  AAR 6
0271: 7604  SLA $0275
0272: 0890  LDB $0090
0273: 3a8d  STB $fe8d
0274: 6ce9  JMP $02e9
0275: f100  AAR 1
0276: 7604  SLA $027a
0277: 0890  LDB $0090
0278: 3a8d  STB $fe8d
0279: 6cef  JMP $02ef
027a: f103  AAR 4
027b: 7704  RLA $027f
027c: 0095  LDA $0095
027d: 3294  STA $fe94
027e: 6907  JMP $0107
027f: 0890  LDB $0090
0280: 3a8d  STB $fe8d
0281: 0a94  LDB $fe94
0282: 7c3c  RZB $027e
0283: 4a94  ISZ $fe94
0284: 6cd1  JMP $02d1
0285: 0890  LDB $0090
0286: 3a8d  STB $fe8d
0287: 028b  LDA $fe8b
0288: 607b  IOR $007b           = 2
0289: 414d  JSM $014d           Turn "chart load" LED on
028a: 00e0  LDA $00e0           = 3e80
028b: 322e  STA $fe2e
028c: 00e1  LDA $00e1           = 2c88
028d: 322f  STA $fe2f
028e: 6c9d  JMP $029d
028f: 0a8c  LDB $fe8c
0290: 7d02  SZB $0292
0291: e8d5  JMP $00d5,I
0292: 0890  LDB $0090           = ffdf
0293: 3a8d  STB $fe8d
0294: 028b  LDA $fe8b
0295: 508c  AND $008c           = fffd
0296: 694d  JMP $014d           Turn "chart load" LED off
0297: 0a95  LDB $fe95
0298: 7e02  SLB $029a
0299: 6c6c  JMP $026c
029a: 3295  STA $fe95
029b: ec9c  JMP $029c,I
029c: 0658  LDA $0058
029d: 32f9  STA $fef9
029e: 6cb4  JMP $02b4
029f: c0ca  JSM $00ca,I
02a0: 087b  LDB $007b
02a1: 6ce0  JMP $02e0
02a2: 0a96  LDB $fe96
02a3: 7e02  SLB $02a5
02a4: 6c70  JMP $0270
02a5: 3296  STA $fe96
02a6: eca7  JMP $02a7,I
02a7: 0668  LDA $0068
02a8: 32f9  STA $fef9
02a9: 3a77  STB $fe77
02aa: f081  RET 1
02ab: 0202  LDA $fe02
02ac: 322e  STA $fe2e
02ad: 0203  LDA $fe03
02ae: 322f  STA $fe2f
02af: 6cb4  JMP $02b4
02b0: 0204  LDA $fe04
02b1: 322e  STA $fe2e
02b2: 0205  LDA $fe05
02b3: 322f  STA $fe2f
*
*
*
02b4: c0cc  JSM $00cc,I         = 091f Update status of "out of limit"
02b5: c0cd  JSM $00cd,I         = 0903 Set "out of limit" LED
02b6: 3a3a  STB $fe3a
02b7: 022e  LDA $fe2e
02b8: 323f  STA $fe3f
02b9: 0a2f  LDB $fe2f
02ba: 3a40  STB $fe40           Set last commanded pen pos
02bb: fe81  SEC $02bc,C
02bc: c4c0  JSM $02c0,I         = 0c79
02bd: 0095  LDA $0095
02be: 3248  STA $fe48           Clear lost state
02bf: 6cee  JMP $02ee
02c0: 0c79  LDB $0279
02c1: 0890  LDB $0090
02c2: 3a8d  STB $fe8d
02c3: 0a8c  LDB $fe8c
02c4: 7c02  RZB $02c6
02c5: f081  RET 1
02c6: 44cb  JSM $02cb
02c7: 4159  JSM $0159
02c8: 0206  LDA $fe06
02c9: 0a07  LDB $fe07
02ca: f082  RET 2
02cb: 0895  LDB $0095
02cc: 3a8c  STB $fe8c
02cd: 028b  LDA $fe8b
02ce: 508b  AND $008b           = ffef
02cf: 414d  JSM $014d           Turn ENTER LED off
02d0: f081  RET 1
02d1: 0214  LDA $fe14
02d2: 7510  SZA $02e2
02d3: 028b  LDA $fe8b
02d4: 088b  LDB $008b
02d5: 5001  AND $0001(B)
02d6: 414d  JSM $014d
02d7: 4159  JSM $0159
02d8: 3214  STA $fe14
02d9: 0206  LDA $fe06
02da: 3211  STA $fe11
02db: 0207  LDA $fe07
02dc: 3212  STA $fe12
02dd: 028b  LDA $fe8b
02de: 3213  STA $fe13
02df: 08ab  LDB $00ab           = 4
02e0: c0d6  JSM $00d6,I         Digitized point available
02e1: 6907  JMP $0107
02e2: 007a  LDA $007a
02e3: 328c  STA $fe8c
02e4: 6907  JMP $0107
*
* PD cmd
*
02e5: 4128  JSM $0128
02e6: 0230  LDA $fe30
02e7: 7515  SZA $02fc           Already down
02e8: 4a49  ISZ $fe49
02e9: 0095  LDA $0095           = 0
02ea: 6cf0  JMP $02f0
*
* PU cmd
*
02eb: 4128  JSM $0128
02ec: 0230  LDA $fe30
02ed: 740f  RZA $02fc           Already up
02ee: 4a49  ISZ $fe49
02ef: 007a  LDA $007a           = 1
02f0: 3230  STA $fe30
02f1: 087a  LDB $007a           = 1
02f2: 7602  SLA $02f4
02f3: f860  CMB
02f4: c0d6  JSM $00d6,I         = 1274 Pen up/down condition
02f5: 0249  LDA $fe49
02f6: 7507  SZA $02fd
02f7: 0095  LDA $0095           = 0
02f8: 3249  STA $fe49
02f9: 0248  LDA $fe48
02fa: 7402  RZA $02fc
02fb: c0c6  JSM $00c6,I         = 08cf
02fc: 6907  JMP $0107
02fd: 0a30  LDB $fe30
02fe: 028b  LDA $fe8b
02ff: 41b9  JSM $01b9
0300: 773c  RLA $02fc
0301: 3a4d  STB $fe4d
0302: c0c9  JSM $00c9,I         = 058b
0303: 6907  JMP $0107
*
* Self test
*
0304: 0015  LDA $0015
0305: 0010  LDA $0010
0306: 088e  LDB $008e
0307: 0095  LDA $0095
0308: 4800  ISZ $0000(A)
0309: 6d08  JMP $0308
030a: 4801  ISZ $0001(B)
030b: 6d07  JMP $0307
030c: 0095  LDA $0095
030d: 3226  STA $fe26
030e: 3010  STA $0010
030f: 7503  SZA $0312
0310: 5800  DSZ $0000(A)
0311: 6d0e  JMP $030e
0312: 4801  ISZ $0001(B)
0313: 6d12  JMP $0312
0314: 0226  LDA $fe26
0315: f180  SAL 1
0316: 7402  RZA $0318
0317: 007a  LDA $007a
0318: 7582  SFC $031a
0319: 6d1d  JMP $031d
031a: 10a1  CPA $00a1
031b: 6d0c  JMP $030c
031c: 6d0d  JMP $030d
031d: 4801  ISZ $0001(B)
031e: 6d1d  JMP $031d
031f: 10a1  CPA $00a1
0320: 6d69  JMP $0369
0321: f020  TCA
0322: 20a1  ADA $00a1
0323: 3010  STA $0010
0324: 5800  DSZ $0000(A)
0325: 6d23  JMP $0323
0326: 6d69  JMP $0369
0327: 007d  LDA $007d
0328: 3010  STA $0010
0329: 5800  DSZ $0000(A)
032a: 6d28  JMP $0328
032b: 0095  LDA $0095
032c: 3226  STA $fe26
032d: 007a  LDA $007a
032e: 3222  STA $fe22
032f: 0d5e  LDB $035e
0330: 3a23  STB $fe23
0331: 3010  STA $0010
0332: 5a22  DSZ $fe22
0333: 6d31  JMP $0331
0334: 4544  JSM $0344
0335: 6d3c  JMP $033c
0336: 0a26  LDB $fe26
0337: 7d02  SZB $0339
0338: 3010  STA $0010
0339: 10a6  CPA $00a6
033a: e8db  JMP $00db,I
033b: e8da  JMP $00da,I
033c: 4a23  ISZ $fe23
033d: 6d34  JMP $0334
033e: 0226  LDA $fe26
033f: f060  CMA
0340: 3226  STA $fe26
0341: 752c  SZA $032d
0342: 0098  LDA $0098
0343: 6d2e  JMP $032e
0344: 455f  JSM $035f
0345: 1095  CPA $0095
0346: f081  RET 1
0347: 329a  STA $fe9a
0348: 0095  LDA $0095
0349: 4156  JSM $0156
034a: 455f  JSM $035f
034b: 1095  CPA $0095
034c: 6d4e  JMP $034e
034d: 6d4a  JMP $034a
034e: 0095  LDA $0095
034f: 4156  JSM $0156
0350: 055c  LDA $035c
0351: 0a9a  LDB $fe9a
0352: fd06  SBM $0358
0353: 2084  ADA $0084
0354: f980  SBL 1
0355: 10a6  CPA $00a6
0356: f980  SBL 1
0357: 6d52  JMP $0352
0358: 155d  CPA $035d
0359: 00a7  LDA $00a7
035a: 3299  STA $fe99
035b: f082  RET 2
035c: 001d  LDA $001d
035d: 0017  LDA $0017
035e: c000  JSM $0000(A),I
035f: 0013  LDA $0013
0360: 5567  AND $0367
0361: f140  SAR 1
0362: 3001  STA $0001(B)
0363: 0016  LDA $0016
0364: 5568  AND $0368
0365: 6001  IOR $0001(B)
0366: f081  RET 1
0367: 1e00  CPB $0000(A)
0368: d000  AND $0000(A),I
0369: 0015  LDA $0015
036a: 0010  LDA $0010
036b: 3010  STA $0010
036c: 0599  LDA $0399
036d: 3003  STA $0003(R)
036e: 08a8  LDB $00a8
036f: 0008  LDA $0008
0370: 2803  ADB $0003(R)
0371: a001  ADA $0001(B),I
0372: f820  TCB
0373: 2803  ADB $0003(R)
0374: f820  TCB
0375: 5803  DSZ $0003(R)
0376: 6d70  JMP $0370
0377: 50a9  AND $00a9
0378: 10a9  CPA $00a9
0379: 6d81  JMP $0381
037a: 7580  SFC $037a
037b: 0095  LDA $0095
037c: 4800  ISZ $0000(A)
037d: 6d7c  JMP $037c
037e: 7480  SFS $037e
037f: 4800  ISZ $0000(A)
0380: 6d7f  JMP $037f
0381: 3010  STA $0010
0382: 0599  LDA $0399
0383: 3003  STA $0003(R)
0384: 08a8  LDB $00a8
0385: 0008  LDA $0008
0386: 559a  AND $039a
0387: 2803  ADB $0003(R)
0388: a001  ADA $0001(B),I
0389: 559a  AND $039a
038a: f820  TCB
038b: 2803  ADB $0003(R)
038c: f820  TCB
038d: 5803  DSZ $0003(R)
038e: 6d87  JMP $0387
038f: 159a  CPA $039a
0390: 6d9b  JMP $039b
0391: 7580  SFC $0391
0392: 0095  LDA $0095
0393: 4800  ISZ $0000(A)
0394: 6d93  JMP $0393
0395: 7480  SFS $0395
0396: 4800  ISZ $0000(A)
0397: 6d96  JMP $0396
0398: 6d9b  JMP $039b
0399: 1fe0  CPB $01e0
039a: ff00  SES $039a
039b: 3010  STA $0010
039c: fe81  SEC $039d,C
039d: 05bf  LDA $03bf
039e: 3003  STA $0003(R)
039f: 089c  LDB $009c
03a0: 1dbe  CPB $03be
03a1: 6da9  JMP $03a9
03a2: 8001  LDA $0001(B),I
03a3: fe02  SEC $03a5
03a4: f060  CMA
03a5: b003  STA $0003(R),I
03a6: 4803  ISZ $0003(R)
03a7: 4801  ISZ $0001(B)
03a8: 6da0  JMP $03a0
03a9: 0dbf  LDB $03bf
03aa: 3803  STB $0003(R)
03ab: 089c  LDB $009c
03ac: 1dbe  CPB $03be
03ad: 6db8  JMP $03b8
03ae: 8003  LDA $0003(R),I
03af: fe02  SEC $03b1
03b0: f060  CMA
03b1: 9001  CPA $0001(B),I
03b2: 6db5  JMP $03b5
03b3: 8801  LDB $0001(B),I
03b4: 6dc0  JMP $03c0
03b5: 4803  ISZ $0003(R)
03b6: 4801  ISZ $0001(B)
03b7: 6dac  JMP $03ac
03b8: ffc2  SES $03ba,S
03b9: 6d9d  JMP $039d
03ba: 3010  STA $0010
03bb: 3010  STA $0010
03bc: 3010  STA $0010
03bd: e8d9  JMP $00d9,I
03be: 1800  CPB $0000(A)
03bf: 7c00  RZB $03bf
03c0: fe81  SEC $03c1,C
03c1: f681  SOC $03c2,C
03c2: f143  SAR 4
03c3: f943  SBR 4
03c4: 1001  CPA $0001(B)
03c5: 6dcb  JMP $03cb
03c6: f704  SOS $03ca
03c7: fec2  SEC $03c9,S
03c8: f6c1  SOC $03c9,S
03c9: 6dc2  JMP $03c2
03ca: ff81  SES $03cb,C
03cb: fe03  SEC $03ce
03cc: f605  SOC $03d1
03cd: 6dd0  JMP $03d0
03ce: f604  SOC $03d2
03cf: 3010  STA $0010
03d0: 3010  STA $0010
03d1: 3010  STA $0010
03d2: 7580  SFC $03d2
03d3: 0095  LDA $0095
03d4: 4800  ISZ $0000(A)
03d5: 6dd4  JMP $03d4
03d6: 7480  SFS $03d6
03d7: 4800  ISZ $0000(A)
03d8: 6dd7  JMP $03d7
03d9: 0010  LDA $0010
03da: 00b4  LDA $00b4
03db: 3010  STA $0010
03dc: 5800  DSZ $0000(A)
03dd: 6ddb  JMP $03db
03de: e8d9  JMP $00d9,I
03df: 0000  NOP
03e0: 0000  NOP
03e1: 0000  NOP
03e2: 0000  NOP
03e3: 0000  NOP
03e4: 0000  NOP
03e5: 0000  NOP
03e6: 0000  NOP
03e7: 0000  NOP
03e8: 0000  NOP
03e9: 0000  NOP
03ea: 0000  NOP
03eb: 0000  NOP
03ec: 0000  NOP
03ed: 0000  NOP
03ee: 0000  NOP
03ef: 0000  NOP
03f0: 0000  NOP
03f1: 0000  NOP
03f2: 0000  NOP
03f3: 0000  NOP
03f4: 0000  NOP
03f5: 0000  NOP
03f6: 0000  NOP
03f7: 0000  NOP
03f8: 0000  NOP
03f9: 0000  NOP
03fa: 0000  NOP
03fb: 0000  NOP
03fc: 0000  NOP
03fd: 0000  NOP
03fe: 0000  NOP
03ff: 0000  NOP
0400: 01ff  LDA $01ff
0401: 0c98  LDB $0698
0402: 0ca3  LDB $06a3
0403: 0c6d  LDB $066d
0404: 0883  LDB $0083
0405: 0ae3  LDB $fee3
0406: 0aea  LDB $feea
0407: 104e  CPA $004e
0408: 104c  CPA $004c
0409: 1066  CPA $0066
040a: 107f  CPA $007f
040b: 12a8  CPA $fea8
040c: cd38  ISZ $0738,I
*
* ISR
*
040d: 3269  STA $fe69
040e: 0015  LDA $0015           Disable INT
040f: 0224  LDA $fe24
0410: 7502  SZA $0412
0411: ee0b  JMP $040b,I
0412: 020b  LDA $fe0b           Send X/Y speeds to interpolator
0413: 3016  STA $0016
0414: 020c  LDA $fe0c
0415: 3016  STA $0016
0416: 020d  LDA $fe0d
0417: 3016  STA $0016
0418: 020e  LDA $fe0e
0419: 3016  STA $0016
041a: 0013  LDA $0013
041b: f504  SAM $041f
041c: 028b  LDA $fe8b
041d: 607b  IOR $007b           = 2
041e: 414d  JSM $014d           Turn "chart load" LED on
041f: ee20  JMP $0420,I         = 0d39
0420: 0d39  LDB $0739
*
*
*
0421: 0268  LDA $fe68
0422: 1096  CPA $0096           = 8
0423: ee00  JMP $0400,I         = 01ff
0424: 028d  LDA $fe8d
0425: 743e  RZA $0423
0426: 02f0  LDA $fef0
0427: 0813  LDB $0013
0428: f901  ABR 2
0429: 7f02  RLB $042b
042a: 6eca  JMP $04ca
042b: f481  SAP $042c,C
042c: 32f0  STA $fef0
042d: fd36  SBM $0423
042e: f900  ABR 1
042f: 7e03  SLB $0432
0430: f900  ABR 1
0431: 7ff2  RLB $0423,S
0432: 463a  JSM $043a
0433: 02f0  LDA $fef0
0434: 5109  AND $0109
0435: 0813  LDB $0013
0436: fc02  SBP $0438
0437: 60b0  IOR $00b0
0438: 32f0  STA $fef0
0439: 6907  JMP $0107
043a: 5086  AND $0086
043b: 7e02  SLB $043d
043c: 6096  IOR $0096
043d: 32f0  STA $fef0
043e: 4159  JSM $0159
043f: 0206  LDA $fe06
0440: 327e  STA $fe7e
0441: 0207  LDA $fe07
0442: 327f  STA $fe7f
0443: 028b  LDA $fe8b
0444: 3280  STA $fe80
0445: 00e0  LDA $00e0
0446: c601  JSM $0401,I
0447: 4159  JSM $0159
0448: 4156  JSM $0156
0449: 02f0  LDA $fef0
044a: 607b  IOR $007b
044b: 46ad  JSM $04ad
044c: 02f0  LDA $fef0
044d: 60ab  IOR $00ab
044e: 46ad  JSM $04ad
044f: 02f0  LDA $fef0
0450: 508c  AND $008c
0451: 46ad  JSM $04ad
0452: 06c9  LDA $04c9
0453: 32ed  STA $feed
0454: 02f0  LDA $fef0
0455: 760f  SLA $0464
0456: 06c0  LDA $04c0
0457: 46a6  JSM $04a6
0458: 0082  LDA $0082
0459: 32ed  STA $feed
045a: 06c8  LDA $04c8
045b: f020  TCA
045c: 46a6  JSM $04a6
045d: 06c9  LDA $04c9
045e: 32ed  STA $feed
045f: 06c8  LDA $04c8
0460: 46a6  JSM $04a6
0461: 46b2  JSM $04b2
0462: 26b9  ADA $04b9
0463: 6e6a  JMP $046a
0464: 46b2  JSM $04b2
0465: 26be  ADA $04be
0466: 8000  LDA $0000(A),I
0467: 46a6  JSM $04a6
0468: 46b2  JSM $04b2
0469: 26c3  ADA $04c3
046a: 8000  LDA $0000(A),I
046b: 7502  SZA $046d
046c: 46a6  JSM $04a6
046d: 02f0  LDA $fef0
046e: 607b  IOR $007b
046f: 46ad  JSM $04ad
0470: 02f0  LDA $fef0
0471: 5091  AND $0091
0472: 46ad  JSM $04ad
0473: 02f0  LDA $fef0
0474: 508c  AND $008c
0475: 46ad  JSM $04ad
0476: 324b  STA $fe4b
0477: 00e5  LDA $00e5
0478: 32ed  STA $feed
0479: 007a  LDA $007a
047a: 324d  STA $fe4d
047b: 00bd  LDA $00bd
047c: 324c  STA $fe4c
047d: c0c8  JSM $00c8,I
047e: 0095  LDA $0095
047f: 324c  STA $fe4c
0480: 00be  LDA $00be
0481: 324b  STA $fe4b
0482: c0c8  JSM $00c8,I
0483: 0017  LDA $0017
0484: f180  SAL 1
0485: f43e  SAP $0483
0486: c604  JSM $0404,I
0487: 324b  STA $fe4b
0488: c0c8  JSM $00c8,I
0489: 007a  LDA $007a
048a: 324b  STA $fe4b
048b: c0c8  JSM $00c8,I
048c: 0017  LDA $0017
048d: f180  SAL 1
048e: f43d  SAP $048b
048f: 4159  JSM $0159
0490: 324b  STA $fe4b
0491: 060c  LDA $040c
0492: 324c  STA $fe4c
0493: c0c8  JSM $00c8,I
0494: 0017  LDA $0017
0495: f43f  SAP $0494
0496: c604  JSM $0404,I
0497: f020  TCA
0498: 324c  STA $fe4c
0499: c0c8  JSM $00c8,I
049a: 0084  LDA $0084
049b: 324c  STA $fe4c
049c: c0c8  JSM $00c8,I
049d: 0017  LDA $0017
049e: f43e  SAP $049c
049f: 4159  JSM $0159
04a0: 0082  LDA $0082
04a1: 32ed  STA $feed
04a2: c602  JSM $0402,I
04a3: 00e0  LDA $00e0
04a4: 3206  STA $fe06
04a5: ee03  JMP $0403,I
04a6: 0895  LDB $0095
04a7: 3a4d  STB $fe4d
04a8: 3a4b  STB $fe4b
04a9: 324c  STA $fe4c
04aa: c0c8  JSM $00c8,I
04ab: 4159  JSM $0159
04ac: 6956  JMP $0156
*
* Set W23 & wait
*
04ad: 32f0  STA $fef0
04ae: f060  CMA
04af: 3013  STA $0013
04b0: 0095  LDA $0095           = 0
04b1: 6956  JMP $0156
04b2: 02f0  LDA $fef0
04b3: 5096  AND $0096
04b4: f101  AAR 2
04b5: 0813  LDB $0013
04b6: 7e02  SLB $04b8
04b7: 607a  IOR $007a
04b8: f081  RET 1
04b9: 04ba  LDA $06ba
04ba: 46d9  JSM $04d9
04bb: 4ac9  ISZ $fec9
04bc: 05e7  LDA $07e7
04bd: 07df  LDA $05df
04be: 04bf  LDA $06bf
04bf: 3b88  STB $ff88
04c0: 3b88  STB $ff88
04c1: 416f  JSM $016f
04c2: 4368  JSM $ff68
04c3: 04c4  LDA $06c4
04c4: 46d9  JSM $04d9
04c5: 4ac9  ISZ $fec9
04c6: 0000  NOP
04c7: 0000  NOP
04c8: 1964  CPB $0164
04c9: 0046  LDA $0046
04ca: 088f  LDB $008f
04cb: 3a8d  STB $fe8d
04cc: f5cf  SAM $04db,S
04cd: 087a  LDB $007a
04ce: 41b9  JSM $01b9
04cf: 6ed8  JMP $04d8
04d0: 022a  LDA $fe2a
04d1: 7405  RZA $04d6
04d2: 4111  JSM $0111
04d3: 02f0  LDA $fef0
04d4: 7681  SLA $04d5,C
04d5: 6ed8  JMP $04d8
04d6: 02f0  LDA $fef0
04d7: 77c1  RLA $04d8,S
04d8: 32f0  STA $fef0
04d9: f060  CMA
04da: 3013  STA $0013
04db: 6907  JMP $0107
04dc: 4128  JSM $0128
04dd: 6ee6  JMP $04e6
04de: 4128  JSM $0128
04df: 7fc1  RLB $04e0,S
04e0: 6ee7  JMP $04e7
04e1: 022a  LDA $fe2a
04e2: 7404  RZA $04e6
04e3: 007a  LDA $007a
04e4: 4111  JSM $0111
04e5: f509  SAM $04ee
04e6: 7e81  SLB $04e7,C
04e7: 46ef  JSM $04ef
04e8: 02f0  LDA $fef0
04e9: 463a  JSM $043a
04ea: 46ef  JSM $04ef
04eb: 02f0  LDA $fef0
04ec: 5109  AND $0109
04ed: 32f0  STA $fef0
04ee: 6907  JMP $0107
04ef: 0013  LDA $0013
04f0: f406  SAP $04f6
04f1: 02f0  LDA $fef0
04f2: 60b0  IOR $00b0
04f3: 32f0  STA $fef0
04f4: 0096  LDA $0096
04f5: 6935  JMP $0135
04f6: f081  RET 1
*
* Normal start
*
04f7: 00c0  LDA $00c0           = 7e00
04f8: 08c2  LDB $00c2           = ff05
04f9: 288d  ADB $008d           = ffe8
04fa: 3a00  STB $fe00
04fb: 0895  LDB $0095           = 0
04fc: 3817  STB $0017
04fd: 207a  ADA $007a           = 1
04fe: b800  STB $0000(A),I      Clear 7e00..7f13
04ff: 4a00  ISZ $fe00
0500: 6efd  JMP $04fd
0501: 007a  LDA $007a           = 1
0502: 32fd  STA $fefd
0503: 00c1  LDA $00c1           = 7c00
0504: 0811  LDB $0011
0505: f980  SBL 1
0506: fd02  SBM $0508           Confidence test?
0507: 20ba  ADA $00ba           = 1ff
0508: 3301  STA $ff01           Circ. buffer start
0509: 32ff  STA $feff           Clear circ. buffer PTRs
050a: 32fe  STA $fefe
050b: 6f1a  JMP $051a
*
* IN cmd
*
050c: 4128  JSM $0128
050d: 4159  JSM $0159
050e: 4156  JSM $0156
050f: 46ad  JSM $04ad
0510: 0015  LDA $0015           Disable ints
0511: 00c0  LDA $00c0           = 7e00
0512: 08c2  LDB $00c2           = ff05
0513: 3a00  STB $fe00
0514: 0895  LDB $0095           = 0
0515: 3817  STB $0017           Turn LEDs off, raise pen
0516: 207a  ADA $007a           = 1
0517: b800  STB $0000(A),I      Clear [fe01..fefb]
0518: 4a00  ISZ $fe00
0519: 6f16  JMP $0516
051a: 00c4  LDA $00c4           = 7f02
051b: 3003  STA $0003(R)        Purge stack
051c: 0010  LDA $0010           Clear Diag. LEDs
051d: 0083  LDA $0083           = 0083
051e: 208c  ADA $008c           = fffd
051f: 320f  STA $fe0f
0520: 0082  LDA $0082           = 005a
0521: 326d  STA $fe6d           Initialize pen speeds to 36 cm/s
0522: 326e  STA $fe6e
0523: 326f  STA $fe6f
0524: 3270  STA $fe70
0525: 3271  STA $fe71
0526: 3272  STA $fe72
0527: 3273  STA $fe73
0528: 3274  STA $fe74
0529: 32ed  STA $feed
052a: 0734  LDA $0534           = 4001
052b: 46ad  JSM $04ad
052c: 443e  JSM $063e           Detect C or T variant
052d: 6f2f  JMP $052f
052e: ef32  JMP $0532,I         = 080a (C Variant)
052f: 3204  STA $fe04
0530: 3a05  STB $fe05
0531: ef33  JMP $0533,I
0532: 080a  LDB $000a
0533: 0812  LDB $0012
0534: 4001  JSM $0001(B)
*
* OO cmd
*
0535: 4128  JSM $0128
0536: 02f0  LDA $fef0
0537: f1cc  RAR 13
0538: 507b  AND $007b           = 2
0539: 0813  LDB $0013
053a: fd02  SBM $053c
053b: 607a  IOR $007a
053c: c607  JSM $0407,I
053d: 007a  LDA $007a           = 1
053e: c607  JSM $0407,I
053f: 0091  LDA $0091           = fffb
0540: 32fa  STA $fefa
0541: 0095  LDA $0095           = 0
0542: c607  JSM $0407,I
0543: 4afa  ISZ $fefa
0544: 6f41  JMP $0541
0545: 0095  LDA $0095           = 0
0546: 6f6e  JMP $056e
*
* OF cmd
*
0547: 4128  JSM $0128
0548: 074c  LDA $054c           = 28/40
0549: c607  JSM $0407,I
054a: 074c  LDA $054c           = 28/40
054b: 6f6e  JMP $056e
054c: 0028  LDA $0028
*
* OI cmd
*
054d: 4128  JSM $0128
054e: 075f  LDA $055f
054f: c60a  JSM $040a,I
0550: 0760  LDA $0560
0551: c60a  JSM $040a,I
0552: 0761  LDA $0561
0553: c60a  JSM $040a,I
0554: 0762  LDA $0562
0555: c60a  JSM $040a,I
0556: 0017  LDA $0017
0557: f182  SAL 3
0558: f503  SAM $055b
0559: 0763  LDA $0563
055a: 6f5c  JMP $055c
055b: 0764  LDA $0564
055c: c60a  JSM $040a,I
055d: c609  JSM $0409,I
055e: 6907  JMP $0107
055f: 0039  LDA $0039           '9'
0560: 0038  LDA $0038           '8'
0561: 0037  LDA $0037           '7'
0562: 0032  LDA $0032           '2'
0563: 0043  LDA $0043           'C'
0564: 0054  LDA $0054           'T'
*
* OA cmd
*
0565: 4128  JSM $0128
0566: 4159  JSM $0159
0567: 0206  LDA $fe06
0568: c607  JSM $0407,I
0569: 0207  LDA $fe07
056a: c607  JSM $0407,I
056b: 024d  LDA $fe4d
056c: 207a  ADA $007a
056d: 507a  AND $007a
056e: c608  JSM $0408,I
056f: 6907  JMP $0107
*
* Decode & exec cmd in A
*
0570: 0f77  LDB $0577
0571: 9001  CPA $0001(B),I
0572: ee06  JMP $0406,I         = 0aea
0573: 287b  ADB $007b           = 2
0574: 1f8a  CPB $058a           = 058a
0575: ee05  JMP $0405,I         = 0ae3
0576: 6f71  JMP $0571
0577: 0578  LDA $0778
0578: 4146  JSM $0146           "AF"
0579: 04dc  LDA $06dc
057a: 4148  JSM $0148           "AH"
057b: 04de  LDA $06de
057c: 5047  AND $0047           "PG"
057d: 04e1  LDA $06e1
057e: 4543  JSM $0743           "EC"
057f: 04d0  LDA $06d0
0580: 4f46  ISZ $0546           "OF"
0581: 0547  LDA $0747
0582: 4f49  ISZ $0549           "OI"
0583: 054d  LDA $074d
0584: 4f4f  ISZ $054f           "OO"
0585: 0535  LDA $0735
0586: 4f41  ISZ $0541           "OA
0587: 0565  LDA $0765
0588: 5343  AND $ff43           "SC"
0589: 05df  LDA $07df
058a: 058a  LDA $078a
*
* Set pen according to (fe4d), do not move
*
058b: c794  JSM $0594,I         = 0cad
058c: 6f8e  JMP $058e
*
* Start motion
*
058d: c795  JSM $0595,I         = 0cbb
058e: 028b  LDA $fe8b
058f: 507a  AND $007a           = 1
0590: f1c1  RAR 2
0591: 62f0  IOR $fef0           Set paper check bit
0592: 32f0  STA $fef0
0593: f081  RET 1
0594: 0cad  LDB $06ad
0595: 0cbb  LDB $06bb
*
* Return to main loop
*
0596: 02f8  LDA $fef8
0597: 7402  RZA $0599           Scaling enabled
0598: 6fd9  JMP $05d9
0599: 02f9  LDA $fef9
059a: 7402  RZA $059c           Inverse scaling requested
059b: 6fd9  JMP $05d9
059c: f404  SAP $05a0
059d: 022a  LDA $fe2a
059e: 7402  RZA $05a0           Parameters ended
059f: 6fd9  JMP $05d9
*
* Scale back from (fe3f):(fe40) to (fef2):(fef3)
* Get here if (fef8)!=0 && (fef9)!=0 && ((fef9)>=0 || (fe2a)!=0)
*
05a0: 4159  JSM $0159
05a1: 32f9  STA $fef9           = 0 Clear inverse scaling request
05a2: f681  SOC $05a3,C
05a3: 0204  LDA $fe04
05a4: 0a02  LDB $fe02
05a5: f820  TCB
05a6: 2001  ADA $0001(B)
05a7: f509  SAM $05b0           P1.x > P2.x
05a8: 32cb  STA $fecb           P2.x - P1.x
05a9: 2a3f  ADB $fe3f           B = pen x - P1.x
05aa: 02f4  LDA $fef4
05ab: f020  TCA
05ac: 22f6  ADA $fef6           A = Scale Xmax - Scale Xmin
05ad: 4507  JSM $0707
05ae: 22f4  ADA $fef4           Scale Xmin
05af: 6fba  JMP $05ba
05b0: f020  TCA
05b1: 32cb  STA $fecb           P1.x - P2.x
05b2: 0a04  LDB $fe04
05b3: f820  TCB
05b4: 2a3f  ADB $fe3f           B = pen x - P2.x
05b5: 02f6  LDA $fef6
05b6: f020  TCA
05b7: 22f4  ADA $fef4           A = Scale Xmin - Scale Xmax
05b8: 4507  JSM $0707
05b9: 22f6  ADA $fef6           Scale Xmax
05ba: 44ff  JSM $06ff           Check for overflow
05bb: 6fdd  JMP $05dd
05bc: 3227  STA $fe27
05bd: 0205  LDA $fe05
05be: 0a03  LDB $fe03
05bf: f820  TCB
05c0: 2001  ADA $0001(B)
05c1: f509  SAM $05ca           P2.y < P1.y
05c2: 32cb  STA $fecb           P2.y - P1.y
05c3: 2a40  ADB $fe40           B = pen y - P1.y
05c4: 02f5  LDA $fef5
05c5: f020  TCA
05c6: 22f7  ADA $fef7           A = Scale Ymax - Scale Ymin
05c7: 4507  JSM $0707
05c8: 22f5  ADA $fef5           Scale Ymin
05c9: 6fd4  JMP $05d4
05ca: f020  TCA
05cb: 32cb  STA $fecb           P1.y - P2.y
05cc: 0a05  LDB $fe05
05cd: f820  TCB
05ce: 2a40  ADB $fe40           B = pen y - P2.y
05cf: 02f7  LDA $fef7
05d0: f020  TCA
05d1: 22f5  ADA $fef5           A = Scale Ymin - Scale Ymax
05d2: 4507  JSM $0707
05d3: 22f7  ADA $fef7           Scale Ymax
05d4: 44ff  JSM $06ff
05d5: 6fdd  JMP $05dd
05d6: 32f3  STA $fef3
05d7: 0227  LDA $fe27
05d8: 32f2  STA $fef2
*
* Inner main loop
*
05d9: c0df  JSM $00df,I         = 0b6a
05da: c10e  JSM $010e,I         = 1152
05db: c110  JSM $0110,I         = 0fd9
05dc: e90f  JMP $010f,I         = 0421
*
* Set lost state, return to main loop
*
05dd: c4f5  JSM $06f5,I         = 08ad
05de: 6fd9  JMP $05d9
*
* SC cmd
*
05df: 022a  LDA $fe2a
05e0: 7414  RZA $05f4
05e1: 411d  JSM $011d           Get A=Xmin,B=Xmax
05e2: 3a35  STB $fe35
05e3: 3234  STA $fe34
05e4: 4400  JSM $0600           Check Xmin/Xmax
05e5: 0095  LDA $0095
05e6: 4116  JSM $0116           Get A=Ymin,B=Ymax
05e7: 4400  JSM $0600           Check Ymin/Ymax
05e8: 0234  LDA $fe34
05e9: 0a35  LDB $fe35
05ea: 32f4  STA $fef4
05eb: 3af6  STB $fef6
05ec: 022c  LDA $fe2c
05ed: 0a2d  LDB $fe2d
05ee: 32f5  STA $fef5
05ef: 3af7  STB $fef7
05f0: 007a  LDA $007a           = 1
05f1: 32f8  STA $fef8           Enable scaling
05f2: 32f9  STA $fef9           Request inverse scaling
05f3: 6ff9  JMP $05f9
05f4: 02f8  LDA $fef8           Disable scaling
05f5: 7402  RZA $05f7
05f6: 6907  JMP $0107           Already disabled
05f7: 0095  LDA $0095
05f8: 32f8  STA $fef8
05f9: 4159  JSM $0159
05fa: 0206  LDA $fe06
05fb: 322e  STA $fe2e
05fc: 0207  LDA $fe07
05fd: 322f  STA $fe2f
05fe: efff  JMP $05ff,I         = 02b4
05ff: 02b4  LDA $feb4
*
* Check X/Ymin/max
*
0600: f502  SAM $0602
0601: f020  TCA
0602: 20be  ADA $00be           = 3fff
0603: f50b  SAM $060e           |A| must be <= 0x3fff
0604: fd02  SBM $0606
0605: f820  TCB
0606: 28be  ADB $00be
0607: fd07  SBM $060e           |B| must be <= 0x3fff
0608: 022c  LDA $fe2c
0609: 0a2d  LDB $fe2d
060a: 2884  ADB $0084           = ffff
060b: f020  TCA
060c: 2001  ADA $0001(B)
060d: f402  SAP $060f           must be B - 1 >= A
060e: 692f  JMP $012f
060f: f081  RET 1
*
* IP cmd
*
0610: 022a  LDA $fe2a
0611: 741c  RZA $062d           No parameters
0612: 411d  JSM $011d           Get P1x/P1y
0613: 3a35  STB $fe35
0614: 3234  STA $fe34
0615: 08e0  LDB $00e0           = 3e80/16000
0616: 4427  JSM $0627           must be 0 <= P1x <= 16000
0617: 0095  LDA $0095
0618: 4116  JSM $0116           Get P2x/P2y
0619: 08e0  LDB $00e0
061a: 4427  JSM $0627           must be 0 <= P2x <= 16000
061b: 022d  LDA $fe2d
061c: 08e1  LDB $00e1           = 2c88/11400
061d: 4427  JSM $0627           must be 0 <= P2y <= 11400
061e: 0235  LDA $fe35
061f: 4427  JSM $0627           must be 0 <= P1y <= 11400
0620: 0234  LDA $fe34
0621: 0a35  LDB $fe35
0622: 3202  STA $fe02
0623: 3a03  STB $fe03
0624: 022c  LDA $fe2c
0625: 0a2d  LDB $fe2d
0626: 6c35  JMP $0635
0627: f504  SAM $062b
0628: f020  TCA
0629: 2001  ADA $0001(B)
062a: f402  SAP $062c
062b: 692f  JMP $012f
062c: f081  RET 1
062d: 443e  JSM $063e
062e: 6c35  JMP $0635
062f: 00e6  LDA $00e6           = 0208/520 9872C variant
0630: 3202  STA $fe02           P1.x
0631: 00e7  LDA $00e7           = 017c/380
0632: 3203  STA $fe03           P1.y
0633: 00e8  LDA $00e8           = 3d68/15720
0634: 08e9  LDB $00e9           = 288c/10380
0635: 3204  STA $fe04           P2.x
0636: 3a05  STB $fe05           P2.y
0637: 087b  LDB $007b           = 2
0638: c0d6  JSM $00d6,I         = 1274 P1/P2 changed
0639: c0ca  JSM $00ca,I         = 09f5
063a: 02f8  LDA $fef8
063b: 7502  SZA $063d           No scaling
063c: 6ff2  JMP $05f2
063d: 6907  JMP $0107
063e: 0013  LDA $0013
063f: f402  SAP $0641
0640: f082  RET 2
0641: 0c4e  LDB $064e
0642: 7602  SLA $0644
0643: 0c53  LDB $0653
0644: 8001  LDA $0001(B),I
0645: 3202  STA $fe02
0646: 287a  ADB $007a
0647: 8001  LDA $0001(B),I
0648: 3203  STA $fe03
0649: 287a  ADB $007a
064a: 8001  LDA $0001(B),I
064b: 287a  ADB $007a
064c: 8801  LDB $0001(B),I
064d: f081  RET 1
064e: 064f  LDA $044f
064f: 0208  LDA $fe08
0650: 0474  LDA $0674
0651: 3d68  STB $0768
0652: 2b84  ADB $ff84
0653: 0654  LDA $0454
0654: 0208  LDA $fe08
0655: 03fc  LDA $fffc
0656: 3d90  STB $0790
0657: 2bac  ADB $ffac
0658: c47b  JSM $067b,I
0659: 6c61  JMP $0661
065a: 3202  STA $fe02
065b: 3a03  STB $fe03
065c: 02f8  LDA $fef8
065d: 7509  SZA $0666
065e: c0ca  JSM $00ca,I
065f: 087b  LDB $007b           = 2
0660: c0d6  JSM $00d6,I         P1/P2 changed
0661: 02f4  LDA $fef4
0662: 0af5  LDB $fef5
0663: 4476  JSM $0676
0664: ec65  JMP $0665,I
0665: 02ab  LDA $feab
0666: ec67  JMP $0667,I
0667: 029f  LDA $fe9f
0668: c47b  JSM $067b,I
0669: 6c71  JMP $0671
066a: 3204  STA $fe04
066b: 3a05  STB $fe05
066c: 02f8  LDA $fef8
066d: 7539  SZA $0666
066e: c0ca  JSM $00ca,I
066f: 087b  LDB $007b           = 2
0670: c0d6  JSM $00d6,I         P1/P2 changed
0671: 02f6  LDA $fef6
0672: 0af7  LDB $fef7
0673: 4476  JSM $0676
0674: ec75  JMP $0675,I
0675: 02b0  LDA $feb0
0676: 32f2  STA $fef2
0677: 3af3  STB $fef3
0678: 0095  LDA $0095           = 0
0679: 32f9  STA $fef9
067a: f081  RET 1
067b: 02c1  LDA $fec1
*
* PA cmd
*
067c: 0095  LDA $0095
067d: 321a  STA $fe1a           = 0 for absolute mode, 1 for relative mode
067e: 6ced  JMP $06ed
*
* PR cmd
*
067f: 007a  LDA $007a           = 1
0680: 0a48  LDB $fe48
0681: 7d3c  SZB $067d
0682: 329d  STA $fe9d           If in lost state, skip rest of cmd
0683: 6907  JMP $0107
0684: 007a  LDA $007a           = 1
0685: 3247  STA $fe47           Tolerate overflow in param values
0686: 0095  LDA $0095           = 0
0687: 3219  STA $fe19
0688: 3233  STA $fe33
0689: 411d  JSM $011d           Get 2 coords.
068a: 0247  LDA $fe47
068b: f402  SAP $068d           No overflow in coords
068c: 6cf3  JMP $06f3
068d: f681  SOC $068e,C
068e: 02f8  LDA $fef8
068f: 7507  SZA $0696           Scaling mode disabled
0690: 022c  LDA $fe2c           Scaling mode enabled
0691: 44ff  JSM $06ff
0692: 6cf3  JMP $06f3           X coord is "faraway"
0693: 022d  LDA $fe2d
0694: 44ff  JSM $06ff
0695: 6cf3  JMP $06f3           Y coord is "faraway"
0696: 021a  LDA $fe1a
0697: 7402  RZA $0699
0698: 6cb0  JMP $06b0
0699: 02f8  LDA $fef8           Relative mode
069a: 750c  SZA $06a6
069b: 022c  LDA $fe2c           Relative & scaled
069c: 22f2  ADA $fef2
069d: 44ff  JSM $06ff           A = commanded X + delta X
069e: 6cf3  JMP $06f3
069f: 322c  STA $fe2c
06a0: 022d  LDA $fe2d
06a1: 22f3  ADA $fef3           A = commanded Y + delta Y
06a2: 44ff  JSM $06ff
06a3: 6cf3  JMP $06f3
06a4: 322d  STA $fe2d
06a5: 6cb3  JMP $06b3
06a6: 023f  LDA $fe3f           Relative & unscaled
06a7: 222c  ADA $fe2c
06a8: 322c  STA $fe2c
06a9: f602  SOC $06ab
06aa: 6cf3  JMP $06f3
06ab: 0240  LDA $fe40
06ac: 222d  ADA $fe2d
06ad: 322d  STA $fe2d
06ae: f602  SOC $06b0
06af: 6cf3  JMP $06f3
06b0: 02f8  LDA $fef8           Absolute mode
06b1: 7402  RZA $06b3
06b2: 6ce6  JMP $06e6
06b3: 0af4  LDB $fef4           Absolute mode & scaling
06b4: f820  TCB
06b5: 2af6  ADB $fef6
06b6: 3acb  STB $fecb           = Scaling Xmax - Xmin
06b7: 0202  LDA $fe02
06b8: f020  TCA
06b9: 2204  ADA $fe04           A = P2.x - P1.x
06ba: f507  SAM $06c1           P2.x < P1.x
06bb: 0af4  LDB $fef4
06bc: f820  TCB
06bd: 2a2c  ADB $fe2c           B = X coord - scaling Xmin
06be: 4507  JSM $0707           Scale X
06bf: 2202  ADA $fe02           X += P1.x
06c0: 6cc6  JMP $06c6
06c1: 0af6  LDB $fef6
06c2: f820  TCB
06c3: 2a2c  ADB $fe2c           B = X coord - scaling Xmax
06c4: 4507  JSM $0707           Scale X
06c5: 2204  ADA $fe04           X += P2.x
06c6: 44ff  JSM $06ff
06c7: 6cf3  JMP $06f3           X is "faraway"
06c8: 3227  STA $fe27
06c9: 0af5  LDB $fef5
06ca: f820  TCB
06cb: 2af7  ADB $fef7
06cc: 3acb  STB $fecb           = Scaling Ymax - Ymin
06cd: 0203  LDA $fe03
06ce: f020  TCA
06cf: 2205  ADA $fe05           A = P2.y - P1.y
06d0: f507  SAM $06d7           P2.y < P1.y
06d1: 0af5  LDB $fef5
06d2: f820  TCB
06d3: 2a2d  ADB $fe2d           B = Y coord - scaling Ymin
06d4: 4507  JSM $0707           Scale Y
06d5: 2203  ADA $fe03           Y += P1.y
06d6: 6cdc  JMP $06dc
06d7: 0af7  LDB $fef7
06d8: f820  TCB
06d9: 2a2d  ADB $fe2d           B = Y coord - scaling Ymax
06da: 4507  JSM $0707           Scale Y
06db: 2205  ADA $fe05           Y += P2.y
06dc: 44ff  JSM $06ff
06dd: 6cf3  JMP $06f3           Y is "faraway"
06de: 322f  STA $fe2f
06df: 0227  LDA $fe27
06e0: 322e  STA $fe2e           (fe2e,fe2f) is point to move to (PU)
06e1: 022c  LDA $fe2c
06e2: 32f2  STA $fef2
06e3: 022d  LDA $fe2d
06e4: 32f3  STA $fef3           Save commanded point in (fef2,fef3) (UU)
06e5: 6cea  JMP $06ea
06e6: 022c  LDA $fe2c
06e7: 322e  STA $fe2e
06e8: 022d  LDA $fe2d
06e9: 322f  STA $fe2f
06ea: 0248  LDA $fe48
06eb: 740b  RZA $06f6           Skip if lost
06ec: c0d3  JSM $00d3,I         = 071a Draw segment with optional pattern
06ed: 022a  LDA $fe2a
06ee: 7402  RZA $06f0
06ef: 6c84  JMP $0684
06f0: 0095  LDA $0095           No more params
06f1: 3247  STA $fe47
06f2: 6907  JMP $0107
06f3: c4f5  JSM $06f5,I         = 08ad
06f4: 6ced  JMP $06ed
06f5: 08ad  LDB $00ad
06f6: 0095  LDA $0095           = 0
06f7: 3248  STA $fe48
06f8: 007a  LDA $007a           = 1
06f9: 3232  STA $fe32
06fa: 0086  LDA $0086           = fff7
06fb: 528b  AND $fe8b
06fc: 414d  JSM $014d           Turn "out of limit" LED off
06fd: c0c5  JSM $00c5,I         = 08cb
06fe: 6ced  JMP $06ed
*
* Check |A| < 16384
* RET 1 if |A| >= 16384 or overflow set
* RET 2 if |A| < 16384 and no overflow set
*
06ff: f706  SOS $0705
0700: 3001  STA $0001(B)
0701: fd02  SBM $0703
0702: f820  TCB
0703: 28be  ADB $00be           = 3fff
0704: fc02  SBP $0706
0705: f081  RET 1
0706: f082  RET 2
*
* Scale one coord
* IN: A         P2.x/y - P1.x/y
*     B         X/Y - scaling X/Ymin
*     fecb      Scaling X/Ymax - X/Ymin
* OUT: A        Scaled coord, i.e round((A * B) / (fecb))
*
0707: 4193  JSM $0193
0708: 4160  JSM $0160
0709: f710  SOS $0719
070a: 7d0f  SZB $0719
070b: 321d  STA $fe1d
070c: 0001  LDA $0001(B)
070d: 2001  ADA $0001(B)
070e: f785  SOS $0713,C
070f: f502  SAM $0711
0710: f020  TCA
0711: 22cb  ADA $fecb
0712: f406  SAP $0718
0713: 007a  LDA $007a
0714: fc02  SBP $0716
0715: f020  TCA
0716: 221d  ADA $fe1d
0717: f081  RET 1
0718: 021d  LDA $fe1d
0719: f081  RET 1
*
* Draw a line with optional pattern
*
071a: 02b8  LDA $feb8
071b: 7603  SLA $071e           No pattern
071c: 0230  LDA $fe30
071d: 7603  SLA $0720           Pattern enabled & pen down
071e: c0d1  JSM $00d1,I         = 1484
071f: f081  RET 1
0720: 02bf  LDA $febf
0721: 740b  RZA $072c           Line type != 0
0722: 007a  LDA $007a           = 1
0723: 3232  STA $fe32
0724: c0d2  JSM $00d2,I         = 1486 Move to dest point with pen up
0725: 0095  LDA $0095           = 0
0726: 3232  STA $fe32
0727: c0c7  JSM $00c7,I         = 08d1 Lower pen
0728: 007a  LDA $007a           = 1
0729: 3232  STA $fe32
072a: c0c7  JSM $00c7,I         = 08d1 Raise pen
072b: f081  RET 1
*
* Draw a patterned line, i.e. an alternating sequence of visible & invisible segments
* src is the starting point (fe3f):(fe40), this point is moved along the line towards destination when segments
* are drawn
* dest is the destination point (fe2e):(fe2f) (saved in (fec2):(fec3))
*
*             + dest
*            /
*           /
*          /
*         /
*        + pdest
*       /
*      /
*     + current
*    /
*   /
*  /
* + src
*
072c: 022e  LDA $fe2e
072d: 32c2  STA $fec2
072e: 022f  LDA $fe2f
072f: 32c3  STA $fec3           Save destination point
0730: c0ce  JSM $00ce,I         = 093c
0731: 45da  JSM $07da
0732: 0095  LDA $0095           = 0
0733: 32f1  STA $fef1
0734: 0242  LDA $fe42
0735: 45e1  JSM $07e1
0736: 0241  LDA $fe41
0737: 45e1  JSM $07e1
0738: 02f1  LDA $fef1
0739: f504  SAM $073d           One of |(fe41)| or |(fe42)| is > 8000
073a: 45c8  JSM $07c8
073b: 45da  JSM $07da
073c: 6d40  JMP $0740
073d: 0242  LDA $fe42
073e: f100  AAR 1
073f: f900  ABR 1
0740: 7403  RZA $0743
0741: 7c02  RZB $0743
0742: 6d1e  JMP $071e           No movement, both delta.x and delta.y are 0
0743: 02c4  LDA $fec4
0744: 7506  SZA $074a           No more space in this segment
0745: 0af1  LDB $fef1
0746: fc14  SBP $075a
0747: f101  AAR 2
0748: 32c4  STA $fec4
0749: 7411  RZA $075a
074a: 08bf  LDB $00bf           = 0190/400
074b: 02f1  LDA $fef1
074c: f502  SAM $074e
074d: 08bc  LDB $00bc           = 0064/100
074e: 3acb  STB $fecb
074f: 02c0  LDA $fec0           Advance to next segment of pattern
0750: 207a  ADA $007a           = 1
0751: 12bf  CPA $febf
0752: 0095  LDA $0095           = 0 Return to 1st segment
0753: 32c0  STA $fec0
0754: 22c1  ADA $fec1
0755: 8000  LDA $0000(A),I      Lenght of current segment in %
0756: 0aba  LDB $feba
0757: 4193  JSM $0193
0758: 4160  JSM $0160
0759: 32c4  STA $fec4           Length of current segment in PU (length in % / 100 * (feba))
075a: 02c0  LDA $fec0
075b: 507a  AND $007a           = 1
075c: 3232  STA $fe32           Set pen up/down
075d: 02c2  LDA $fec2
075e: 322e  STA $fe2e
075f: 02c3  LDA $fec3
0760: 322f  STA $fe2f           Set destination point
0761: 02f1  LDA $fef1
0762: f505  SAM $0767
0763: 45c8  JSM $07c8
0764: 0242  LDA $fe42           delta.x
0765: 0a41  LDB $fe41           -delta.y
0766: 6d6c  JMP $076c
0767: c0ce  JSM $00ce,I         = 093c
0768: 0242  LDA $fe42
0769: 0a41  LDB $fe41
076a: f100  AAR 1
076b: f900  ABR 1
076c: 41bb  JSM $01bb           Compute length of segment to draw (from current point to destination point)
076d: 0ac8  LDB $fec8           sqrt(delta.x^2+delta.y^2)
076e: 3ac5  STB $fec5
076f: f820  TCB
0770: 2ac4  ADB $fec4
0771: fd0d  SBM $077e           segment is longer than current pattern segment
0772: 02f1  LDA $fef1
0773: f404  SAP $0777
0774: 00ab  LDA $00ab           = 4
0775: 4193  JSM $0193
0776: 3001  STA $0001(B)
0777: 3ac4  STB $fec4           Update remaining length of current pattern segment
0778: 02c2  LDA $fec2
0779: 322e  STA $fe2e
077a: 02c3  LDA $fec3
077b: 322f  STA $fe2f           Set destination point
077c: c0d2  JSM $00d2,I         = 1486 Draw last pattern segment
077d: f081  RET 1
077e: 02be  LDA $febe
077f: 3244  STA $fe44
0780: 02bd  LDA $febd
0781: 3245  STA $fe45
0782: 02bc  LDA $febc
0783: 3242  STA $fe42
0784: f402  SAP $0786
0785: f020  TCA
0786: 0abb  LDB $febb           A = |dest.x - src.x|
0787: 3a41  STB $fe41
0788: fd02  SBM $078a
0789: f820  TCB
078a: 2001  ADA $0001(B)        A = |dest.x - src.x| - |dest.y - src.y|
078b: 0af1  LDB $fef1
078c: f511  SAM $079d           |delta.x| < |delta.y|
078d: 023f  LDA $fe3f           current.x
078e: fd07  SBM $0795
078f: 0ac2  LDB $fec2           dest.x
0790: 45ae  JSM $07ae
0791: 223f  ADA $fe3f
0792: 322e  STA $fe2e           pdest.x (computed as proportion between dest.x - current.x and distance(current,dest) and distance(pdest,dest))
0793: 45bb  JSM $07bb           A = pdest.y (computed as y coord. of point with x = pdest.x on line between src and dest)
0794: 6d9b  JMP $079b
0795: 0ac2  LDB $fec2
0796: c5e8  JSM $07e8,I         = 0ac7
0797: 223f  ADA $fe3f
0798: 322e  STA $fe2e
0799: c0cf  JSM $00cf,I         = 098f
079a: 6d9b  JMP $079b
079b: 322f  STA $fe2f
079c: 6dac  JMP $07ac
079d: 0240  LDA $fe40
079e: fd07  SBM $07a5
079f: 0ac3  LDB $fec3
07a0: 45ae  JSM $07ae
07a1: 2240  ADA $fe40
07a2: 322f  STA $fe2f
07a3: 45b5  JSM $07b5
07a4: 6dab  JMP $07ab
07a5: 0ac3  LDB $fec3
07a6: c5e8  JSM $07e8,I         = 0ac7
07a7: 2240  ADA $fe40
07a8: 322f  STA $fe2f
07a9: c0d0  JSM $00d0,I         = 0989
07aa: 6dab  JMP $07ab
07ab: 322e  STA $fe2e
07ac: c0c5  JSM $00c5,I         = 08cb Draw pattern segment
07ad: 6d4a  JMP $074a
*
* Compute A = (B-A)*(fec4)/(fec5)
*
07ae: f020  TCA
07af: 2001  ADA $0001(B)
07b0: 0ac5  LDB $fec5
07b1: 3acb  STB $fecb
07b2: 0ac4  LDB $fec4
07b3: 4193  JSM $0193
07b4: 6960  JMP $0160
*
* Compute A=((fe42)*(-A)+(fe44):(fe45))/(fe41)
*
07b5: 0a41  LDB $fe41
07b6: 7c02  RZB $07b8
07b7: f081  RET 1
07b8: 3acb  STB $fecb
07b9: 0a42  LDB $fe42
07ba: 6dc0  JMP $07c0
*
* Compute A=((fe41)*(-A)+(fe44):(fe45))/(fe42)
*
07bb: 0a42  LDB $fe42
07bc: 7c02  RZB $07be
07bd: f081  RET 1
07be: 3acb  STB $fecb
07bf: 0a41  LDB $fe41
07c0: f020  TCA
07c1: 4193  JSM $0193
07c2: 32c9  STA $fec9
07c3: 3aca  STB $feca
07c4: 0245  LDA $fe45
07c5: 0a44  LDB $fe44
07c6: 4150  JSM $0150
07c7: 6960  JMP $0160
*
* Compute:
* (fe41) = src.y - dest.y
* (fe42) = dest.x - src.x
* B:A = src.y * dest.x - src.x * dest.y
*
07c8: 022f  LDA $fe2f
07c9: f020  TCA
07ca: 0a40  LDB $fe40
07cb: 2800  ADB $0000(A)
07cc: 3a41  STB $fe41           (fe41) = src.y - dest.y
07cd: 023f  LDA $fe3f
07ce: f020  TCA
07cf: 0a2e  LDB $fe2e
07d0: 2800  ADB $0000(A)
07d1: 3a42  STB $fe42           (fe42) = dest.x - src.x
07d2: 0a2f  LDB $fe2f
07d3: 4193  JSM $0193
07d4: 3aca  STB $feca
07d5: 32c9  STA $fec9           (feca):(fec9) = dest.y * (-src.x)
07d6: 022e  LDA $fe2e
07d7: 0a40  LDB $fe40
07d8: 4193  JSM $0193           B:A = dest.x * src.y
07d9: 6950  JMP $0150           B:A = dest.x * src.y - dest.y * src.x
*
* (febe):(febd) = B:A
* (febb) = (fe41)
* (febc) = (fe42)
*
07da: 32bd  STA $febd
07db: 3abe  STB $febe
07dc: 0242  LDA $fe42
07dd: 32bc  STA $febc
07de: 0a41  LDB $fe41
07df: 3abb  STB $febb
07e0: f081  RET 1
*
* if (|A| > 8000)
*   (fef1) = 8000 - |A|
*
07e1: f502  SAM $07e3
07e2: f020  TCA
07e3: 25e7  ADA $07e7           = 1f40/8000
07e4: f402  SAP $07e6
07e5: 32f1  STA $fef1
07e6: f081  RET 1
07e7: 1f40  CPB $0540
07e8: 0ac7  LDB $fec7
07e9: 0000  NOP
07ea: 0000  NOP
07eb: 0000  NOP
07ec: 0000  NOP
07ed: 0000  NOP
07ee: 0000  NOP
07ef: 0000  NOP
07f0: 0000  NOP
07f1: 0000  NOP
07f2: 0000  NOP
07f3: 0000  NOP
07f4: 0000  NOP
07f5: 0000  NOP
07f6: 0000  NOP
07f7: 0000  NOP
07f8: 0000  NOP
07f9: 0000  NOP
07fa: 0000  NOP
07fb: 0000  NOP
07fc: 0000  NOP
07fd: 0000  NOP
07fe: 0000  NOP
07ff: 0000  NOP
*
* out A = in A ^ in B
*
0800: 321c  STA $fe1c
0801: f860  CMB
0802: 5001  AND $0001(B)
0803: 321d  STA $fe1d
0804: f860  CMB
0805: 021c  LDA $fe1c
0806: f060  CMA
0807: 5001  AND $0001(B)
0808: 621d  IOR $fe1d
0809: f081  RET 1
* Clear P1 & P2
080a: 00e6  LDA $00e6           = 0208/520
080b: 3202  STA $fe02
080c: 00e7  LDA $00e7           = 017c/380
080d: 3203  STA $fe03
080e: 00e8  LDA $00e8           = 3d68/15720
080f: 3204  STA $fe04
0810: 00e9  LDA $00e9           = 288c/10380
0811: 3205  STA $fe05
*
0812: 00bb  LDA $00bb           = ff80
0813: 3293  STA $fe93
0814: 007a  LDA $007a           = 1
0815: 322a  STA $fe2a
0816: 087e  LDB $007e           = 000a
0817: 3aa4  STB $fea4
0818: 0084  LDA $0084           = ffff
0819: 32a0  STA $fea0
081a: 00f6  LDA $00f6           = 00df
081b: 3218  STA $fe18
081c: 00f8  LDA $00f8           = 0
081d: 3216  STA $fe16
081e: 00f7  LDA $00f7           = 0
081f: 3217  STA $fe17
0820: 00f4  LDA $00f4           = 0080
0821: 32b2  STA $feb2
0822: f020  TCA
0823: 32b3  STA $feb3           = ff80
0824: 00f5  LDA $00f5           = 0400
0825: 32b9  STA $feb9
0826: c0ca  JSM $00ca,I         = 09f5
0827: 007a  LDA $007a           = 1
0828: 321b  STA $fe1b
0829: c05b  JSM $005b,I         = 1611 Equivalent to CS;
082a: c05f  JSM $005f,I         = 1613 Equivalent to CA;
082b: c043  JSM $0043,I         = 1687 DR1,0;
082c: c037  JSM $0037,I         = 1637 SR.75,1.5;
082d: c05d  JSM $005d,I         = 1445 Equivalent to SS;
082e: 0095  LDA $0095           = 0
082f: 321b  STA $fe1b
0830: 007a  LDA $007a           = 1
0831: 327c  STA $fe7c
0832: 3276  STA $fe76           Set automatic pickup
0833: 3230  STA $fe30           Pen up
0834: 324d  STA $fe4d           Pen up
0835: 324e  STA $fe4e
0836: 00bd  LDA $00bd           = 03e8
0837: 324c  STA $fe4c
0838: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (0,+1000)
0839: 3015  STA $0015           Enable ints
083a: 0095  LDA $0095           = 0
083b: 324c  STA $fe4c
083c: 00be  LDA $00be           = 3fff
083d: 324b  STA $fe4b
083e: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (+16383,0)
083f: 0017  LDA $0017           Wait for x limit
0840: f180  SAL 1
0841: f43e  SAP $083f
0842: 4683  JSM $0883           Stop motion
0843: 324b  STA $fe4b           = ff80
0844: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (-128,0)
0845: 007a  LDA $007a           = 1
0846: 324b  STA $fe4b
0847: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (+1,0)
0848: 0017  LDA $0017
0849: f180  SAL 1
084a: f43d  SAP $0847           Keep moving to rel (+1,0) until x limit reached again
084b: 4159  JSM $0159
084c: 324b  STA $fe4b
084d: 0692  LDA $0892           = c180
084e: 324c  STA $fe4c
084f: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (0,-16000)
0850: 0017  LDA $0017
0851: f43f  SAP $0850           Wait for y limit
0852: 4683  JSM $0883           Stop motion
0853: f020  TCA
0854: 324c  STA $fe4c           = 0080
0855: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (0,+128)
0856: 0084  LDA $0084           = ffff
0857: 324c  STA $fe4c
0858: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (0,-1)
0859: 0017  LDA $0017
085a: f43e  SAP $0858           Keep moving to rel (0,-1) until y limit reached again
085b: 4159  JSM $0159
085c: 324b  STA $fe4b
085d: 00eb  LDA $00eb           = 03c8
085e: 324c  STA $fe4c
085f: c0c8  JSM $00c8,I         = 058d Start pen motion to rel (0,+968)
0860: 0013  LDA $0013
0861: f144  SAR 5
0862: 5098  AND $0098           = 000f
0863: 3001  STA $0001(B)
0864: 0016  LDA $0016
0865: 50a7  AND $00a7           = 001e
0866: f182  SAL 3
0867: 6001  IOR $0001(B)        A = status of pen stables (b7..b0 = stables 8..1)
0868: 087a  LDB $007a           = 1
0869: 10a9  CPA $00a9           = 00ff
086a: 6e6f  JMP $086f
086b: 6e6e  JMP $086e
086c: f100  AAR 1
086d: 287a  ADB $007a           = 1
086e: 773e  RLA $086c
086f: 3a75  STB $fe75           Set current pen no. = lowest numbered empty stable (or 1 if all stables full)
0870: 4159  JSM $0159
0871: 324e  STA $fe4e
0872: 327c  STA $fe7c
0873: 3207  STA $fe07
0874: 3240  STA $fe40
0875: 00e0  LDA $00e0           = 3e80/16000
0876: 3206  STA $fe06
0877: 323f  STA $fe3f           Set abs pen pos = (16000,0)
0878: 3238  STA $fe38
0879: 00e1  LDA $00e1           = 2c88/11400
087a: 3239  STA $fe39           Set window to (0,0)-(16000,11400)
087b: 0012  LDA $0012
087c: f182  SAL 3
087d: f503  SAM $0880           Not in 9815 mode
087e: 00a3  LDA $00a3           = 0400
087f: c691  JSM $0891,I         = 114b Set listen state when in 9815 mode
0880: 0896  LDB $0096           = 8
0881: c0d6  JSM $00d6,I         = 1274 Set "initialized" condition
0882: 6907  JMP $0107
*
* Immediately stop pen motion
*
0883: 0895  LDB $0095           = 0
0884: 3a68  STB $fe68
0885: 3a09  STB $fe09
0886: 3a0a  STB $fe0a
0887: 2884  ADB $0084           = fff8
0888: 3a0b  STB $fe0b           -> fff8
0889: 2884  ADB $0084           = fff8
088a: 3a0c  STB $fe0c           -> fff0
088b: 2884  ADB $0084           = fff8
088c: 3a0d  STB $fe0d           -> ffe8
088d: 2884  ADB $0084           = fff8
088e: 3a0e  STB $fe0e           -> ffe0
088f: 00bb  LDA $00bb           = ff80
0890: f081  RET 1
0891: 114b  CPA $014b
0892: c180  JSM $0180,I
*
* DF cmd
*
0893: 4128  JSM $0128
0894: 0a68  LDB $fe68           Wait for motion to end
0895: 7c3f  RZB $0894
0896: 3af8  STB $fef8           Clear scaling mode
0897: 321b  STA $fe1b           Set != 0, i.e. enter simulated cmd mode
0898: c047  JSM $0047,I         = 12d7 IM;
0899: c037  JSM $0037,I         = 1637 SR;
089a: c03b  JSM $003b,I         = 0ad3 DC;
089b: c043  JSM $0043,I         = 1687 DR;
089c: 47b8  JSM $09b8           IW;
089d: 4473  JSM $0a73           LT;
089e: c05f  JSM $005f,I         = 1613 CA;
089f: c05b  JSM $005b,I         = 1611 CS;
08a0: c05d  JSM $005d,I         = 1445 SS;
08a1: c063  JSM $0063,I         = 16b9 SL;
08a2: c065  JSM $0065,I         = 1463 SM;
08a3: 47fa  JSM $09fa           TL;
08a4: c06d  JSM $006d,I         = 0c00 VS;
08a5: c071  JSM $0071,I         = 0b66 VN;
08a6: c077  JSM $0077,I         = 0b5d AP;
08a7: 00f5  LDA $00f5           = 0400
08a8: 32b9  STA $feb9           Pattern length = 4.0
08a9: 44bd  JSM $0abd
08aa: 0095  LDA $0095           = 0
08ab: 321b  STA $fe1b           Leave simulated cmd mode
08ac: 6907  JMP $0107
*
* Set lost state
*
08ad: 00ac  LDA $00ac           = 0020
08ae: 413b  JSM $013b
08af: 007a  LDA $007a           = 1
08b0: 3248  STA $fe48
08b1: 3247  STA $fe47
08b2: 3232  STA $fe32
08b3: 6ed1  JMP $08d1
*
* Move to (fe2e):(fe2f) if (fe33) == 0
* Move to (fe2e):(fe2f) + (fe3f):(fe40) if (fe33) != 0
* OUT: A = 0    No overflow
*      A = 1    Overflow in relative motion
*
08b4: 0230  LDA $fe30
08b5: 3231  STA $fe31
08b6: 0268  LDA $fe68
08b7: 1096  CPA $0096           = 8
08b8: 6eb6  JMP $08b6
08b9: 0233  LDA $fe33
08ba: 750a  SZA $08c4
08bb: f681  SOC $08bc,C
08bc: 022e  LDA $fe2e
08bd: 223f  ADA $fe3f
08be: f70b  SOS $08c9
08bf: 322e  STA $fe2e
08c0: 022f  LDA $fe2f
08c1: 2240  ADA $fe40
08c2: f707  SOS $08c9
08c3: 322f  STA $fe2f
08c4: 46d7  JSM $08d7
08c5: 0095  LDA $0095
08c6: 0a31  LDB $fe31
08c7: 3a30  STB $fe30
08c8: f081  RET 1
08c9: 007a  LDA $007a
08ca: 6ec6  JMP $08c6
*
* Clipped move from start to dest, pen pos = (fe32)
* Pen position (fe30) is saved and restored
*
08cb: 0230  LDA $fe30
08cc: 0a32  LDB $fe32
08cd: 3a30  STB $fe30
08ce: 6eb5  JMP $08b5
*
* Set pen according to (fe30)
*
08cf: 0a30  LDB $fe30
08d0: 6ed2  JMP $08d2
*
* Set pen according to (fe32)
*
08d1: 0a32  LDB $fe32
08d2: 023a  LDA $fe3a
08d3: 7403  RZA $08d6           Starting point is outside window: do nothing
08d4: 3a4d  STB $fe4d           Set pen command
08d5: c0c9  JSM $00c9,I         = 058b
08d6: f081  RET 1
*
* Move from start to dest & do clipping
* IN: (fe3f):(fe40) Starting point
*     (fe3a)        Position of starting point wrt window
*     (fe2e):(fe2f) Destination point
*     (fe30)        Pen position
*
08d7: 471f  JSM $091f
08d8: 4703  JSM $0903
08d9: 023a  LDA $fe3a
08da: 623b  IOR $fe3b
08db: 7402  RZA $08dd
08dc: 6eff  JMP $08ff           Either end inside window
08dd: 473c  JSM $093c
08de: 3a44  STB $fe44
08df: 3245  STA $fe45
08e0: 023a  LDA $fe3a
08e1: 750d  SZA $08ee           Starting point is inside the window
08e2: 023b  LDA $fe3b
08e3: 7517  SZA $08fa           Destination point is inside the window
08e4: 023a  LDA $fe3a           Either end outside of the window
08e5: 523b  AND $fe3b
08e6: 741b  RZA $0901           No intersection with window
08e7: 0a3a  LDB $fe3a
08e8: 3a3c  STB $fe3c
08e9: 4756  JSM $0956           Compute intersection start->window
08ea: 024a  LDA $fe4a
08eb: 7503  SZA $08ee           No intersection
08ec: 007a  LDA $007a
08ed: 4718  JSM $0918           Move start->intersection with pen up
08ee: 0a3b  LDB $fe3b           Start is inside, dest is outside
08ef: 3a3c  STB $fe3c
08f0: 4756  JSM $0956           Compute intersection of window and segment start->dest
08f1: 024a  LDA $fe4a
08f2: 750f  SZA $0901           No intersection
08f3: 0230  LDA $fe30
08f4: 4718  JSM $0918           Move to intersection point pen = (fe30)
08f5: 470d  JSM $090d           Update last point
08f6: 007a  LDA $007a           = 1
08f7: 324d  STA $fe4d           Set pen up
08f8: c0c9  JSM $00c9,I         = 058b
08f9: f081  RET 1
08fa: 0a3a  LDB $fe3a           Start is outside, dest is inside
08fb: 3a3c  STB $fe3c
08fc: 4756  JSM $0956           Compute intersection
08fd: 007a  LDA $007a
08fe: 4718  JSM $0918           Move to intersection with pen up
08ff: 0230  LDA $fe30
0900: 4714  JSM $0914           Go to (fe2e):(fe2f), pen = (fe30)
0901: 470d  JSM $090d           Update last point
0902: f081  RET 1
*
* Set "out of limit" LED according to (fe3b) == 0 / != 0
*
0903: 0a3b  LDB $fe3b
0904: 0096  LDA $0096           = 8
0905: 7c02  RZB $0907
0906: f060  CMA
0907: 7d02  SZB $0909
0908: 628b  IOR $fe8b
0909: 7c02  RZB $090b
090a: 528b  AND $fe8b
090b: 414d  JSM $014d
090c: f081  RET 1
*
* Move last point to destination point
*
090d: 022e  LDA $fe2e
090e: 323f  STA $fe3f
090f: 022f  LDA $fe2f
0910: 3240  STA $fe40
0911: 023b  LDA $fe3b
0912: 323a  STA $fe3a
0913: f081  RET 1
0914: 324d  STA $fe4d
0915: 022e  LDA $fe2e
0916: 0a2f  LDB $fe2f
0917: 6f1b  JMP $091b
*
* Set pen state = A, move to (fe3d):(fe3e)
*
0918: 324d  STA $fe4d
0919: 023d  LDA $fe3d
091a: 0a3e  LDB $fe3e
091b: 324b  STA $fe4b
091c: 3a4c  STB $fe4c
091d: c0c8  JSM $00c8,I         = 058d
091e: f081  RET 1
*
* Set (fe3b) bits according to pos of (fe2e,fe2f) wrt window
* b0 = 1 if (fe2e) < 0 || (fe2e) < Xmin
* b1 = 1 if (fe2f) >= 0 && (fe2f) > Ymax
* b2 = 1 if (fe2e) >= 0 && (fe2e) > Xmax
* b3 = 1 if (fe2f) < 0 || (fe2f) < Ymin
* b4..b15 = 0
*
091f: 0095  LDA $0095           = 0
0920: 0a2e  LDB $fe2e
0921: fd05  SBM $0926
0922: 0a36  LDB $fe36
0923: f820  TCB
0924: 2a2e  ADB $fe2e
0925: fc02  SBP $0927
0926: 007a  LDA $007a           = 1
0927: 0a2f  LDB $fe2f
0928: fd05  SBM $092d
0929: f820  TCB
092a: 2a39  ADB $fe39
092b: fc02  SBP $092d
092c: 607b  IOR $007b           = 2
092d: 0a2e  LDB $fe2e
092e: fd05  SBM $0933
092f: f820  TCB
0930: 2a38  ADB $fe38
0931: fc02  SBP $0933
0932: 60ab  IOR $00ab           = 4
0933: 0a2f  LDB $fe2f
0934: fd05  SBM $0939
0935: 0a37  LDB $fe37
0936: f820  TCB
0937: 2a2f  ADB $fe2f
0938: fc02  SBP $093a
0939: 6096  IOR $0096           = 8
093a: 323b  STA $fe3b
093b: f081  RET 1
*
* Compute:
* (fe41) = (src.y - dest.y) / 2
* (fe42) = (dest.x - src.x) / 2
* B:A = (src.y * dest.x - src.x * dest.y) / 2
*
093c: 022f  LDA $fe2f
093d: f100  AAR 1
093e: f020  TCA
093f: 0a40  LDB $fe40
0940: f900  ABR 1
0941: 2800  ADB $0000(A)
0942: 3a41  STB $fe41           B = (src.y - dest.y) / 2
0943: 023f  LDA $fe3f
0944: f100  AAR 1
0945: f020  TCA
0946: 0a2e  LDB $fe2e
0947: f900  ABR 1
0948: 2800  ADB $0000(A)
0949: 3a42  STB $fe42           B = (dest.x - src.x) / 2
094a: 0a2f  LDB $fe2f
094b: f900  ABR 1
094c: 4193  JSM $0193
094d: 3aca  STB $feca           B:A = dest.y / 2 * (-src.x / 2)
094e: 32c9  STA $fec9
094f: 022e  LDA $fe2e
0950: f100  AAR 1
0951: 0a40  LDB $fe40
0952: f900  ABR 1
0953: 4193  JSM $0193
0954: 4150  JSM $0150           B:A = src.y / 2 * (dest.x / 2)
0955: f081  RET 1               B:A = (src.y * dest.x - src.x * dest.y) / 2
*
*
*
0956: 0095  LDA $0095           = 0
0957: 324a  STA $fe4a
0958: 0a3c  LDB $fe3c
0959: 7e03  SLB $095c           (fe3c):b0 = 0
095a: 0236  LDA $fe36           Xmin of window
095b: 476f  JSM $096f
095c: 0a3c  LDB $fe3c
095d: f900  ABR 1
095e: 3a3c  STB $fe3c
095f: 7e03  SLB $0962           (fe3c):b1 = 0
0960: 0239  LDA $fe39           Ymax of window
0961: 477c  JSM $097c
0962: 0a3c  LDB $fe3c
0963: f900  ABR 1
0964: 3a3c  STB $fe3c
0965: 7e03  SLB $0968           (fe3c):b3 = 0
0966: 0238  LDA $fe38           Xmax of window
0967: 476f  JSM $096f
0968: 0a3c  LDB $fe3c
0969: f900  ABR 1
096a: 3a3c  STB $fe3c
096b: 7e03  SLB $096e           (fe3c):b4 = 0
096c: 0237  LDA $fe37           Ymin of window
096d: 477c  JSM $097c
096e: f081  RET 1
096f: 3243  STA $fe43
0970: 478f  JSM $098f
0971: 0240  LDA $fe40
0972: 3246  STA $fe46
0973: 0237  LDA $fe37
0974: 0a39  LDB $fe39
0975: 47ac  JSM $09ac
0976: 7505  SZA $097b
0977: 0246  LDA $fe46
0978: 323e  STA $fe3e
0979: 0243  LDA $fe43
097a: 323d  STA $fe3d
097b: f081  RET 1
097c: 3243  STA $fe43
097d: 4789  JSM $0989
097e: 023f  LDA $fe3f
097f: 3246  STA $fe46
0980: 0236  LDA $fe36
0981: 0a38  LDB $fe38
0982: 47ac  JSM $09ac
0983: 7505  SZA $0988
0984: 0246  LDA $fe46
0985: 323d  STA $fe3d
0986: 0243  LDA $fe43
0987: 323e  STA $fe3e
0988: f081  RET 1
0989: 0a41  LDB $fe41
098a: 7c02  RZB $098c
098b: f081  RET 1
098c: 3acb  STB $fecb
098d: 0a42  LDB $fe42
098e: 6f94  JMP $0994
098f: 0a42  LDB $fe42
0990: 7c02  RZB $0992
0991: f081  RET 1               Line is vertical (dest.x == src.x)
0992: 3acb  STB $fecb
0993: 0a41  LDB $fe41
0994: 4796  JSM $0996
0995: f082  RET 2
0996: f100  AAR 1
0997: f020  TCA
0998: 4193  JSM $0193
0999: 32c9  STA $fec9
099a: 3aca  STB $feca
099b: 0084  LDA $0084           = ffff
099c: 32cc  STA $fecc
099d: 0245  LDA $fe45
099e: 0a44  LDB $fe44
099f: 4150  JSM $0150
09a0: 4160  JSM $0160
09a1: fe81  SEC $09a2,C
09a2: f402  SAP $09a4
09a3: fec1  SEC $09a4,S
09a4: f180  SAL 1
09a5: 4acc  ISZ $fecc
09a6: 6fa4  JMP $09a4
09a7: ff03  SES $09aa
09a8: f481  SAP $09a9,C
09a9: f081  RET 1
09aa: f4c1  SAP $09ab,S
09ab: f081  RET 1
09ac: f020  TCA
09ad: 2246  ADA $fe46
09ae: f508  SAM $09b6
09af: 0246  LDA $fe46
09b0: f020  TCA
09b1: 2001  ADA $0001(B)
09b2: f504  SAM $09b6
09b3: 007a  LDA $007a
09b4: 324a  STA $fe4a
09b5: f081  RET 1
09b6: 0095  LDA $0095
09b7: f081  RET 1
*
* IW cmd
*
09b8: 022a  LDA $fe2a
09b9: 741f  RZA $09d8
09ba: 087b  LDB $007b           = 2
09bb: 411d  JSM $011d           Get Xmin, Ymin
09bc: f402  SAP $09be
09bd: 0095  LDA $0095           If Xmin < 0, Xmin = 0
09be: 5089  AND $0089           Xmin &= fffe
09bf: 3234  STA $fe34
09c0: fc02  SBP $09c2
09c1: 0895  LDB $0095           IF Ymin < 0, Ymin = 0
09c2: 0001  LDA $0001(B)
09c3: 5089  AND $0089           Ymin &= fffe
09c4: 3235  STA $fe35
09c5: 0095  LDA $0095
09c6: 087b  LDB $007b
09c7: 4116  JSM $0116           Get Xmax, Ymax
09c8: 08e0  LDB $00e0           = 3e80/16000
09c9: 47ef  JSM $09ef           If Xmax > 16000, Xmax = 16000
09ca: 0a34  LDB $fe34
09cb: 47eb  JSM $09eb           If Xmin > Xmax, error 3
09cc: 322c  STA $fe2c           Save Xmax
09cd: 08e1  LDB $00e1           = 2c88/11400
09ce: 022d  LDA $fe2d           Get Ymax
09cf: 47ef  JSM $09ef           If Ymax > 11400, Ymax = 11400
09d0: 0a35  LDB $fe35
09d1: 47eb  JSM $09eb           If Ymin > Ymax, error 3
09d2: 0a34  LDB $fe34
09d3: 3a36  STB $fe36           Set Xmin
09d4: 0a35  LDB $fe35
09d5: 3a37  STB $fe37           Set Ymin
09d6: 0a2c  LDB $fe2c           Get Xmax
09d7: 6fdd  JMP $09dd
09d8: 0095  LDA $0095           Set default window
09d9: 3236  STA $fe36           (0,0)-(16000,11400)
09da: 3237  STA $fe37
09db: 00e1  LDA $00e1
09dc: 08e0  LDB $00e0
09dd: 3239  STA $fe39           Set Ymax
09de: 3a38  STB $fe38           Set Xmax
09df: 023f  LDA $fe3f
09e0: 322e  STA $fe2e
09e1: 0240  LDA $fe40
09e2: 322f  STA $fe2f
09e3: 471f  JSM $091f           Update state of "out of limit" LED
09e4: 4703  JSM $0903
09e5: 3a3a  STB $fe3a
09e6: 7d04  SZB $09ea           Skip if point inside window
09e7: 007a  LDA $007a           = 1
09e8: 324d  STA $fe4d
09e9: c0c9  JSM $00c9,I         = 058b Raise pen if it's outside window
09ea: 690a  JMP $010a
09eb: f820  TCB
09ec: 2800  ADB $0000(A)
09ed: fc07  SBP $09f4
09ee: 692f  JMP $012f
09ef: 3a15  STB $fe15
09f0: f820  TCB
09f1: 2800  ADB $0000(A)
09f2: fd02  SBM $09f4
09f3: 0215  LDA $fe15
09f4: f081  RET 1
09f5: 441e  JSM $0a1e           Recompute length of tp/tn
09f6: 44bd  JSM $0abd           Recompute pattern length
09f7: c7f9  JSM $09f9,I         = 1648 Recompute char. size/direction
09f8: f081  RET 1
09f9: 1648  CPA $0848
*
* TL cmd
*
09fa: 022a  LDA $fe2a
09fb: 7504  SZA $09ff
09fc: 00f4  LDA $00f4           = 0080
09fd: 0800  LDB $0000(A)
09fe: 6c0a  JMP $0a0a
09ff: 007a  LDA $007a           = 1
0a00: 087b  LDB $007b           = 2
0a01: 4123  JSM $0123           Get tp decimal param
0a02: 322c  STA $fe2c
0a03: 0895  LDB $0095
0a04: 1a2a  CPB $fe2a
0a05: 4124  JSM $0124           Get tn decimal param if present
0a06: 4128  JSM $0128
0a07: 022c  LDA $fe2c
0a08: f507  SAM $0a0f
0a09: fd06  SBM $0a0f
0a0a: 32b2  STA $feb2
0a0b: f820  TCB
0a0c: 3ab3  STB $feb3
0a0d: 441e  JSM $0a1e
0a0e: 690a  JMP $010a
0a0f: 692f  JMP $012f
*
* (signed) B:A *= 2^-(fecc)
*
0a10: fe81  SEC $0a11,C
0a11: fc02  SBP $0a13
0a12: fec1  SEC $0a13,S         Record sign of B in E
0a13: f980  SBL 1
0a14: f402  SAP $0a16
0a15: 287a  ADB $007a
0a16: f180  SAL 1
0a17: 4acc  ISZ $fecc
0a18: 6c13  JMP $0a13
0a19: ff03  SES $0a1c           Set b15 of B = E
0a1a: fc81  SBP $0a1b,C
0a1b: f081  RET 1
0a1c: fcc1  SBP $0a1d,S
0a1d: f081  RET 1
*
* Compute feb4..feb7 from P1, P2, tp & tn
*
0a1e: 0ab2  LDB $feb2
0a1f: 4439  JSM $0a39
0a20: 3ab4  STB $feb4
0a21: 0ab2  LDB $feb2
0a22: 442b  JSM $0a2b
0a23: 3ab6  STB $feb6
0a24: 0ab3  LDB $feb3
0a25: 4439  JSM $0a39
0a26: 3ab5  STB $feb5
0a27: 0ab3  LDB $feb3
0a28: 442b  JSM $0a2b
0a29: 3ab7  STB $feb7
0a2a: f081  RET 1
*
* A = B = |P1.x - P2.x| * B * 1/256 * 1/100
*
0a2b: 00bc  LDA $00bc           = 0064
0a2c: 32cb  STA $fecb
0a2d: 0085  LDA $0085           = fff8
0a2e: 32cc  STA $fecc
0a2f: 0202  LDA $fe02
0a30: f020  TCA
0a31: 2204  ADA $fe04
0a32: f402  SAP $0a34
0a33: f020  TCA
0a34: 4193  JSM $0193
0a35: 4445  JSM $0a45
0a36: 4160  JSM $0160
0a37: 0800  LDB $0000(A)
0a38: f081  RET 1
*
* A = B = |P1.y - P2.y| * B * 1/256 * 1/100
*
0a39: 00bc  LDA $00bc           = 0064
0a3a: 32cb  STA $fecb
0a3b: 0085  LDA $0085           = fff8
0a3c: 32cc  STA $fecc
0a3d: 0203  LDA $fe03
0a3e: f020  TCA
0a3f: 2205  ADA $fe05
0a40: 6c32  JMP $0a32
0a41: 7eb4  SLB $0a35,C
0a42: 7eb6  SLB $0a38,C
0a43: 7e2e  SLB $0a31
0a44: 7e2f  SLB $0a33
*
* (signed) B:A /= 2^-(fecc)
*
0a45: f140  SAR 1
0a46: 7e02  SLB $0a48
0a47: 609b  IOR $009b           = 8000
0a48: f900  ABR 1
0a49: 4acc  ISZ $fecc
0a4a: 6c45  JMP $0a45
0a4b: f081  RET 1
*
* XT cmd
*
0a4c: 0441  LDA $0a41           = 7eb4
0a4d: 32b1  STA $feb1
0a4e: 0443  LDA $0a43           = 7e2e
0a4f: 0c44  LDB $0a44           = 7e2f
*
*         XT   YT
* (feaf) 7e2e 7e2f
* (feb0) 7e2f 7e2e
* (feb1) 7eb4 7eb6
*
0a50: 3ab0  STB $feb0
0a51: 32af  STA $feaf
0a52: 4128  JSM $0128
0a53: 0248  LDA $fe48
0a54: 740e  RZA $0a62           Do nothing if "lost"
0a55: 007a  LDA $007a           = 1
0a56: 3233  STA $fe33
0a57: 0095  LDA $0095           = 0
0a58: 3232  STA $fe32
0a59: 4463  JSM $0a63
0a5a: 4ab1  ISZ $feb1
0a5b: 4463  JSM $0a63
0a5c: 5ab1  DSZ $feb1
0a5d: 022a  LDA $fe2a
0a5e: 7504  SZA $0a62
0a5f: 0095  LDA $0095
0a60: 3247  STA $fe47
0a61: c0c6  JSM $00c6,I         = 08cf
0a62: 6907  JMP $0107
0a63: 82b1  LDA $feb1,I         Get either |P1.y - P2.y| * tp (XT) or |P1.x - P2.x| * tp (YT)
0a64: 4469  JSM $0a69
0a65: 82b1  LDA $feb1,I
0a66: f020  TCA
0a67: 4469  JSM $0a69
0a68: f081  RET 1
0a69: b2b0  STA $feb0,I
0a6a: 0095  LDA $0095           = 0
0a6b: b2af  STA $feaf,I
0a6c: c0c5  JSM $00c5,I         = 08cb
0a6d: f081  RET 1
*
* YT cmd
*
0a6e: 0442  LDA $0a42           = 7eb6
0a6f: 32b1  STA $feb1
0a70: 0444  LDA $0a44           = 7e2f
0a71: 0c43  LDB $0a43           = 7e2e
0a72: 6c50  JMP $0a50
*
* LT cmd
*
0a73: 022a  LDA $fe2a
0a74: 7505  SZA $0a79
0a75: 0095  LDA $0095           No params, disable pattern
0a76: 32b8  STA $feb8
0a77: c0c6  JSM $00c6,I         = 08cf
0a78: 690a  JMP $010a
0a79: 007a  LDA $007a           = 1
0a7a: 087b  LDB $007b           = 2
0a7b: 4123  JSM $0123           Get pattern no. as decimal value
0a7c: f1c7  RAR 8
0a7d: 50a9  AND $00a9           = 00ff
0a7e: 750c  SZA $0a8a
0a7f: 0800  LDB $0000(A)
0a80: 2084  ADA $0084           = ffff
0a81: f503  SAM $0a84
0a82: 2092  ADA $0092           = fffa
0a83: f502  SAM $0a85
0a84: 692f  JMP $012f
0a85: 2c9c  ADB $0a9c           = 0a9c
0a86: 8801  LDB $0001(B),I
0a87: 8001  LDA $0001(B),I
0a88: 287a  ADB $007a           = 1
0a89: 3ac1  STB $fec1
0a8a: 32bf  STA $febf
0a8b: 049b  LDA $0a9b           = 0a94
0a8c: 3200  STA $fe00
0a8d: 0084  LDA $0084           = ffff
0a8e: 32c0  STA $fec0
0a8f: 0095  LDA $0095           = 0
0a90: 32c4  STA $fec4
0a91: 007a  LDA $007a           = 1
0a92: 32b8  STA $feb8
0a93: 6907  JMP $0107
0a94: 4128  JSM $0128
0a95: 0a2b  LDB $fe2b
0a96: 7d2e  SZB $0a84
0a97: fd2d  SBM $0a84
0a98: 3ab9  STB $feb9
0a99: 44bd  JSM $0abd
0a9a: 6907  JMP $0107
0a9b: 0a94  LDB $fe94
0a9c: 0a9c  LDB $fe9c
0a9d: 0aa3  LDB $fea3           Ptr to pattern #1 segments
0a9e: 0aa6  LDB $fea6           Ptr to pattern #2 segments
0a9f: 0aa9  LDB $fea9           Ptr to pattern #3 segments
0aa0: 0aac  LDB $feac           Ptr to pattern #4 segments
0aa1: 0ab1  LDB $feb1           Ptr to pattern #5 segments
0aa2: 0ab6  LDB $feb6           Ptr to pattern #6 segments
0aa3: 0002  LDA $0002(P)        Pattern 1: 2 segments (0-100)
0aa4: 0000  NOP
0aa5: 0064  LDA $0064
0aa6: 0002  LDA $0002(P)        Pattern 2: 2 segments (50-50)
0aa7: 0032  LDA $0032
0aa8: 0032  LDA $0032
0aa9: 0002  LDA $0002(P)        Pattern 3: 2 segments (70-30)
0aaa: 0046  LDA $0046
0aab: 001e  LDA $001e
0aac: 0004  LDA $0004           Pattern 4: 4 segments (80-10-0-10)
0aad: 0050  LDA $0050
0aae: 000a  LDA $000a
0aaf: 0000  NOP
0ab0: 000a  LDA $000a
0ab1: 0004  LDA $0004           Pattern 5: 4 segments (70-10-10-10)
0ab2: 0046  LDA $0046
0ab3: 000a  LDA $000a
0ab4: 000a  LDA $000a
0ab5: 000a  LDA $000a
0ab6: 0006  LDA $0006           Pattern 6: 6 segments (50-10-10-10-10-10)
0ab7: 0032  LDA $0032
0ab8: 000a  LDA $000a
0ab9: 000a  LDA $000a
0aba: 000a  LDA $000a
0abb: 000a  LDA $000a
0abc: 000a  LDA $000a
*
* Update (feba)
*
0abd: 0ab9  LDB $feb9
0abe: 442b  JSM $0a2b
0abf: 3a2c  STB $fe2c           B=pattern length * |P1.x-P2.x| / 25600
0ac0: 0ab9  LDB $feb9
0ac1: 4439  JSM $0a39           B=pattern length * |P1.y-P2.y| / 25600
0ac2: 022c  LDA $fe2c
0ac3: 41bb  JSM $01bb
0ac4: 02c8  LDA $fec8
0ac5: 32ba  STA $feba
0ac6: f081  RET 1
0ac7: f100  AAR 1
0ac8: f020  TCA
0ac9: f900  ABR 1
0aca: 2001  ADA $0001(B)
0acb: 0ac5  LDB $fec5
0acc: 3acb  STB $fecb
0acd: 0884  LDB $0084
0ace: 3acc  STB $fecc
0acf: 0ac4  LDB $fec4
0ad0: 4193  JSM $0193
0ad1: 4160  JSM $0160
0ad2: 6fa1  JMP $09a1
0ad3: 4128  JSM $0128
0ad4: 0095  LDA $0095
0ad5: 6cd8  JMP $0ad8
0ad6: 4128  JSM $0128
0ad7: 007a  LDA $007a
0ad8: 3214  STA $fe14
0ad9: 08a1  LDB $00a1
0ada: 7402  RZA $0adc
0adb: f860  CMB
0adc: 028b  LDA $fe8b
0add: fd02  SBM $0adf
0ade: 6001  IOR $0001(B)
0adf: fc02  SBP $0ae1
0ae0: 5001  AND $0001(B)
0ae1: 414d  JSM $014d
0ae2: 690a  JMP $010a
*
* Continue cmd decoding (starts @0570)
*
0ae3: 0cee  LDB $0aee           = 002c
0ae4: 9001  CPA $0001(B),I
0ae5: 6cea  JMP $0aea
0ae6: 287b  ADB $007b           = 2
0ae7: 1878  CPB $0078           = 0078
0ae8: 6931  JMP $0131           Cmd not recognized
0ae9: 6ce4  JMP $0ae4
0aea: 287a  ADB $007a
0aeb: 8001  LDA $0001(B),I
0aec: 5803  DSZ $0003(R)
0aed: e800  JMP $0000(A),I
0aee: 002c  LDA $002c
0aef: 00f0  LDA $00f0
0af0: 0080  LDA $0080
0af1: 000b  LDA $000b
0af2: 0015  LDA $0015
0af3: 04f1  LDA $0af1
0af4: 3010  STA $0010
0af5: 5800  DSZ $0000(A)
0af6: 6cf4  JMP $0af4
0af7: 0084  LDA $0084
0af8: 3017  STA $0017
0af9: 7580  SFC $0af9
0afa: 0095  LDA $0095
0afb: 4156  JSM $0156
0afc: 7480  SFS $0afc
0afd: 4156  JSM $0156
0afe: 3202  STA $fe02
0aff: 087a  LDB $007a
0b00: 451a  JSM $0b1a
0b01: f980  SBL 1
0b02: 18af  CPB $00af
0b03: f981  SBL 2
0b04: 7d02  SZB $0b06
0b05: 6d00  JMP $0b00
0b06: 0cf0  LDB $0af0
0b07: 3a02  STB $fe02
0b08: 451a  JSM $0b1a
0b09: f900  ABR 1
0b0a: 7d02  SZB $0b0c
0b0b: 6d08  JMP $0b08
0b0c: 00ab  LDA $00ab
0b0d: 3017  STA $0017
0b0e: 0016  LDA $0016
0b0f: 763f  SLA $0b0e
0b10: 453a  JSM $0b3a
0b11: 0884  LDB $0084
0b12: 3a02  STB $fe02
0b13: 0cf0  LDB $0af0
0b14: 451a  JSM $0b1a
0b15: f900  ABR 1
0b16: 7d02  SZB $0b18
0b17: 6d14  JMP $0b14
0b18: 3817  STB $0017
0b19: e8d7  JMP $00d7,I
0b1a: 00ab  LDA $00ab
0b1b: 3017  STA $0017
0b1c: 0202  LDA $fe02
0b1d: 7513  SZA $0b30
0b1e: f40a  SAP $0b28
0b1f: 0016  LDA $0016
0b20: 50a7  AND $00a7
0b21: f182  SAL 3
0b22: 3222  STA $fe22
0b23: 0013  LDA $0013
0b24: f144  SAR 5
0b25: 5098  AND $0098
0b26: 6222  IOR $fe22
0b27: 6d31  JMP $0b31
0b28: 0016  LDA $0016
0b29: f14b  SAR 12
0b2a: 3222  STA $fe22
0b2b: 0013  LDA $0013
0b2c: f144  SAR 5
0b2d: 54ef  AND $0aef
0b2e: 6222  IOR $fe22
0b2f: 6d31  JMP $0b31
0b30: 0017  LDA $0017
0b31: 5001  AND $0001(B)
0b32: 7502  SZA $0b34
0b33: 6d3a  JMP $0b3a
0b34: 75a8  SFC $0b1c
0b35: 4156  JSM $0156
0b36: 7480  SFS $0b36
0b37: 4156  JSM $0156
0b38: 5803  DSZ $0003(R)
0b39: e8d7  JMP $00d7,I
0b3a: 0096  LDA $0096
0b3b: 3017  STA $0017
0b3c: 008e  LDA $008e
0b3d: 3200  STA $fe00
0b3e: 4156  JSM $0156
0b3f: 4a00  ISZ $fe00
0b40: 6d3e  JMP $0b3e
0b41: f081  RET 1
*
* IN: B         Must be |B| <= 95
* OUT: A        |B| // 6
*      B        |B| % 6
*
0b42: fc02  SBP $0b44
0b43: f820  TCB
0b44: 0095  LDA $0095
0b45: 2893  ADB $0093           = ffd0
0b46: fc03  SBP $0b49
0b47: 28b5  ADB $00b5           = 0030
0b48: 6d4a  JMP $0b4a
0b49: 207a  ADA $007a
0b4a: f180  SAL 1
0b4b: 288d  ADB $008d           = ffe8
0b4c: fc03  SBP $0b4f
0b4d: 28a5  ADB $00a5           = 0018
0b4e: 6d50  JMP $0b50
0b4f: 207a  ADA $007a
0b50: f180  SAL 1
0b51: 2888  ADB $0088           = fff4
0b52: fc03  SBP $0b55
0b53: 289e  ADB $009e           = 000c
0b54: 6d56  JMP $0b56
0b55: 207a  ADA $007a
0b56: f180  SAL 1
0b57: 2892  ADB $0092           = fffa
0b58: fc03  SBP $0b5b
0b59: 28b4  ADB $00b4           = 6
0b5a: f081  RET 1
0b5b: 207a  ADA $007a
0b5c: f081  RET 1
*
* AP cmd
*
0b5d: 022a  LDA $fe2a
0b5e: 7404  RZA $0b62
0b5f: 087a  LDB $007a
0b60: 4111  JSM $0111
0b61: 0095  LDA $0095
0b62: 3276  STA $fe76
0b63: 690a  JMP $010a
*
* VA cmd
*
0b64: 4128  JSM $0128
0b65: 6d68  JMP $0b68
*
* VN cmd
*
0b66: 4128  JSM $0128
0b67: 0095  LDA $0095
0b68: 3279  STA $fe79
0b69: 690a  JMP $010a
*
*
*
0b6a: c0de  JSM $00de,I         = 0cb4
0b6b: f081  RET 1
0b6c: 3a23  STB $fe23
0b6d: 007a  LDA $007a
0b6e: 32fb  STA $fefb
0b6f: c10e  JSM $010e,I         = 1152
0b70: 0a8d  LDB $fe8d
0b71: 7c05  RZB $0b76
0b72: 0017  LDA $0017
0b73: 50a3  AND $00a3           = 0400
0b74: 7502  SZA $0b76
0b75: c57d  JSM $0b7d,I         = 0292
0b76: 0225  LDA $fe25
0b77: 7438  RZA $0b6f
0b78: 0095  LDA $0095
0b79: 32fb  STA $fefb
0b7a: 0222  LDA $fe22
0b7b: 0a23  LDB $fe23
0b7c: f081  RET 1
0b7d: 0292  LDA $fe92
0b7e: 0000  NOP
0b7f: 0000  NOP
0b80: 0000  NOP
0b81: 0000  NOP
0b82: 0000  NOP
0b83: 0000  NOP
0b84: 0000  NOP
0b85: 0000  NOP
0b86: 0000  NOP
0b87: 0000  NOP
0b88: 0000  NOP
0b89: 0000  NOP
0b8a: 0000  NOP
0b8b: 0000  NOP
0b8c: 0000  NOP
0b8d: 0000  NOP
0b8e: 0000  NOP
0b8f: 0000  NOP
0b90: 0000  NOP
0b91: 0000  NOP
0b92: 0000  NOP
0b93: 0000  NOP
0b94: 0000  NOP
0b95: 0000  NOP
0b96: 0000  NOP
0b97: 0000  NOP
0b98: 0000  NOP
0b99: 0000  NOP
0b9a: 0000  NOP
0b9b: 0000  NOP
0b9c: 0000  NOP
0b9d: 0000  NOP
0b9e: 0000  NOP
0b9f: 0000  NOP
0ba0: 0000  NOP
0ba1: 0000  NOP
0ba2: 0000  NOP
0ba3: 0000  NOP
0ba4: 0000  NOP
0ba5: 0000  NOP
0ba6: 0000  NOP
0ba7: 0000  NOP
0ba8: 0000  NOP
0ba9: 0000  NOP
0baa: 0000  NOP
0bab: 0000  NOP
0bac: 0000  NOP
0bad: 0000  NOP
0bae: 0000  NOP
0baf: 0000  NOP
0bb0: 0000  NOP
0bb1: 0000  NOP
0bb2: 0000  NOP
0bb3: 0000  NOP
0bb4: 0000  NOP
0bb5: 0000  NOP
0bb6: 0000  NOP
0bb7: 0000  NOP
0bb8: 0000  NOP
0bb9: 0000  NOP
0bba: 0000  NOP
0bbb: 0000  NOP
0bbc: 0000  NOP
0bbd: 0000  NOP
0bbe: 0000  NOP
0bbf: 0000  NOP
0bc0: 0000  NOP
0bc1: 0000  NOP
0bc2: 0000  NOP
0bc3: 0000  NOP
0bc4: 0000  NOP
0bc5: 0000  NOP
0bc6: 0000  NOP
0bc7: 0000  NOP
0bc8: 0000  NOP
0bc9: 0000  NOP
0bca: 0000  NOP
0bcb: 0000  NOP
0bcc: 0000  NOP
0bcd: 0000  NOP
0bce: 0000  NOP
0bcf: 0000  NOP
0bd0: 0000  NOP
0bd1: 0000  NOP
0bd2: 0000  NOP
0bd3: 0000  NOP
0bd4: 0000  NOP
0bd5: 0000  NOP
0bd6: 0000  NOP
0bd7: 0000  NOP
0bd8: 0000  NOP
0bd9: 0000  NOP
0bda: 0000  NOP
0bdb: 0000  NOP
0bdc: 0000  NOP
0bdd: 0000  NOP
0bde: 0000  NOP
0bdf: 0000  NOP
0be0: 0000  NOP
0be1: 0000  NOP
0be2: 0000  NOP
0be3: 0000  NOP
0be4: 0000  NOP
0be5: 0000  NOP
0be6: 0000  NOP
0be7: 0000  NOP
0be8: 0000  NOP
0be9: 0000  NOP
0bea: 0000  NOP
0beb: 0000  NOP
0bec: 0000  NOP
0bed: 0000  NOP
0bee: 0000  NOP
0bef: 0000  NOP
0bf0: 0000  NOP
0bf1: 0000  NOP
0bf2: 0000  NOP
0bf3: 0000  NOP
0bf4: 0000  NOP
0bf5: 0000  NOP
0bf6: 0000  NOP
0bf7: 0000  NOP
0bf8: 0000  NOP
0bf9: 0000  NOP
0bfa: 0000  NOP
0bfb: 0000  NOP
0bfc: 0000  NOP
0bfd: 0000  NOP
0bfe: 0000  NOP
0bff: 0000  NOP
*
* VS cmd
*
0c00: 022a  LDA $fe2a
0c01: 740c  RZA $0c0d
0c02: 087a  LDB $007a
0c03: 4123  JSM $0123
0c04: f820  TCB
0c05: fc12  SBP $0c17
0c06: 28ad  ADB $00ad
0c07: fd10  SBM $0c17
0c08: 3001  STA $0001(B)
0c09: f980  SBL 1
0c0a: f100  AAR 1
0c0b: 2800  ADB $0000(A)
0c0c: 6e0e  JMP $0c0e
0c0d: 0882  LDB $0082           = 005a
0c0e: 022a  LDA $fe2a
0c0f: 7509  SZA $0c18
0c10: 0623  LDA $0c23           = 7e6c
0c11: 2096  ADA $0096           = 8
0c12: b800  STB $0000(A),I
0c13: 2084  ADA $0084           = ffff
0c14: 1623  CPA $0c23
0c15: 690a  JMP $010a
0c16: 6e12  JMP $0c12
0c17: 692f  JMP $012f
0c18: 3a7b  STB $fe7b
0c19: 087a  LDB $007a
0c1a: 4111  JSM $0111
0c1b: f820  TCB
0c1c: fc06  SBP $0c22
0c1d: 2896  ADB $0096
0c1e: fd04  SBM $0c22
0c1f: 2623  ADA $0c23
0c20: 0a7b  LDB $fe7b
0c21: b800  STB $0000(A),I
0c22: 6907  JMP $0107
0c23: 7e6c  SLB $0c0f
*
* SP cmd
*
0c24: 0895  LDB $0095           = 0
0c25: 022a  LDA $fe2a
0c26: 7406  RZA $0c2c           No parameter
0c27: 087a  LDB $007a           = 1
0c28: 4111  JSM $0111           Get pen no.
0c29: f539  SAM $0c22           Pen no. < 0: do nothing
0c2a: 2086  ADA $0086           = fff7
0c2b: f437  SAP $0c22           Pen no. >= 9: do nothing
0c2c: 3a81  STB $fe81
0c2d: 4159  JSM $0159
0c2e: 0a81  LDB $fe81
0c2f: 0206  LDA $fe06
0c30: 327e  STA $fe7e
0c31: 0207  LDA $fe07
0c32: 327f  STA $fe7f
0c33: 028b  LDA $fe8b
0c34: 3280  STA $fe80           Save pen position & (fe8b) = current pen up/down state
0c35: 0013  LDA $0013
0c36: f103  AAR 4
0c37: 5016  AND $0016
0c38: 50a7  AND $00a7           = 001e
0c39: 10a7  CPA $00a7
0c3a: 6e63  JMP $0c63           All pen stables full
0c3b: 7d03  SZB $0c3e           Returning pen
0c3c: 4683  JSM $0c83
0c3d: 7525  SZA $0c22           Selected pen stable empty: do nothing
0c3e: 0a75  LDB $fe75
0c3f: 4683  JSM $0c83
0c40: 7403  RZA $0c43           Stable of current pen occupied
0c41: 0a75  LDB $fe75
0c42: 6e47  JMP $0c47
0c43: 0895  LDB $0095           = 0
0c44: 287a  ADB $007a           = 1
0c45: 4683  JSM $0c83
0c46: 743e  RZA $0c44           Find lowest numbered empty stable
0c47: 2eac  ADB $0cac           = 00eb Return pen to stable (B)
0c48: 8001  LDA $0001(B),I
0c49: 4698  JSM $0c98           Move current pen back to stable
0c4a: 00ea  LDA $00ea           = 022c/556
0c4b: 0895  LDB $0095           = 0
0c4c: fec1  SEC $0c4d,S
0c4d: 4679  JSM $0c79           Move to (+556,+0) rel (detach pen from arm)
0c4e: 46a3  JSM $0ca3           Move to (+0,+968) rel
0c4f: 0a81  LDB $fe81
0c50: 7d11  SZB $0c61
0c51: 2eac  ADB $0cac           = 00eb
0c52: 8001  LDA $0001(B),I
0c53: 20ea  ADA $00ea           = 022c/556
0c54: 4698  JSM $0c98           Move into stable, with +556 offset to the right
0c55: 00ea  LDA $00ea           = 022c/556
0c56: f020  TCA
0c57: 0895  LDB $0095           = 0
0c58: fec1  SEC $0c59,S
0c59: 4679  JSM $0c79           Move to (-556,+0) rel, i.e. grab pen
0c5a: 46a3  JSM $0ca3           Move to (+0,+968) rel
0c5b: 4159  JSM $0159
0c5c: 0a81  LDB $fe81
0c5d: 3a75  STB $fe75           Set new pen no.
0c5e: 4683  JSM $0c83
0c5f: 7502  SZA $0c61           Ok, stable is now empty
0c60: e8d5  JMP $00d5,I         = 04f7, cold start the plotter if pen not grabbed (still in stable)
0c61: 466d  JSM $0c6d
0c62: 6907  JMP $0107
0c63: 7d3f  SZB $0c62           Returning pen to stable but all stables full
0c64: 00e0  LDA $00e0           = 3e80/16000
0c65: 4698  JSM $0c98           Move pen to "pen in arm" switch @ (16000,-968)
0c66: 4159  JSM $0159
0c67: 0016  LDA $0016           Read pen in arm switch
0c68: 3286  STA $fe86
0c69: 46a3  JSM $0ca3           Move pen to (16000,0)
0c6a: 0286  LDA $fe86
0c6b: 7736  RLA $0c61           Pen is in arm, return to initial position, don't change pen
0c6c: 6e4f  JMP $0c4f
*
* Reposition pen to initial state
*
0c6d: 027e  LDA $fe7e
0c6e: 0a7f  LDB $fe7f
0c6f: fe81  SEC $0c70,C
0c70: 4679  JSM $0c79
0c71: 0280  LDA $fe80
0c72: 207a  ADA $007a
0c73: 507a  AND $007a
0c74: 324d  STA $fe4d
0c75: c0c9  JSM $00c9,I         = 058b
0c76: 0095  LDA $0095
0c77: 324e  STA $fe4e
0c78: f081  RET 1
*
* Move to (A):(B) point with pen up
* E == 0, point is absolute
* E == 1, point is relative
*
0c79: 324b  STA $fe4b
0c7a: 3a4c  STB $fe4c
0c7b: 0095  LDA $0095
0c7c: fe02  SEC $0c7e
0c7d: 007a  LDA $007a
0c7e: 324e  STA $fe4e
0c7f: 087a  LDB $007a           = 1
0c80: 3a4d  STB $fe4d
0c81: c0c8  JSM $00c8,I         = 058d
0c82: f081  RET 1
*
* Check if a pen stable is full
* IN: B         Pen number [1..8]
* OUT: A        != 0 if stable full
*      B        Unchanged
*
0c83: 0001  LDA $0001(B)
0c84: 2891  ADB $0091           = fffb
0c85: fc09  SBP $0c8e
0c86: 287d  ADB $007d           = 5
0c87: 18ab  CPB $00ab           = 4
0c88: 0096  LDA $0096           = 8
0c89: 187c  CPB $007c           = 3
0c8a: 00ab  LDA $00ab           = 4
0c8b: f184  SAL 5
0c8c: 5013  AND $0013
0c8d: f081  RET 1
0c8e: 287a  ADB $007a           = 1
0c8f: 0001  LDA $0001(B)
0c90: 18ab  CPB $00ab           = 4
0c91: 0096  LDA $0096           = 8
0c92: 187c  CPB $007c           = 3
0c93: 00ab  LDA $00ab           = 4
0c94: f180  SAL 1
0c95: 28ab  ADB $00ab           = 4
0c96: 5016  AND $0016
0c97: f081  RET 1
*
* Move pen to (A,0) abs, then to (+0,-968) rel
*
0c98: 0895  LDB $0095
0c99: fe81  SEC $0c9a,C         Abs motion
0c9a: 4679  JSM $0c79
0c9b: 4159  JSM $0159
0c9c: 08eb  LDB $00eb           = 03c8/968
0c9d: 3a07  STB $fe07
0c9e: f820  TCB
0c9f: 3a7d  STB $fe7d
0ca0: fec1  SEC $0ca1,S         Relative motion (+0,-968)
0ca1: 4679  JSM $0c79
0ca2: f081  RET 1
*
* Move pen to (+0,+968) rel
*
0ca3: 0095  LDA $0095           = 0
0ca4: 08eb  LDB $00eb           = 03c8/968
0ca5: fec1  SEC $0ca6,S
0ca6: 4679  JSM $0c79           Relative motion (+0,+968)
0ca7: 0a68  LDB $fe68
0ca8: 7c3f  RZB $0ca7
0ca9: 3a7d  STB $fe7d
0caa: 3a07  STB $fe07           Clear y pos
0cab: f081  RET 1
0cac: 00eb  LDA $00eb
*
* Wait for pen to be still, set pen state according to (fe4d), do not move
*
0cad: 4159  JSM $0159
0cae: 3277  STA $fe77
0caf: 324f  STA $fe4f
0cb0: 3250  STA $fe50
0cb1: 0812  LDB $0012
0cb2: 3a53  STB $fe53
0cb3: 6f0f  JMP $0d0f
*
* RET 1 if fe25 == 0, else RET 2
*
0cb4: 3222  STA $fe22
0cb5: 0225  LDA $fe25
0cb6: 7403  RZA $0cb9
0cb7: 0222  LDA $fe22
0cb8: f081  RET 1
0cb9: 0222  LDA $fe22
0cba: f082  RET 2
*
* Start motion
*
0cbb: 0268  LDA $fe68           Wait for current motion to end
0cbc: 7504  SZA $0cc0
0cbd: 007a  LDA $007a
0cbe: 327a  STA $fe7a
0cbf: 6ebb  JMP $0cbb
0cc0: c0df  JSM $00df,I         = 0b6a
0cc1: 3277  STA $fe77           Stop pen pickup timer
0cc2: 324f  STA $fe4f
0cc3: 024b  LDA $fe4b
0cc4: 0a4e  LDB $fe4e
0cc5: 7c04  RZB $0cc9           Relative motion
0cc6: 0a06  LDB $fe06
0cc7: f820  TCB
0cc8: 2001  ADA $0001(B)        A = (fe4b) - pen x pos
0cc9: 3257  STA $fe57
0cca: f402  SAP $0ccc
0ccb: f020  TCA
0ccc: 325a  STA $fe5a
0ccd: 024c  LDA $fe4c
0cce: 0a4e  LDB $fe4e
0ccf: 7c04  RZB $0cd3
0cd0: 0a07  LDB $fe07
0cd1: f820  TCB
0cd2: 2001  ADA $0001(B)
0cd3: 3258  STA $fe58
0cd4: f402  SAP $0cd6
0cd5: f020  TCA
0cd6: 325c  STA $fe5c
0cd7: 0a5a  LDB $fe5a
0cd8: f020  TCA
0cd9: 2001  ADA $0001(B)
0cda: 3252  STA $fe52           X distance - Y distance
0cdb: f402  SAP $0cdd
0cdc: 0a5c  LDB $fe5c
0cdd: 3a50  STB $fe50           max(X distance, Y distance)
0cde: 3acb  STB $fecb
0cdf: 0a5c  LDB $fe5c
0ce0: 1a5a  CPB $fe5a
0ce1: 6eea  JMP $0cea           Same distance in X and Y components
0ce2: f402  SAP $0ce4
0ce3: 0a5a  LDB $fe5a
0ce4: 0095  LDA $0095           B = min(X distance, Y distance)
0ce5: 7d06  SZB $0ceb           One of X/Y distances is null
0ce6: 4160  JSM $0160
0ce7: f100  AAR 1
0ce8: 50b7  AND $00b7           = 7fff
0ce9: 6eeb  JMP $0ceb           A = min(x dist, y dist) / max(x dist, y dist) * 32768
0cea: 0084  LDA $0084           = ffff
0ceb: 3251  STA $fe51
0cec: 02ed  LDA $feed
0ced: 0a7d  LDB $fe7d
0cee: 7c03  RZB $0cf1
0cef: 00e5  LDA $00e5           = 0016
0cf0: 0a7c  LDB $fe7c
0cf1: 7c1d  RZB $0d0e
0cf2: 0812  LDB $0012
0cf3: 3a53  STB $fe53
0cf4: fd19  SBM $0d0d
0cf5: 024d  LDA $fe4d
0cf6: 7717  RLA $0d0d           Pen is up, move @ 36 cm/s
0cf7: 0275  LDA $fe75
0cf8: 2623  ADA $0c23           = 7e6c
0cf9: 8000  LDA $0000(A),I      Get speed for current pen
0cfa: 326c  STA $fe6c
0cfb: 0279  LDA $fe79
0cfc: 750f  SZA $0d0b
0cfd: 0a7a  LDB $fe7a
0cfe: 7c02  RZB $0d00
0cff: 0884  LDB $0084           = ffff
0d00: 2a0f  ADB $fe0f
0d01: 1879  CPB $0079           = 0079
0d02: 6f06  JMP $0d06
0d03: 1883  CPB $0083           = 0083
0d04: 6f06  JMP $0d06
0d05: 3a0f  STB $fe0f
0d06: 820f  LDA $fe0f,I
0d07: 3001  STA $0001(B)
0d08: f820  TCB
0d09: 2a6c  ADB $fe6c
0d0a: fc04  SBP $0d0e
0d0b: 026c  LDA $fe6c
0d0c: 6f0e  JMP $0d0e
0d0d: 0082  LDA $0082           = 005a
0d0e: 3278  STA $fe78           Set speed to use
0d0f: 0a4d  LDB $fe4d
0d10: 0253  LDA $fe53
0d11: f402  SAP $0d13
0d12: 087a  LDB $007a           When dcl pending, set pen up (?)
0d13: 3aee  STB $feee
0d14: 028b  LDA $fe8b
0d15: 7c06  RZB $0d1b
0d16: 41b9  JSM $01b9
0d17: 08f9  LDB $00f9           = ffce Delay when pen has to move down
0d18: 7607  SLA $0d1f
0d19: 08fb  LDB $00fb           = fff6 Delay when pen alreay down
0d1a: 6f1f  JMP $0d1f
0d1b: 41b9  JSM $01b9
0d1c: 08fa  LDB $00fa           = fff6 Delay when pen has to rise
0d1d: 7602  SLA $0d1f
0d1e: 0895  LDB $0095           = 0 Pen already up
0d1f: 3a59  STB $fe59
0d20: 7705  RLA $0d25
0d21: 0a4d  LDB $fe4d
0d22: 7f02  RLB $0d24
0d23: 207a  ADA $007a
0d24: 414d  JSM $014d           Move pen up/down
0d25: 087a  LDB $007a
0d26: 0278  LDA $fe78
0d27: 1082  CPA $0082           = 005a
0d28: 6f2b  JMP $0d2b
0d29: 02ee  LDA $feee
0d2a: 7502  SZA $0d2c
0d2b: 0895  LDB $0095
0d2c: 3aef  STB $feef
0d2d: 0095  LDA $0095
0d2e: 327a  STA $fe7a
0d2f: 32ee  STA $feee
0d30: 207a  ADA $007a
0d31: 3268  STA $fe68           State -> 1
0d32: 0253  LDA $fe53
0d33: 0895  LDB $0095
0d34: 3a53  STB $fe53
0d35: f502  SAM $0d37
0d36: f081  RET 1
0d37: 4159  JSM $0159
0d38: 6936  JMP $0136
*
* Second half of ISR
*
0d39: 3a6a  STB $fe6a
0d3a: 0095  LDA $0095           = 0
0d3b: fe02  SEC $0d3d
0d3c: 009b  LDA $009b           = 8000
0d3d: f602  SOC $0d3f
0d3e: 207a  ADA $007a           = 1
0d3f: 326b  STA $fe6b           Save E&O
0d40: 0290  LDA $fe90
0d41: 740b  RZA $0d4c
0d42: 0090  LDA $0090           = ffdf
0d43: 3290  STA $fe90
0d44: 0017  LDA $0017
0d45: f183  SAL 4
0d46: f504  SAM $0d4a           W1 Jumper
0d47: 0095  LDA $0095
0d48: 3225  STA $fe25
0d49: 6f4c  JMP $0d4c
0d4a: 0084  LDA $0084           = ffff
0d4b: 3225  STA $fe25
0d4c: 0277  LDA $fe77           Pen pickup timer running?
0d4d: 7506  SZA $0d53           Not running
0d4e: 4a77  ISZ $fe77           Increment
0d4f: 6f53  JMP $0d53           No overflow
0d50: 028b  LDA $fe8b           Automatic pen pickup
0d51: 5089  AND $0089           = fffe
0d52: 414d  JSM $014d
0d53: 075c  LDA $0d5c
0d54: 207a  ADA $007a
0d55: 175d  CPA $0d5d           Advance timers fe8c..fe92
0d56: 6f5e  JMP $0d5e
0d57: 8800  LDB $0000(A),I
0d58: 7d3c  SZB $0d54
0d59: 287a  ADB $007a
0d5a: b800  STB $0000(A),I
0d5b: 6f54  JMP $0d54
0d5c: 7e8c  SLB $0d68,C
0d5d: 7e93  SLB $0d70,C
0d5e: 4a93  ISZ $fe93
0d5f: 6f75  JMP $0d75
0d60: 00bb  LDA $00bb           = ff80
0d61: 3293  STA $fe93
0d62: 0895  LDB $0095           = 0
0d63: 028c  LDA $fe8c
0d64: 7502  SZA $0d66
0d65: 28a1  ADB $00a1           = 0010 Enter LED blinking
0d66: 0248  LDA $fe48
0d67: 7502  SZA $0d69
0d68: 2896  ADB $0096           = 8 Out of limit LED blinking
0d69: 7d0c  SZB $0d75
0d6a: 028b  LDA $fe8b
0d6b: 3255  STA $fe55
0d6c: f860  CMB
0d6d: 5001  AND $0001(B)
0d6e: 3256  STA $fe56
0d6f: f860  CMB
0d70: 0255  LDA $fe55
0d71: f060  CMA
0d72: 5001  AND $0001(B)
0d73: 6256  IOR $fe56
0d74: 414d  JSM $014d           W27 ^= 8 or 0x10 or 0x18
0d75: 0268  LDA $fe68
0d76: 7507  SZA $0d7d           Not moving
0d77: 0259  LDA $fe59
0d78: 7510  SZA $0d88
0d79: 207a  ADA $007a
0d7a: 3259  STA $fe59
0d7b: 6f7d  JMP $0d7d
0d7c: 443b  JSM $0e3b
0d7d: 026b  LDA $fe6b           Restore E&O
0d7e: f681  SOC $0d7f,C
0d7f: 7602  SLA $0d81
0d80: f6c1  SOC $0d81,S
0d81: fe81  SEC $0d82,C
0d82: f402  SAP $0d84
0d83: fec1  SEC $0d84,S
0d84: 0269  LDA $fe69           Restore A
0d85: 0a6a  LDB $fe6a           Restore B
0d86: 3015  STA $0015           Enable INT
0d87: f080  RET 0               Return from ISR
*
* Pen is moving, update pos & FSM state
*
0d88: 024f  LDA $fe4f
0d89: 6250  IOR $fe50
0d8a: 7405  RZA $0d8f
0d8b: 3268  STA $fe68
0d8c: 0276  LDA $fe76
0d8d: 3277  STA $fe77
0d8e: 6f7d  JMP $0d7d
0d8f: 0a63  LDB $fe63           X comp. of speed
0d90: c495  JSM $0e95,I         Divide by 6
0d91: 2a09  ADB $fe09           B = Remainder + fraction
0d92: 2892  ADB $0092           = fffa
0d93: fc03  SBP $0d96           B >= 6, B %= 6
0d94: 28b4  ADB $00b4           = 6
0d95: 6f97  JMP $0d97           B < 6
0d96: 207a  ADA $007a           Fraction >= 6, Add 1 to x pos
0d97: 3a09  STB $fe09           Update fraction
0d98: 0a63  LDB $fe63
0d99: fd02  SBM $0d9b
0d9a: f020  TCA
0d9b: 2206  ADA $fe06
0d9c: 3206  STA $fe06           Update x position
0d9d: 0a64  LDB $fe64           Same for y position
0d9e: c495  JSM $0e95,I
0d9f: 2a0a  ADB $fe0a
0da0: 2892  ADB $0092
0da1: fc03  SBP $0da4
0da2: 28b4  ADB $00b4
0da3: 6fa5  JMP $0da5
0da4: 207a  ADA $007a
0da5: 3a0a  STB $fe0a
0da6: 0a64  LDB $fe64
0da7: fd02  SBM $0da9
0da8: f020  TCA
0da9: 2207  ADA $fe07
0daa: 3207  STA $fe07
0dab: 0a68  LDB $fe68
0dac: 1896  CPB $0096           = 8
0dad: 6c96  JMP $0e96
0dae: 18b6  CPB $00b6           = 7
0daf: 6c25  JMP $0e25
0db0: 02ee  LDA $feee
0db1: 7504  SZA $0db5
0db2: 0095  LDA $0095
0db3: 32ee  STA $feee
0db4: 6f7d  JMP $0d7d
0db5: 02ef  LDA $feef
0db6: 32ee  STA $feee
0db7: 187c  CPB $007c           = 3
0db8: 6ff4  JMP $0df4
0db9: 187b  CPB $007b           = 2
0dba: 6feb  JMP $0deb
0dbb: 187d  CPB $007d           = 5
0dbc: 6c1c  JMP $0e1c
0dbd: 18b4  CPB $00b4           = 6
0dbe: 6c23  JMP $0e23
0dbf: 18ab  CPB $00ab           = 4
0dc0: 6c18  JMP $0e18
*
* (fe68) == 1
* Start
*
0dc1: 0895  LDB $0095
0dc2: 3a08  STB $fe08
0dc3: 3a5d  STB $fe5d
0dc4: 3a5e  STB $fe5e
0dc5: 3a5a  STB $fe5a
0dc6: 0250  LDA $fe50
0dc7: f180  SAL 1
0dc8: 2250  ADA $fe50
0dc9: 3250  STA $fe50
0dca: 0aef  LDB $feef
0dcb: 7c05  RZB $0dd0
0dcc: 455c  JSM $0f5c
0dcd: 7e4f  SLB $0ddc
0dce: 3a4f  STB $fe4f
0dcf: 3250  STA $fe50
0dd0: 007a  LDA $007a
0dd1: 325b  STA $fe5b
0dd2: 325c  STA $fe5c
0dd3: 1278  CPA $fe78
0dd4: 207a  ADA $007a
0dd5: 207a  ADA $007a
0dd6: 3268  STA $fe68
0dd7: 0a5a  LDB $fe5a
0dd8: 025b  LDA $fe5b
0dd9: 455c  JSM $0f5c
0dda: 7e5d  SLB $0df7
0ddb: 3a66  STB $fe66
0ddc: 3267  STA $fe67
0ddd: 455c  JSM $0f5c
0dde: 7e66  SLB $0dc4
0ddf: 4568  JSM $0f68
0de0: fc02  SBP $0de2
0de1: 6c03  JMP $0e03
0de2: 0a5d  LDB $fe5d
0de3: 025e  LDA $fe5e
0de4: 455c  JSM $0f5c
0de5: 7e5a  SLB $0dff
0de6: 3a5d  STB $fe5d
0de7: 325e  STA $fe5e
0de8: 3a5f  STB $fe5f
0de9: 3260  STA $fe60
0dea: 6f7c  JMP $0d7c
*
* (fe68) == 2
*
0deb: 025b  LDA $fe5b
0dec: 325c  STA $fe5c
0ded: 207a  ADA $007a
0dee: 325b  STA $fe5b
0def: 1278  CPA $fe78
0df0: 6ff2  JMP $0df2
0df1: 6fd7  JMP $0dd7
0df2: 087c  LDB $007c           = 3
0df3: 3a68  STB $fe68
*
* (fe68) == 3
*
0df4: 0a5a  LDB $fe5a
0df5: 025b  LDA $fe5b
0df6: 455c  JSM $0f5c           B:A = (fe5a):(fe5b) + (fe5f):(fe60)
0df7: 7e5f  SLB $0e16
0df8: 455c  JSM $0f5c           B:A += (fe5d):(fe5e)
0df9: 7e5d  SLB $0e16
0dfa: 4568  JSM $0f68           B:A = (fe4f):(fe50) - B:A
0dfb: fd08  SBM $0e03           B:A < 0
0dfc: 0a5a  LDB $fe5a
0dfd: 025b  LDA $fe5b
0dfe: 455c  JSM $0f5c           B:A = (fe5a):(fe5b) + (fe5d):(fe5e)
0dff: 7e5d  SLB $0e1c
0e00: 3a5d  STB $fe5d
0e01: 325e  STA $fe5e
0e02: 6f7c  JMP $0d7c
0e03: 0a5d  LDB $fe5d
0e04: 025e  LDA $fe5e
0e05: 455c  JSM $0f5c           B:A = (fe5f):(fe60) + (fe5d):(fe5e)
0e06: 7e5f  SLB $0e25
0e07: 4568  JSM $0f68           B:A = (fe4f):(fe50) - B:A
0e08: 3261  STA $fe61
0e09: f020  TCA
0e0a: 225c  ADA $fe5c
0e0b: f40d  SAP $0e18
0e0c: 0a5b  LDB $fe5b
0e0d: f820  TCB
0e0e: 2a61  ADB $fe61
0e0f: 025b  LDA $fe5b
0e10: fc02  SBP $0e12
0e11: 025c  LDA $fe5c
0e12: 325b  STA $fe5b
0e13: f020  TCA
0e14: 2261  ADA $fe61
0e15: 3261  STA $fe61
0e16: 00ab  LDA $00ab           = 4
0e17: 6c21  JMP $0e21
*
* (fe68) == 4
*
0e18: 025c  LDA $fe5c
0e19: 325b  STA $fe5b
0e1a: 007d  LDA $007d           = 5
0e1b: 6c21  JMP $0e21
*
* (fe68) == 5
*
0e1c: 0261  LDA $fe61
0e1d: 125b  CPA $fe5b
0e1e: 6c20  JMP $0e20
0e1f: 6c23  JMP $0e23
0e20: 00b4  LDA $00b4           = 6
0e21: 3268  STA $fe68
0e22: 6f7c  JMP $0d7c
*
* (fe68) == 6
*
0e23: 5a5b  DSZ $fe5b
0e24: 6f7c  JMP $0d7c
*
* (fe68) == 7
* Deceleration?
*
0e25: 0209  LDA $fe09
0e26: 7505  SZA $0e2b
0e27: 007a  LDA $007a
0e28: 0a57  LDB $fe57
0e29: fd02  SBM $0e2b
0e2a: f020  TCA
0e2b: 3263  STA $fe63
0e2c: 020a  LDA $fe0a
0e2d: 7505  SZA $0e32
0e2e: 007a  LDA $007a
0e2f: 0a58  LDB $fe58
0e30: fd02  SBM $0e32
0e31: f020  TCA
0e32: 3264  STA $fe64
0e33: 6263  IOR $fe63
0e34: 7502  SZA $0e36           Speeds = 0, state -> 0
0e35: 00b6  LDA $00b6           = 7
0e36: 3268  STA $fe68
0e37: 4475  JSM $0e75
0e38: 0276  LDA $fe76
0e39: 3277  STA $fe77
0e3a: 6f7d  JMP $0d7d
*
* Update X/Y speeds and compute values for interpolator
*
0e3b: 0251  LDA $fe51
0e3c: f51b  SAM $0e57
0e3d: 0094  LDA $0094           = fff9
0e3e: 3255  STA $fe55
0e3f: 0085  LDA $0085           = fff8
0e40: 3256  STA $fe56
0e41: 025b  LDA $fe5b
0e42: 0895  LDB $0095
0e43: 7602  SLA $0e45
0e44: 2a51  ADB $fe51
0e45: f140  SAR 1
0e46: 7e02  SLB $0e48
0e47: 609b  IOR $009b           = 8000
0e48: f940  SBR 1
0e49: 4a55  ISZ $fe55
0e4a: 6c43  JMP $0e43
0e4b: f140  SAR 1
0e4c: 7e02  SLB $0e4e
0e4d: 609b  IOR $009b           = 8000
0e4e: f940  SBR 1
0e4f: 4a56  ISZ $fe56
0e50: 6c4b  JMP $0e4b
0e51: 3a62  STB $fe62
0e52: fe81  SEC $0e53,C
0e53: 2208  ADA $fe08
0e54: 3208  STA $fe08
0e55: fe02  SEC $0e57
0e56: 4a62  ISZ $fe62
0e57: 025b  LDA $fe5b
0e58: 0a52  LDB $fe52
0e59: fc0f  SBP $0e68
0e5a: 0a58  LDB $fe58
0e5b: fd02  SBM $0e5d
0e5c: f020  TCA
0e5d: 3264  STA $fe64
0e5e: fd02  SBM $0e60
0e5f: f020  TCA
0e60: 0a51  LDB $fe51
0e61: fd02  SBM $0e63
0e62: 0262  LDA $fe62
0e63: 0a57  LDB $fe57
0e64: fd02  SBM $0e66
0e65: f020  TCA
0e66: 3263  STA $fe63
0e67: 6c75  JMP $0e75
0e68: 0a57  LDB $fe57
0e69: fd02  SBM $0e6b
0e6a: f020  TCA
0e6b: 3263  STA $fe63
0e6c: fd02  SBM $0e6e
0e6d: f020  TCA
0e6e: 0a51  LDB $fe51
0e6f: fd02  SBM $0e71
0e70: 0262  LDA $fe62
0e71: 0a58  LDB $fe58
0e72: fd02  SBM $0e74
0e73: f020  TCA
0e74: 3264  STA $fe64
*
* Compute interpolator values from X/Y speeds
*
0e75: 08ab  LDB $00ab           = 4 Power control = 1
0e76: 0263  LDA $fe63
0e77: 6264  IOR $fe64
0e78: 7402  RZA $0e7a           One of X/Y speeds is not 0
0e79: 0800  LDB $0000(A)        Power control = 0 when both speeds = 0
0e7a: 0263  LDA $fe63
0e7b: f18b  SAL 12
0e7c: 6001  IOR $0001(B)
0e7d: f060  CMA
0e7e: 320b  STA $fe0b           LS part of X speed
0e7f: 0263  LDA $fe63
0e80: f187  SAL 8
0e81: 5494  AND $0e94           = f000
0e82: 207a  ADA $007a           = 1
0e83: 6001  IOR $0001(B)
0e84: f060  CMA
0e85: 320c  STA $fe0c           MS part of X speed
0e86: 0264  LDA $fe64
0e87: f18b  SAL 12
0e88: 207b  ADA $007b           = 2
0e89: 6001  IOR $0001(B)
0e8a: f060  CMA
0e8b: 320d  STA $fe0d           LS part of Y speed
0e8c: 0264  LDA $fe64
0e8d: f187  SAL 8
0e8e: 5494  AND $0e94           = f000
0e8f: 207c  ADA $007c           = 3
0e90: 6001  IOR $0001(B)
0e91: f060  CMA
0e92: 320e  STA $fe0e           MS part of Y speed
0e93: f081  RET 1
0e94: f000  EXE $0000(A),I
0e95: 0b42  LDB $ff42
*
* (fe68) == 8
*
0e96: 0254  LDA $fe54
0e97: 7504  SZA $0e9b
0e98: 207a  ADA $007a
0e99: 3254  STA $fe54
0e9a: 6f7d  JMP $0d7d
0e9b: 0091  LDA $0091           = fffb
0e9c: 3254  STA $fe54
0e9d: 0225  LDA $fe25
0e9e: 7503  SZA $0ea1
0e9f: 0095  LDA $0095
0ea0: 6ca3  JMP $0ea3
0ea1: 0017  LDA $0017
0ea2: f102  AAR 3
0ea3: 3287  STA $fe87
0ea4: 3288  STA $fe88
0ea5: f100  AAR 1
0ea6: 0a82  LDB $fe82
0ea7: 7c0b  RZB $0eb2
0ea8: 0a8f  LDB $fe8f
0ea9: 7c09  RZB $0eb2
0eaa: 7604  SLA $0eae
0eab: 087a  LDB $007a
0eac: 3a83  STB $fe83
0ead: 6cb2  JMP $0eb2
0eae: 0a83  LDB $fe83
0eaf: 7d03  SZB $0eb2
0eb0: 0884  LDB $0084
0eb1: 3a83  STB $fe83
0eb2: f100  AAR 1
0eb3: 0a83  LDB $fe83
0eb4: 7c0b  RZB $0ebf
0eb5: 0a8e  LDB $fe8e
0eb6: 7c09  RZB $0ebf
0eb7: 7604  SLA $0ebb
0eb8: 087a  LDB $007a
0eb9: 3a82  STB $fe82
0eba: 6cbf  JMP $0ebf
0ebb: 0a82  LDB $fe82
0ebc: 7d03  SZB $0ebf
0ebd: 0884  LDB $0084
0ebe: 3a82  STB $fe82
0ebf: f100  AAR 1
0ec0: 0a85  LDB $fe85
0ec1: 7c0b  RZB $0ecc
0ec2: 0a91  LDB $fe91
0ec3: 7c09  RZB $0ecc
0ec4: 7604  SLA $0ec8
0ec5: 087a  LDB $007a
0ec6: 3a84  STB $fe84
0ec7: 6ccc  JMP $0ecc
0ec8: 0a84  LDB $fe84
0ec9: 7d03  SZB $0ecc
0eca: 0884  LDB $0084
0ecb: 3a84  STB $fe84
0ecc: f100  AAR 1
0ecd: 0a84  LDB $fe84
0ece: 7c0b  RZB $0ed9
0ecf: 0a92  LDB $fe92
0ed0: 7c09  RZB $0ed9
0ed1: 7604  SLA $0ed5
0ed2: 087a  LDB $007a
0ed3: 3a85  STB $fe85
0ed4: 6cd9  JMP $0ed9
0ed5: 0a85  LDB $fe85
0ed6: 7d03  SZB $0ed9
0ed7: 0884  LDB $0084
0ed8: 3a85  STB $fe85
0ed9: 0282  LDA $fe82
0eda: 7404  RZA $0ede
0edb: 0283  LDA $fe83
0edc: 7402  RZA $0ede
0edd: 6d08  JMP $0f08
0ede: f402  SAP $0ee0
0edf: 6cfe  JMP $0efe
0ee0: 0206  LDA $fe06
0ee1: 20e4  ADA $00e4
0ee2: f50a  SAM $0eec
0ee3: 0206  LDA $fe06
0ee4: 20e2  ADA $00e2
0ee5: f50d  SAM $0ef2
0ee6: 0a82  LDB $fe82
0ee7: 7d0b  SZB $0ef2
0ee8: 08e0  LDB $00e0
0ee9: 1a06  CPB $fe06
0eea: 6d04  JMP $0f04
0eeb: 6cee  JMP $0eee
0eec: 0a83  LDB $fe83
0eed: 7d05  SZB $0ef2
0eee: 0895  LDB $0095
0eef: 1a06  CPB $fe06
0ef0: 6d04  JMP $0f04
0ef1: 3a87  STB $fe87
0ef2: 0289  LDA $fe89
0ef3: 7508  SZA $0efb
0ef4: 0a87  LDB $fe87
0ef5: 7f04  RLB $0ef9
0ef6: 107a  CPA $007a
0ef7: 6d08  JMP $0f08
0ef8: 6d01  JMP $0f01
0ef9: 10e5  CPA $00e5
0efa: 6d08  JMP $0f08
0efb: 207a  ADA $007a
0efc: 3289  STA $fe89
0efd: 6d08  JMP $0f08
0efe: 0289  LDA $fe89
0eff: 107a  CPA $007a
0f00: 6d04  JMP $0f04
0f01: 2084  ADA $0084
0f02: 3289  STA $fe89
0f03: 6d08  JMP $0f08
0f04: 0095  LDA $0095
0f05: 3289  STA $fe89
0f06: 3282  STA $fe82
0f07: 3283  STA $fe83
0f08: 0284  LDA $fe84
0f09: 7404  RZA $0f0d
0f0a: 0285  LDA $fe85
0f0b: 7402  RZA $0f0d
0f0c: 6d37  JMP $0f37
0f0d: f402  SAP $0f0f
0f0e: 6d2d  JMP $0f2d
0f0f: 0207  LDA $fe07
0f10: 20e4  ADA $00e4
0f11: f50a  SAM $0f1b
0f12: 0207  LDA $fe07
0f13: 20e3  ADA $00e3
0f14: f50d  SAM $0f21
0f15: 0a84  LDB $fe84
0f16: 7d0b  SZB $0f21
0f17: 08e1  LDB $00e1
0f18: 1a07  CPB $fe07
0f19: 6d33  JMP $0f33
0f1a: 6d1d  JMP $0f1d
0f1b: 0a85  LDB $fe85
0f1c: 7d05  SZB $0f21
0f1d: 0895  LDB $0095
0f1e: 1a07  CPB $fe07
0f1f: 6d33  JMP $0f33
0f20: 3a88  STB $fe88
0f21: 028a  LDA $fe8a
0f22: 7508  SZA $0f2a
0f23: 0a88  LDB $fe88
0f24: 7f04  RLB $0f28
0f25: 107a  CPA $007a
0f26: 6d37  JMP $0f37
0f27: 6d30  JMP $0f30
0f28: 10e5  CPA $00e5
0f29: 6d37  JMP $0f37
0f2a: 207a  ADA $007a
0f2b: 328a  STA $fe8a
0f2c: 6d37  JMP $0f37
0f2d: 028a  LDA $fe8a
0f2e: 107a  CPA $007a
0f2f: 6d33  JMP $0f33
0f30: 2084  ADA $0084
0f31: 328a  STA $fe8a
0f32: 6d37  JMP $0f37
0f33: 0095  LDA $0095
0f34: 328a  STA $fe8a
0f35: 3284  STA $fe84
0f36: 3285  STA $fe85
0f37: 0289  LDA $fe89
0f38: 0a82  LDB $fe82
0f39: 7d02  SZB $0f3b
0f3a: f020  TCA
0f3b: 3263  STA $fe63
0f3c: 028a  LDA $fe8a
0f3d: 0a84  LDB $fe84
0f3e: 7d02  SZB $0f40
0f3f: f020  TCA
0f40: 3264  STA $fe64
0f41: 4475  JSM $0e75
0f42: 0263  LDA $fe63
0f43: 6264  IOR $fe64
0f44: 7417  RZA $0f5b
0f45: 3219  STA $fe19
0f46: 3248  STA $fe48
0f47: 3268  STA $fe68
0f48: 022e  LDA $fe2e
0f49: 323d  STA $fe3d
0f4a: 022f  LDA $fe2f
0f4b: 323e  STA $fe3e
0f4c: 0206  LDA $fe06
0f4d: 322e  STA $fe2e
0f4e: 323f  STA $fe3f
0f4f: 0207  LDA $fe07
0f50: 322f  STA $fe2f
0f51: 3240  STA $fe40
0f52: c0cc  JSM $00cc,I
0f53: c0cd  JSM $00cd,I
0f54: 3a3a  STB $fe3a
0f55: 023d  LDA $fe3d
0f56: 322e  STA $fe2e
0f57: 023e  LDA $fe3e
0f58: 322f  STA $fe2f
0f59: 0276  LDA $fe76
0f5a: 3277  STA $fe77
0f5b: 6f7d  JMP $0d7d
*
* B:A += (PTR):(PTR+1)
* PTR is word just after JSM $0f5c
* RET 2
*
0f5c: 3265  STA $fe65
0f5d: c803  ISZ $0003(R),I
0f5e: 8003  LDA $0003(R),I
0f5f: 8000  LDA $0000(A),I
0f60: a800  ADB $0000(A),I
0f61: 207a  ADA $007a
0f62: 8000  LDA $0000(A),I
0f63: fe81  SEC $0f64,C
0f64: 2265  ADA $fe65
0f65: fe02  SEC $0f67
0f66: 287a  ADB $007a
0f67: f081  RET 1
*
* B:A = (fe4f):(fe50) - B:A
*
0f68: f860  CMB
0f69: fe81  SEC $0f6a,C
0f6a: f020  TCA
0f6b: fe02  SEC $0f6d
0f6c: 287a  ADB $007a
0f6d: 455c  JSM $0f5c
0f6e: 7e4f  SLB $0f7d
0f6f: f081  RET 1
0f70: 0299  LDA $fe99
0f71: b0b7  STA $00b7,I
0f72: 00c3  LDA $00c3
0f73: 3003  STA $0003(R)
0f74: 00c0  LDA $00c0
0f75: 08c2  LDB $00c2
0f76: 3a00  STB $fe00
0f77: 0895  LDB $0095
0f78: 207a  ADA $007a
0f79: b800  STB $0000(A),I
0f7a: 4a00  ISZ $fe00
0f7b: 6d78  JMP $0f78
0f7c: 3817  STB $0017
0f7d: 00af  LDA $00af
0f7e: f060  CMA
0f7f: 3012  STA $0012
0f80: 2884  ADB $0084
0f81: 3a0b  STB $fe0b
0f82: 2884  ADB $0084
0f83: 3a0c  STB $fe0c
0f84: 2884  ADB $0084
0f85: 3a0d  STB $fe0d
0f86: 2884  ADB $0084
0f87: 3a0e  STB $fe0e
0f88: 0882  LDB $0082
0f89: 3a6d  STB $fe6d
0f8a: 087a  LDB $007a
0f8b: 3a75  STB $fe75
0f8c: 3a4e  STB $fe4e
0f8d: 0011  LDA $0011
0f8e: f403  SAP $0f91
0f8f: 0299  LDA $fe99
0f90: 10a8  CPA $00a8
0f91: 0895  LDB $0095
0f92: 3a4d  STB $fe4d
0f93: 80b7  LDA $00b7,I
0f94: 50b6  AND $00b6
0f95: 0800  LDB $0000(A)
0f96: 288c  ADB $008c
0f97: fc06  SBP $0f9d
0f98: 0dc3  LDB $0fc3
0f99: 2800  ADB $0000(A)
0f9a: 8001  LDA $0001(B),I
0f9b: 0dbe  LDB $0fbe
0f9c: 6da1  JMP $0fa1
0f9d: 0dc3  LDB $0fc3
0f9e: 2800  ADB $0000(A)
0f9f: 8801  LDB $0001(B),I
0fa0: 05be  LDA $0fbe
0fa1: 324b  STA $fe4b
0fa2: 3a4c  STB $fe4c
0fa3: c0c8  JSM $00c8,I
0fa4: 3015  STA $0015
0fa5: 024b  LDA $fe4b
0fa6: 0a4c  LDB $fe4c
0fa7: f020  TCA
0fa8: f820  TCB
0fa9: f538  SAM $0fa1
0faa: 3200  STA $fe00
0fab: 0011  LDA $0011
0fac: f403  SAP $0faf
0fad: 0299  LDA $fe99
0fae: 10a8  CPA $00a8
0faf: 6dc9  JMP $0fc9
0fb0: 45d6  JSM $0fd6
0fb1: 3a01  STB $fe01
0fb2: c5c4  JSM $0fc4,I
0fb3: 6db8  JMP $0fb8
0fb4: 10a6  CPA $00a6
0fb5: e8db  JMP $00db,I
0fb6: b0b7  STA $00b7,I
0fb7: 6d93  JMP $0f93
0fb8: 0200  LDA $fe00
0fb9: 0a01  LDB $fe01
0fba: 6da1  JMP $0fa1
0fbb: 04ef  LDA $0eef
0fbc: 0277  LDA $fe77
0fbd: 013c  LDA $013c
0fbe: 1f00  CPB $0d00
0fbf: 04ef  LDA $0eef
0fc0: 0277  LDA $fe77
0fc1: 013c  LDA $013c
0fc2: 1f00  CPB $0d00
0fc3: 0fbb  LDB $0dbb
0fc4: 0344  LDA $ff44
0fc5: 00a8  LDA $00a8
0fc6: 3299  STA $fe99
0fc7: 00a5  LDA $00a5
0fc8: 6d71  JMP $0f71
0fc9: 45d6  JSM $0fd6
0fca: 80b7  LDA $00b7,I
0fcb: 207a  ADA $007a
0fcc: b0b7  STA $00b7,I
0fcd: 10a8  CPA $00a8
0fce: 6dd0  JMP $0fd0
0fcf: 6d93  JMP $0f93
0fd0: 4156  JSM $0156
0fd1: 0011  LDA $0011
0fd2: f502  SAM $0fd4
0fd3: edd5  JMP $0fd5,I
0fd4: e8d7  JMP $00d7,I
0fd5: 12d0  CPA $fed0
0fd6: 0268  LDA $fe68
0fd7: 743f  RZA $0fd6
0fd8: f081  RET 1
0fd9: 0011  LDA $0011
0fda: f502  SAM $0fdc
0fdb: eddd  JMP $0fdd,I
0fdc: f081  RET 1
0fdd: 12c3  CPA $fec3
0fde: 0000  NOP
0fdf: 0000  NOP
0fe0: 0000  NOP
0fe1: 0000  NOP
0fe2: 0000  NOP
0fe3: 0000  NOP
0fe4: 0000  NOP
0fe5: 0000  NOP
0fe6: 0000  NOP
0fe7: 0000  NOP
0fe8: 0000  NOP
0fe9: 0000  NOP
0fea: 0000  NOP
0feb: 0000  NOP
0fec: 0000  NOP
0fed: 0000  NOP
0fee: 0000  NOP
0fef: 0000  NOP
0ff0: 0000  NOP
0ff1: 0000  NOP
0ff2: 0000  NOP
0ff3: 0000  NOP
0ff4: 0000  NOP
0ff5: 0000  NOP
0ff6: 0000  NOP
0ff7: 0000  NOP
0ff8: 0000  NOP
0ff9: 0000  NOP
0ffa: 0000  NOP
0ffb: 0000  NOP
0ffc: 0000  NOP
0ffd: 0000  NOP
0ffe: 0000  NOP
0fff: 27a4  ADA $0da4
*
* OE cmd
*
1000: 4128  JSM $0128
1001: 0201  LDA $fe01
1002: 464c  JSM $104c
1003: 0095  LDA $0095           = 0
1004: 3201  STA $fe01           Clear error code
1005: 028b  LDA $fe8b
1006: 5091  AND $0091           = fffb
1007: 414d  JSM $014d           Turn ERROR LED off
1008: 0890  LDB $0090           = ffdf
1009: c0d6  JSM $00d6,I         = 1274 Clear error condition
100a: 6907  JMP $0107
*
* OS cmd
*
100b: 4128  JSM $0128
100c: 0210  LDA $fe10
100d: 0aff  LDB $feff
100e: 1afe  CPB $fefe
100f: 6e11  JMP $1011
1010: 6e14  JMP $1014
1011: 0afd  LDB $fefd
1012: fd02  SBM $1014
1013: 60a1  IOR $00a1           = 0010 Add "ready" bit when buffer is not full
1014: 464c  JSM $104c
1015: 0886  LDB $0086           = fff7
1016: c0d6  JSM $00d6,I         = 1274 Clear initialized condition
1017: 6907  JMP $0107
*
* OP cmd
*
1018: 4128  JSM $0128
1019: 0202  LDA $fe02
101a: 464e  JSM $104e
101b: 0203  LDA $fe03
101c: 464e  JSM $104e
101d: 0204  LDA $fe04
101e: 1202  CPA $fe02
101f: 207a  ADA $007a
1020: 464e  JSM $104e
1021: 0205  LDA $fe05
1022: 1203  CPA $fe03
1023: 207a  ADA $007a
1024: 464c  JSM $104c
1025: 088c  LDB $008c           = fffd
1026: 6e16  JMP $1016           Clear P1/P2 changed condition
*
* OD cmd
*
1027: 4128  JSM $0128
1028: 0891  LDB $0091           = fffb
1029: c0d6  JSM $00d6,I         Clear "digitized point available" condition
102a: 0895  LDB $0095
102b: 3a14  STB $fe14
102c: 028b  LDA $fe8b
102d: 508b  AND $008b
102e: 414d  JSM $014d
102f: 0211  LDA $fe11
1030: 464e  JSM $104e
1031: 0212  LDA $fe12
1032: 464e  JSM $104e
1033: 0213  LDA $fe13
1034: 6e49  JMP $1049
*
* OC cmd
*
1035: 4128  JSM $0128
1036: 02f8  LDA $fef8
1037: 7402  RZA $1039
1038: 6e43  JMP $1043
1039: 0248  LDA $fe48           Scaling enabled
103a: 7505  SZA $103f           Not lost
103b: 00b7  LDA $00b7           = 7fff
103c: 464e  JSM $104e
103d: 00b7  LDA $00b7           = 7fff
103e: 6e46  JMP $1046
103f: 02f2  LDA $fef2
1040: 464e  JSM $104e
1041: 02f3  LDA $fef3
1042: 6e46  JMP $1046
1043: 023f  LDA $fe3f           Scaling not enabled
1044: 464e  JSM $104e
1045: 0240  LDA $fe40
1046: 464e  JSM $104e
1047: 0230  LDA $fe30
1048: 207a  ADA $007a           = 1
1049: 507a  AND $007a           = 1
104a: 464c  JSM $104c           Commanded pen state, 0 = up, 1 = down
104b: 6907  JMP $0107
*
* Send A as decimal no.
*
104c: 0895  LDB $0095           = 0
104d: 6e4f  JMP $104f
104e: 0884  LDB $0084           = ffff
104f: 329c  STA $fe9c
1050: 3aae  STB $feae
1051: 0895  LDB $0095           = 0
1052: 3aad  STB $fead
1053: f405  SAP $1058
1054: f020  TCA
1055: 329c  STA $fe9c
1056: 0687  LDA $1087
1057: 467f  JSM $107f           If A < 0, send '-'
1058: 0689  LDA $1089           = 2710/10000
1059: 466d  JSM $106d
105a: 00bd  LDA $00bd           = 03e8/1000
105b: 466d  JSM $106d
105c: 00bc  LDA $00bc           = 0064/100
105d: 466d  JSM $106d
105e: 007e  LDA $007e           = 000a/10
105f: 466d  JSM $106d
1060: 4aad  ISZ $fead
1061: 029c  LDA $fe9c
1062: 4679  JSM $1079
1063: 00b2  LDA $00b2
1064: 0aae  LDB $feae
1065: 7c04  RZB $1069
1066: 009f  LDA $009f
1067: 467f  JSM $107f
1068: 007e  LDA $007e
1069: 467f  JSM $107f
106a: 08dd  LDB $00dd           = 0107
106b: 3aaa  STB $feaa
106c: f081  RET 1
106d: 0895  LDB $0095           = 0
106e: 3aac  STB $feac
106f: f020  TCA
1070: 0a9c  LDB $fe9c
1071: 2800  ADB $0000(A)
1072: fd03  SBM $1075
1073: 4aac  ISZ $feac
1074: 6e71  JMP $1071
1075: f020  TCA
1076: 2800  ADB $0000(A)
1077: 3a9c  STB $fe9c
1078: 02ac  LDA $feac
1079: 7404  RZA $107d
107a: 0aad  LDB $fead
107b: 7c02  RZB $107d
107c: f081  RET 1
107d: 20b5  ADA $00b5           = '0'
107e: 32ad  STA $fead
107f: 32ac  STA $feac
1080: 0e86  LDB $1086           = 107c
1081: 3aaa  STB $feaa
1082: 0225  LDA $fe25
1083: 7502  SZA $1085
1084: e8df  JMP $00df,I
1085: 6907  JMP $0107
1086: 107c  CPA $007c
1087: 002d  LDA $002d           '-'
1088: 002e  LDA $002e
1089: 2710  ADA $1110
108a: 003e  LDA $003e
108b: 46ac  JSM $10ac
108c: 0299  LDA $fe99
108d: f060  CMA
108e: 3010  STA $0010
108f: f060  CMA
1090: 10a2  CPA $00a2
1091: 6e99  JMP $1099
1092: 1697  CPA $1097
1093: 6e9e  JMP $109e
1094: 1698  CPA $1098
1095: 6ea1  JMP $10a1
1096: e8d7  JMP $00d7,I
1097: 0012  LDA $0012
1098: 0013  LDA $0013
1099: 069d  LDA $109d
109a: 46b3  JSM $10b3
109b: 4730  JSM $1130
109c: e8d7  JMP $00d7,I
109d: 002a  LDA $002a
109e: 06a0  LDA $10a0
109f: 6e9a  JMP $109a
10a0: 0035  LDA $0035
10a1: 009b  LDA $009b
10a2: 474b  JSM $114b
10a3: 06ab  LDA $10ab
10a4: 474f  JSM $114f
10a5: 4745  JSM $1145
10a6: 50a0  AND $00a0           = 007f
10a7: 10ab  CPA $00ab           = 4
10a8: e8d7  JMP $00d7,I
10a9: 4aaf  ISZ $feaf
10aa: 6f38  JMP $1138
10ab: 0c00  LDB $1200
10ac: 0095  LDA $0095
10ad: 32af  STA $feaf
10ae: 00b3  LDA $00b3
10af: 474b  JSM $114b
10b0: 0095  LDA $0095
10b1: 474f  JSM $114f
10b2: f081  RET 1
10b3: 474b  JSM $114b
10b4: 009c  LDA $009c
10b5: 474f  JSM $114f
10b6: 070f  LDA $110f
10b7: 474f  JSM $114f
10b8: 0095  LDA $0095
10b9: 474f  JSM $114f
10ba: f081  RET 1
10bb: 3010  STA $0010
10bc: 3014  STA $0014
10bd: 00c4  LDA $00c4
10be: 3003  STA $0003(R)
10bf: 46ac  JSM $10ac
10c0: 0012  LDA $0012
10c1: 08aa  LDB $00aa
10c2: 41b9  JSM $01b9
10c3: 088a  LDB $008a
10c4: 3a27  STB $fe27
10c5: 4aaf  ISZ $feaf
10c6: f50f  SAM $10d5
10c7: f180  SAL 1
10c8: 4a27  ISZ $fe27
10c9: 6ec5  JMP $10c5
10ca: 00a3  LDA $00a3
10cb: 474b  JSM $114b
10cc: 0894  LDB $0094
10cd: 3a27  STB $fe27
10ce: fec0  SEC $10ce,S
10cf: 007a  LDA $007a
10d0: 3228  STA $fe28
10d1: 4713  JSM $1113
10d2: 4aaf  ISZ $feaf
10d3: 1228  CPA $fe28
10d4: 6ed6  JMP $10d6
10d5: 6f38  JMP $1138
10d6: f180  SAL 1
10d7: 4a27  ISZ $fe27
10d8: 6ed0  JMP $10d0
10d9: 00ae  LDA $00ae
10da: 474b  JSM $114b
10db: 070e  LDA $110e
10dc: 4742  JSM $1142
10dd: 0800  LDB $0000(A)
10de: 4aaf  ISZ $feaf
10df: f184  SAL 5
10e0: f406  SAP $10e6
10e1: 00a0  LDA $00a0
10e2: 5001  AND $0001(B)
10e3: 4aaf  ISZ $feaf
10e4: 10b2  CPA $00b2
10e5: 6ee7  JMP $10e7
10e6: 6f38  JMP $1138
10e7: 00a4  LDA $00a4
10e8: 4742  JSM $1142
10e9: 4aaf  ISZ $feaf
10ea: f181  SAL 2
10eb: f43b  SAP $10e6
10ec: 0095  LDA $0095
10ed: 4742  JSM $1142
10ee: 4aaf  ISZ $feaf
10ef: f181  SAL 2
10f0: f536  SAM $10e6
10f1: 4730  JSM $1130
10f2: 00b9  LDA $00b9
10f3: 46b3  JSM $10b3
10f4: 00ab  LDA $00ab
10f5: 46b3  JSM $10b3
10f6: 4745  JSM $1145
10f7: 4aaf  ISZ $feaf
10f8: f511  SAM $1109
10f9: 007f  LDA $007f
10fa: 4731  JSM $1131
10fb: 009a  LDA $009a
10fc: 4742  JSM $1142
10fd: 4aaf  ISZ $feaf
10fe: f183  SAL 4
10ff: f40a  SAP $1109
1100: 0711  LDA $1111
1101: 46b3  JSM $10b3
1102: 00a8  LDA $00a8
1103: 474f  JSM $114f
1104: 4745  JSM $1145
1105: 4aaf  ISZ $feaf
1106: 50a0  AND $00a0           = 007f
1107: 109d  CPA $009d           = 005f '_'
1108: 6f0a  JMP $110a
1109: 6f38  JMP $1138
110a: 0011  LDA $0011
110b: f502  SAM $110d
110c: e8d8  JMP $00d8,I
110d: ef41  JMP $1141,I
110e: 602c  IOR $002c
110f: 9400  CPA $1200,I
1110: 0800  LDB $0000(A)
1111: 1018  CPA $0018
1112: 9000  CPA $0000(A),I
1113: 60b0  IOR $00b0
1114: 4742  JSM $1142
1115: fe02  SEC $1117
1116: 4aaf  ISZ $feaf
1117: f180  SAL 1
1118: f531  SAM $1109
1119: fe02  SEC $111b
111a: 4aaf  ISZ $feaf
111b: f184  SAL 5
111c: f42d  SAP $1109
111d: 0712  LDA $1112
111e: 474f  JSM $114f
111f: 4745  JSM $1145
1120: 3229  STA $fe29
1121: fe02  SEC $1123
1122: 4aaf  ISZ $feaf
1123: f180  SAL 1
1124: f414  SAP $1138
1125: 0095  LDA $0095
1126: 4742  JSM $1142
1127: fe82  SEC $1129,C
1128: 4aaf  ISZ $feaf
1129: f186  SAL 7
112a: f40e  SAP $1138
112b: 0095  LDA $0095
112c: 474f  JSM $114f
112d: 0229  LDA $fe29
112e: 50a0  AND $00a0
112f: f081  RET 1
1130: 00ab  LDA $00ab
1131: 46b3  JSM $10b3
1132: 4aaf  ISZ $feaf
1133: 4745  JSM $1145
1134: f404  SAP $1138
1135: 0710  LDA $1110
1136: 474b  JSM $114b
1137: f081  RET 1
1138: 7482  SFS $113a
1139: 6ebc  JMP $10bc
113a: 0095  LDA $0095
113b: 4156  JSM $0156
113c: 7480  SFS $113c
113d: 4156  JSM $0156
113e: 7c82  SSS $1140
113f: e8d8  JMP $00d8,I
1140: ef41  JMP $1141,I
1141: 0327  LDA $ff27
1142: 474b  JSM $114b
1143: 4745  JSM $1145
1144: f081  RET 1
*
* A = R22 ^ 0x3300
*
1145: 0012  LDA $0012
1146: 0f49  LDB $1149           = 3300
1147: 41b9  JSM $01b9
1148: f081  RET 1
1149: 3300  STA $ff00
* Set W22 = A
114a: 3300  STA $ff00
114b: f060  CMA
114c: 3012  STA $0012
114d: f081  RET 1
* Set W21 = A
114e: 3210  STA $fe10
114f: f060  CMA
1150: 3011  STA $0011
1151: f081  RET 1
*
* Handle HPIB
*
1152: 4745  JSM $1145
1153: f411  SAP $1164
1154: 0301  LDA $ff01           Clear cmd from hpib: DCL/SDC/IFC
1155: 32ff  STA $feff
1156: 32fe  STA $fefe
1157: 007a  LDA $007a           = 1
1158: 32fd  STA $fefd
1159: 08a1  LDB $00a1           = 0010
115a: 4474  JSM $1274           Set "ready for data" condition
115b: 4444  JSM $1244
115c: 00af  LDA $00af           = 0800
115d: 6300  IOR $ff00
115e: 474b  JSM $114b           Reset clear cmd
115f: 0300  LDA $ff00
1160: 54f4  AND $12f4           = df80
1161: 474a  JSM $114a           Clear nba
1162: 0095  LDA $0095           = 0
1163: 32ac  STA $feac
1164: 0aa0  LDB $fea0
1165: 187b  CPB $007b           = 2
1166: 6f68  JMP $1168
1167: 6f7e  JMP $117e
1168: 6d55  JMP $1355           Redo parsing of the character after command 2nd char
1169: 0aac  LDB $feac
116a: 7c02  RZB $116c           Data to be sent available
116b: 6f94  JMP $1194
116c: 4745  JSM $1145
116d: f182  SAL 3
116e: f407  SAP $1175
116f: 0300  LDA $ff00
1170: 6099  IOR $0099           = 0200
1171: 474b  JSM $114b
1172: 0300  LDA $ff00
1173: 60ae  IOR $00ae           = 0100
1174: 474b  JSM $114b           Set TALK
1175: 0300  LDA $ff00
1176: 54f5  AND $12f5           = ff80
1177: 62ac  IOR $feac
1178: 474a  JSM $114a           Set output data
1179: 0300  LDA $ff00
117a: 60a4  IOR $00a4           = 2000
117b: 474a  JSM $114a           Set nba
117c: 0095  LDA $0095           = 0
117d: 32ac  STA $feac
117e: 4745  JSM $1145
117f: f181  SAL 2
1180: f429  SAP $1169           ths == 0
1181: 02fb  LDA $fefb
1182: 7502  SZA $1184
1183: f081  RET 1
1184: 04f4  LDA $12f4           = df80
1185: 5300  AND $ff00
1186: 474a  JSM $114a           Clear nba
1187: 4745  JSM $1145
1188: f182  SAL 3
1189: f407  SAP $1190
118a: 0300  LDA $ff00
118b: 6099  IOR $0099
118c: 474b  JSM $114b
118d: 0300  LDA $ff00
118e: 60a3  IOR $00a3
118f: 474b  JSM $114b
1190: 5803  DSZ $0003(R)
1191: 0793  LDA $1193           = 6936
1192: eaaa  JMP $feaa,I
1193: 6936  JMP $0136
1194: 0300  LDA $ff00
1195: f180  SAL 1
1196: f508  SAM $119e
1197: 4745  JSM $1145
1198: f180  SAL 1
1199: f402  SAP $119b
119a: 6d5a  JMP $135a
119b: 0300  LDA $ff00
119c: 60b0  IOR $00b0           = 4000
119d: 474a  JSM $114a
119e: 4745  JSM $1145
119f: f1cd  RAR 14
11a0: 7702  RLA $11a2           Jump if rhs=1
11a1: 6d5a  JMP $135a
11a2: f1c1  RAR 2
11a3: f502  SAM $11a5
11a4: 44f6  JSM $12f6
11a5: f081  RET 1
11a6: 6d31  JMP $1331
*
* Parse char in (feab)
*
11a7: 02ab  LDA $feab
11a8: 0a29  LDB $fe29
11a9: 7d02  SZB $11ab
11aa: 6c39  JMP $1239
11ab: 0aa0  LDB $fea0
11ac: 187a  CPB $007a           = 1
11ad: 6fc2  JMP $11c2
11ae: 10ac  CPA $00ac           = ' '
11af: f081  RET 1
11b0: 109f  CPA $009f           = \r
11b1: f081  RET 1
11b2: 107e  CPA $007e           \n
11b3: 6fca  JMP $11ca
11b4: 10b8  CPA $00b8           ';'
11b5: 6fca  JMP $11ca
11b6: 0895  LDB $0095           = 0
11b7: 3a2a  STB $fe2a
11b8: 0a9d  LDB $fe9d
11b9: 7c36  RZB $11af
11ba: 0aa0  LDB $fea0
11bb: fc02  SBP $11bd
11bc: 6fe4  JMP $11e4           1st char of command
11bd: 7c02  RZB $11bf
11be: 6fed  JMP $11ed           2nd char of command
11bf: 187a  CPB $007a           = 1
11c0: 6fc6  JMP $11c6
11c1: 6ff0  JMP $11f0
11c2: 0a2b  LDB $fe2b
11c3: 184c  CPB $004c           "LB"
11c4: 6fc6  JMP $11c6
11c5: 6fae  JMP $11ae
11c6: 4aa0  ISZ $fea0
11c7: 3a9e  STB $fe9e
11c8: 022b  LDA $fe2b
11c9: e8d4  JMP $00d4,I         = 0570 Exec cmd
*
* Param(s) terminated
*
11ca: 0a2a  LDB $fe2a
11cb: 7d02  SZB $11cd
11cc: f081  RET 1
11cd: 287a  ADB $007a           = 1
11ce: 3a2a  STB $fe2a
11cf: 0884  LDB $0084           = ffff
11d0: 3aa0  STB $fea0
11d1: 0a9e  LDB $fe9e
11d2: 7d36  SZB $11c8
11d3: 0895  LDB $0095           = 0
11d4: 3a9e  STB $fe9e
11d5: 3a9f  STB $fe9f
11d6: 0aa7  LDB $fea7
11d7: 7c09  RZB $11e0
11d8: 0a9d  LDB $fe9d
11d9: 7c09  RZB $11e2
11da: 0aa6  LDB $fea6
11db: 7d02  SZB $11dd
11dc: 6c22  JMP $1222
11dd: 007b  LDA $007b
11de: 413b  JSM $013b           Set error 2 (wrong number of params)
11df: 6fe2  JMP $11e2
11e0: 007c  LDA $007c           = 3
11e1: 413b  JSM $013b           Set error 3 (bad param)
11e2: 444d  JSM $124d
11e3: 6936  JMP $0136
11e4: 509d  AND $009d           = 005f -> force uppercase
11e5: 1097  CPA $0097           = 004f 'O'
11e6: 6c6a  JMP $126a
11e7: f1c7  RAR 8
11e8: 322b  STA $fe2b
11e9: 02a0  LDA $fea0
11ea: 207a  ADA $007a           = 1
11eb: 32a0  STA $fea0
11ec: f081  RET 1
11ed: 509d  AND $009d           = 005f
11ee: 222b  ADA $fe2b
11ef: 6fe8  JMP $11e8
*
* Parse parameter(s)
*
11f0: 10b2  CPA $00b2           ','
11f1: 6c1d  JMP $121d
11f2: 10b1  CPA $00b1           '+'
11f3: 6c2b  JMP $122b
11f4: 1687  CPA $1087           '-'
11f5: 6c29  JMP $1229
11f6: 1688  CPA $1088           '.'
11f7: 6c32  JMP $1232
11f8: 4404  JSM $1204
11f9: ff02  SES $11fb           Jump if digit
11fa: 6c40  JMP $1240
11fb: 5098  AND $0098           = 0xf
11fc: 087a  LDB $007a           = 1
11fd: 3aa6  STB $fea6           At least one digit parsed
11fe: 0a28  LDB $fe28
11ff: 7d04  SZB $1203
1200: 0aa3  LDB $fea3
1201: 7c0c  RZB $120d
1202: f1c7  RAR 8
1203: 6c59  JMP $1259
*
* On exit: E=1 iff 0x30 <= A <= 0x39
*
1204: 0800  LDB $0000(A)
1205: 2893  ADB $0093           -0x30
1206: fd05  SBM $120b
1207: 2887  ADB $0087           -10
1208: fc03  SBP $120b
1209: fec1  SEC $120a,S
120a: f081  RET 1
120b: fe81  SEC $120c,C
120c: f081  RET 1
*
* Decimal digit parsed
*
120d: 0aa5  LDB $fea5
120e: 18ab  CPB $00ab           = 4
120f: f081  RET 1               Decimal digits beyond 3rd are ignored
1210: f1c7  RAR 8
1211: 0aa4  LDB $fea4
1212: 3acb  STB $fecb
1213: 0895  LDB $0095
1214: 4160  JSM $0160
1215: 229b  ADA $fe9b
1216: 329b  STA $fe9b           fe9b += digit // fea4
1217: 4aa5  ISZ $fea5
1218: 02a4  LDA $fea4
1219: 087e  LDB $007e           = 000a
121a: 4193  JSM $0193
121b: 32a4  STA $fea4           fea4 *= 10
121c: f081  RET 1
*
* Comma parsed
*
121d: 0a9e  LDB $fe9e
121e: 7d03  SZB $1221           Comma with no param: error 3
121f: 0aa6  LDB $fea6
1220: 7c02  RZB $1222
1221: 6c40  JMP $1240           Param with no digit: error 3
1222: 0a9b  LDB $fe9b
1223: 02a2  LDA $fea2
1224: 7502  SZA $1226
1225: f820  TCB
1226: 3a2b  STB $fe2b
1227: 444d  JSM $124d
1228: 6c3e  JMP $123e
*
* Negative sign parsed
*
1229: 087a  LDB $007a           = 1
122a: 3aa2  STB $fea2
*
* Positive sign parsed
*
122b: 0aa1  LDB $fea1
122c: 7c35  RZB $1221           Two or more signs
122d: 02a6  LDA $fea6
122e: 7433  RZA $1221           Sign after digit(s)
122f: 287a  ADB $007a           = 1
1230: 3aa1  STB $fea1
1231: f081  RET 1
*
* Point parsed
*
1232: 0a28  LDB $fe28
1233: 7d0d  SZB $1240           Decimal number not allowed
1234: 0aa3  LDB $fea3
1235: 7c0b  RZB $1240           More than 1 point
1236: 287a  ADB $007a           = 1
1237: 3aa3  STB $fea3
1238: f081  RET 1
*
* "LB" character parsed
*
1239: 322b  STA $fe2b
123a: 0895  LDB $0095           = 0
123b: 3a9e  STB $fe9e
123c: 0884  LDB $0084           = ffff
123d: 3aa0  STB $fea0
123e: 5803  DSZ $0003(R)
123f: ea00  JMP $fe00,I
*
* Set deferred error 3
*
1240: 087a  LDB $007a           = 1
1241: 3a9d  STB $fe9d
1242: 3aa7  STB $fea7
1243: f081  RET 1
*
* Reset parsing
*
1244: 0084  LDA $0084           = ffff
1245: 32a0  STA $fea0
1246: 007a  LDA $007a           = 1
1247: 322a  STA $fe2a
1248: 444d  JSM $124d
1249: 3a9e  STB $fe9e
124a: 3a9d  STB $fe9d
124b: 3a29  STB $fe29
124c: f081  RET 1
*
* Prepare to parse a parameter
*
124d: 087e  LDB $007e           = 000a
124e: 3aa4  STB $fea4
124f: 0895  LDB $0095           = 0
1250: 3a9b  STB $fe9b
1251: 3aa5  STB $fea5
1252: 3aa1  STB $fea1
1253: 3aa2  STB $fea2
1254: 3aa3  STB $fea3
1255: 3aa6  STB $fea6
1256: 3aa7  STB $fea7
1257: 3a9d  STB $fe9d
1258: f081  RET 1
*
* Digit parsed
*
1259: 32cb  STA $fecb
125a: 007e  LDA $007e           = 000a
125b: 0a9b  LDB $fe9b
125c: 4193  JSM $0193
125d: 7c07  RZB $1264
125e: f506  SAM $1264
125f: f681  SOC $1260,C
1260: 22cb  ADA $fecb
1261: 329b  STA $fe9b
1262: f702  SOS $1264
1263: f081  RET 1
1264: 0247  LDA $fe47
1265: 7402  RZA $1267
1266: 6c40  JMP $1240
1267: 0084  LDA $0084           = ffff
1268: 3247  STA $fe47
1269: f081  RET 1
126a: 8003  LDA $0003(R),I
126b: 08c4  LDB $00c4           = 7f02
126c: 287a  ADB $007a           = 1
126d: b001  STA $0001(B),I
126e: 3803  STB $0003(R)
126f: 04f4  LDA $12f4           = df80
1270: 5300  AND $ff00
1271: 474a  JSM $114a           Clear nba
1272: 0097  LDA $0097           = 004f
1273: 6fe7  JMP $11e7
*
* Set condition bitmapped in B if (B & 0x8000) == 0
* Reset condition in ~B if (B & 0x8000) != 0
*
1274: 18a1  CPB $00a1           = 0010
1275: 6c77  JMP $1277
1276: 6c7b  JMP $127b
1277: 0210  LDA $fe10
1278: 5001  AND $0001(B)
1279: 7502  SZA $127b           Don't set ready condition twice
127a: f081  RET 1
127b: 0210  LDA $fe10
127c: fd13  SBM $128f
127d: 6001  IOR $0001(B)
127e: 474e  JSM $114e           Set status byte
127f: 0210  LDA $fe10
1280: 5217  AND $fe17           P-mask
1281: 7506  SZA $1287
1282: 62a8  IOR $fea8
1283: 32a8  STA $fea8
1284: 0300  LDA $ff00
1285: 609b  IOR $009b           = 8000
1286: 474a  JSM $114a           Set ppe
1287: 0210  LDA $fe10
1288: 5216  AND $fe16           S-mask
1289: 7517  SZA $12a0
128a: 62a9  IOR $fea9
128b: 32a9  STA $fea9
128c: 0300  LDA $ff00
128d: 609a  IOR $009a           = 1000
128e: 6c9f  JMP $129f           Set rsv
128f: 5001  AND $0001(B)
1290: 474e  JSM $114e           Set status byte
1291: 02a8  LDA $fea8
1292: 5001  AND $0001(B)
1293: 32a8  STA $fea8
1294: 7404  RZA $1298
1295: 00b7  LDA $00b7           = 7fff
1296: 5300  AND $ff00
1297: 474a  JSM $114a           Clear ppe
1298: 02a9  LDA $fea9
1299: 5001  AND $0001(B)
129a: 32a9  STA $fea9
129b: 7405  RZA $12a0
129c: 009a  LDA $009a           = 1000
129d: f060  CMA
129e: 5300  AND $ff00
129f: 474a  JSM $114a           Clear rsv
12a0: f081  RET 1
12a1: 3010  STA $0010
12a2: 0084  LDA $0084
12a3: 3224  STA $fe24
12a4: 0095  LDA $0095
12a5: 3003  STA $0003(R)
12a6: 3015  STA $0015
12a7: 6ca7  JMP $12a7
12a8: 0015  LDA $0015
12a9: 0095  LDA $0095
12aa: 3224  STA $fe24
12ab: 3010  STA $0010
12ac: 5803  DSZ $0003(R)
12ad: 6cbc  JMP $12bc
12ae: 4803  ISZ $0003(R)
12af: 04b2  LDA $12b2
12b0: b003  STA $0003(R),I
12b1: f080  RET 0
12b2: 12b3  CPA $feb3
12b3: 3010  STA $0010
12b4: 0003  LDA $0003(R)
12b5: 7506  SZA $12bb
12b6: 7580  SFC $12b6
12b7: 0095  LDA $0095
12b8: 4156  JSM $0156
12b9: 7480  SFS $12b9
12ba: 4156  JSM $0156
12bb: 6ebb  JMP $10bb
12bc: 7580  SFC $12bc
12bd: 0095  LDA $0095
12be: 4156  JSM $0156
12bf: 7480  SFS $12bf
12c0: 4156  JSM $0156
12c1: 3003  STA $0003(R)
12c2: 6cae  JMP $12ae
12c3: 44c5  JSM $12c5
12c4: ecd5  JMP $12d5,I
12c5: 00e6  LDA $00e6
12c6: 324b  STA $fe4b
12c7: 84d6  LDA $12d6,I
12c8: 324c  STA $fe4c
12c9: 007a  LDA $007a
12ca: 324d  STA $fe4d
12cb: 0095  LDA $0095
12cc: 324e  STA $fe4e
12cd: c0c8  JSM $00c8,I
12ce: 4159  JSM $0159
12cf: 6956  JMP $0156
12d0: 068a  LDA $108a
12d1: 3017  STA $0017
12d2: 0011  LDA $0011
12d3: f43f  SAP $12d2
12d4: e8d5  JMP $00d5,I
12d5: 0369  LDA $ff69
12d6: 0650  LDA $1050
*
* IM cmd
*
12d7: 022a  LDA $fe2a
12d8: 7410  RZA $12e8           No parameters: use default
12d9: 087b  LDB $007b           = 2
12da: 4123  JSM $0123
12db: 44ef  JSM $12ef
12dc: 3218  STA $fe18           E-mask
12dd: 022a  LDA $fe2a
12de: 7410  RZA $12ee
12df: 4124  JSM $0124
12e0: 44ef  JSM $12ef
12e1: 3216  STA $fe16
12e2: 022a  LDA $fe2a
12e3: 740b  RZA $12ee
12e4: 087b  LDB $007b
12e5: 4111  JSM $0111
12e6: 44ef  JSM $12ef
12e7: 6ced  JMP $12ed
12e8: 00f6  LDA $00f6           = 00df
12e9: 3218  STA $fe18
12ea: 00f8  LDA $00f8           = 0
12eb: 3216  STA $fe16
12ec: 00f7  LDA $00f7           = 0
12ed: 3217  STA $fe17
12ee: 690a  JMP $010a
*
* Check that 0 <= B <= 0xff
*
12ef: fd03  SBM $12f2
12f0: 288f  ADB $008f           = ff00
12f1: fd02  SBM $12f3
12f2: 692f  JMP $012f           Bad param
12f3: f081  RET 1
12f4: df80  DSZ $1180,I
12f5: ff80  SES $12f5,C
*
* Byte in A received from HPIB
*
12f6: 0afd  LDB $fefd
12f7: 7f06  RLB $12fd
12f8: 0afb  LDB $fefb
12f9: 7c03  RZB $12fc
12fa: 5803  DSZ $0003(R)
12fb: 6fa6  JMP $11a6
12fc: f081  RET 1
12fd: 0afe  LDB $fefe
12fe: 1aff  CPB $feff
12ff: 6d21  JMP $1321           Circ. buffer FULL?
1300: 50a0  AND $00a0           = 007f
1301: 0afc  LDB $fefc
1302: 7e0e  SLB $1310
1303: fd04  SBM $1307
1304: 152f  CPA $132f           = '.'
1305: 6d0c  JMP $130c
1306: 6d09  JMP $1309
1307: 1530  CPA $1330           = '^'
1308: 6d4e  JMP $134e
1309: 0095  LDA $0095           = 0
130a: 32fc  STA $fefc
130b: 6d2a  JMP $132a
130c: 009b  LDA $009b
130d: 32fc  STA $fefc           = 8000
130e: 4afc  ISZ $fefc
130f: 6d2a  JMP $132a
1310: 10a6  CPA $00a6           = 001b
1311: 6d0e  JMP $130e
1312: b2fe  STA $fefe,I
1313: 0210  LDA $fe10
1314: 50a1  AND $00a1           = 0010
1315: 7504  SZA $1319
1316: 0210  LDA $fe10
1317: 088b  LDB $008b           = feff
1318: 4474  JSM $1274
1319: 0afe  LDB $fefe
131a: 1d4d  CPB $134d           = 7c00
131b: 6d1e  JMP $131e
131c: 5afe  DSZ $fefe
131d: 6d27  JMP $1327
131e: 0301  LDA $ff01
131f: 32fe  STA $fefe           Wrap-around IN ptr
1320: 6d27  JMP $1327
1321: 0afd  LDB $fefd
1322: fd02  SBM $1324
1323: 6d00  JMP $1300
1324: 009b  LDA $009b           = 8000
1325: 32fd  STA $fefd           Buffer is full
1326: f081  RET 1
1327: 009b  LDA $009b           = 8000
1328: 32fd  STA $fefd
1329: 4afd  ISZ $fefd
132a: 0300  LDA $ff00
132b: 08b0  LDB $00b0           = 4000
132c: 41b9  JSM $01b9
132d: 474a  JSM $114a           Complement b14 of W22 (rdy)
132e: f081  RET 1
132f: 002e  LDA $002e
1330: 005e  LDA $005e
*
* Dequeue a char from circ. buffer & parse
*
1331: 0aff  LDB $feff
1332: 1afe  CPB $fefe
1333: 6d3d  JMP $133d
1334: 82ff  LDA $feff,I
1335: 32ab  STA $feab
1336: 1d4d  CPB $134d           = 7c00
1337: 6d3a  JMP $133a
1338: 5aff  DSZ $feff
1339: 6d43  JMP $1343
133a: 0b01  LDB $ff01
133b: 3aff  STB $feff
133c: 6d43  JMP $1343
133d: 02fd  LDA $fefd
133e: f536  SAM $1334           Buffer FULL
133f: 007a  LDA $007a           = 1
1340: 32fd  STA $fefd
1341: 08a1  LDB $00a1           = 0010
1342: 6c74  JMP $1274           Set "ready for data"
1343: 02fd  LDA $fefd
1344: 7604  SLA $1348
1345: 507a  AND $007a           = 1
1346: 32fd  STA $fefd
1347: 6fa7  JMP $11a7
1348: 007a  LDA $007a           = 1
1349: 32fd  STA $fefd
134a: 4745  JSM $1145
134b: 44f6  JSM $12f6
134c: 6fa7  JMP $11a7

134d: 7c00  RZB $134d
*
* \x1b.^ command: set circular buffer size to 512 bytes (?)
*
134e: 452a  JSM $132a
134f: 00c1  LDA $00c1           = 7c00
1350: 20ba  ADA $00ba           = 01ff
1351: 3301  STA $ff01
1352: 0095  LDA $0095
1353: 32fc  STA $fefc
1354: f081  RET 1
1355: 02fb  LDA $fefb
1356: 7403  RZA $1359
1357: 4aa0  ISZ $fea0           2 -> 3
1358: 6fa7  JMP $11a7
1359: f081  RET 1
135a: 02fb  LDA $fefb
135b: 7402  RZA $135d
135c: 6fa6  JMP $11a6
135d: f081  RET 1
135e: 0000  NOP
135f: 0000  NOP
1360: 0000  NOP
1361: 0000  NOP
1362: 0000  NOP
1363: 0000  NOP
1364: 0000  NOP
1365: 0000  NOP
1366: 0000  NOP
1367: 0000  NOP
1368: 0000  NOP
1369: 0000  NOP
136a: 0000  NOP
136b: 0000  NOP
136c: 0000  NOP
136d: 0000  NOP
136e: 0000  NOP
136f: 0000  NOP
1370: 0000  NOP
1371: 0000  NOP
1372: 0000  NOP
1373: 0000  NOP
1374: 0000  NOP
1375: 0000  NOP
1376: 0000  NOP
1377: 0000  NOP
1378: 0000  NOP
1379: 0000  NOP
137a: 0000  NOP
137b: 0000  NOP
137c: 0000  NOP
137d: 0000  NOP
137e: 0000  NOP
137f: 0000  NOP
1380: 0000  NOP
1381: 0000  NOP
1382: 0000  NOP
1383: 0000  NOP
1384: 0000  NOP
1385: 0000  NOP
1386: 0000  NOP
1387: 0000  NOP
1388: 0000  NOP
1389: 0000  NOP
138a: 0000  NOP
138b: 0000  NOP
138c: 0000  NOP
138d: 0000  NOP
138e: 0000  NOP
138f: 0000  NOP
1390: 0000  NOP
1391: 0000  NOP
1392: 0000  NOP
1393: 0000  NOP
1394: 0000  NOP
1395: 0000  NOP
1396: 0000  NOP
1397: 0000  NOP
1398: 0000  NOP
1399: 0000  NOP
139a: 0000  NOP
139b: 0000  NOP
139c: 0000  NOP
139d: 0000  NOP
139e: 0000  NOP
139f: 0000  NOP
13a0: 0000  NOP
13a1: 0000  NOP
13a2: 0000  NOP
13a3: 0000  NOP
13a4: 0000  NOP
13a5: 0000  NOP
13a6: 0000  NOP
13a7: 0000  NOP
13a8: 0000  NOP
13a9: 0000  NOP
13aa: 0000  NOP
13ab: 0000  NOP
13ac: 0000  NOP
13ad: 0000  NOP
13ae: 0000  NOP
13af: 0000  NOP
13b0: 0000  NOP
13b1: 0000  NOP
13b2: 0000  NOP
13b3: 0000  NOP
13b4: 0000  NOP
13b5: 0000  NOP
13b6: 0000  NOP
13b7: 0000  NOP
13b8: 0000  NOP
13b9: 0000  NOP
13ba: 0000  NOP
13bb: 0000  NOP
13bc: 0000  NOP
13bd: 0000  NOP
13be: 0000  NOP
13bf: 0000  NOP
13c0: 0000  NOP
13c1: 0000  NOP
13c2: 0000  NOP
13c3: 0000  NOP
13c4: 0000  NOP
13c5: 0000  NOP
13c6: 0000  NOP
13c7: 0000  NOP
13c8: 0000  NOP
13c9: 0000  NOP
13ca: 0000  NOP
13cb: 0000  NOP
13cc: 0000  NOP
13cd: 0000  NOP
13ce: 0000  NOP
13cf: 0000  NOP
13d0: 0000  NOP
13d1: 0000  NOP
13d2: 0000  NOP
13d3: 0000  NOP
13d4: 0000  NOP
13d5: 0000  NOP
13d6: 0000  NOP
13d7: 0000  NOP
13d8: 0000  NOP
13d9: 0000  NOP
13da: 0000  NOP
13db: 0000  NOP
13dc: 0000  NOP
13dd: 0000  NOP
13de: 0000  NOP
13df: 0000  NOP
13e0: 0000  NOP
13e1: 0000  NOP
13e2: 0000  NOP
13e3: 0000  NOP
13e4: 0000  NOP
13e5: 0000  NOP
13e6: 0000  NOP
13e7: 0000  NOP
13e8: 0000  NOP
13e9: 0000  NOP
13ea: 0000  NOP
13eb: 0000  NOP
13ec: 0000  NOP
13ed: 0000  NOP
13ee: 0000  NOP
13ef: 0000  NOP
13f0: 0000  NOP
13f1: 0000  NOP
13f2: 0000  NOP
13f3: 0000  NOP
13f4: 0000  NOP
13f5: 0000  NOP
13f6: 0000  NOP
13f7: 0000  NOP
13f8: 0000  NOP
13f9: 0000  NOP
13fa: 0000  NOP
13fb: 0000  NOP
13fc: 0000  NOP
13fd: 0000  NOP
13fe: 0000  NOP
13ff: 0000  NOP
1400: fe02  SEC $1402
1401: 287a  ADB $007a           = 1
1402: 2ad8  ADB $fed8
1403: 6e07  JMP $1407
1404: fe02  SEC $1406
1405: 287a  ADB $007a           = 1
1406: 2ad6  ADB $fed6
1407: f684  SOC $140b,C
1408: f90e  ABR 15
1409: 0001  LDA $0001(B)
140a: 289b  ADB $009b           = 8000
140b: f082  RET 2
140c: 0096  LDA $0096           = 8
140d: 32e6  STA $fee6
140e: 6ee1  JMP $14e1
*
* LB cmd
*
140f: 0084  LDA $0084           = ffff
1410: 32f9  STA $fef9           Request inverse scaling when cmd ends
1411: 007a  LDA $007a           = 1
1412: 3229  STA $fe29           Enable string parsing
1413: 4100  JSM $0100           Get string parameter
1414: 007c  LDA $007c           = 3
1415: 122b  CPA $fe2b
1416: 6e5b  JMP $145b           String terminated before 1st char (null string)
1417: 065f  LDA $145f           = 1419
1418: 3200  STA $fe00
1419: 46f5  JSM $14f5
141a: 022b  LDA $fe2b
141b: 107c  CPA $007c           = 3
141c: 6e57  JMP $1457
141d: 322c  STA $fe2c
141e: 2090  ADA $0090           = ffdf (-0x21)
141f: f50a  SAM $1429           ch <= 0x20
1420: 46ff  JSM $14ff           Get glyph
1421: f51d  SAM $143e           Glyph not found
1422: 46dc  JSM $14dc
1423: 472b  JSM $152b           Draw character
1424: 46ed  JSM $14ed           Move horizontally to next char
1425: 087a  LDB $007a           = 1
1426: 3a32  STB $fe32
1427: c0c7  JSM $00c7,I         = 08d1
1428: 690a  JMP $010a
1429: 8e62  LDB $1462,I         = 177e
142a: 3ae6  STB $fee6
142b: 1084  CPA $0084           = ffff
142c: 6e41  JMP $1441           ch is space: move to next character
142d: 209f  ADA $009f           = 000d
142e: 757a  SIA $1428           14: NOP
142f: 7579  SIA $1428           13: NOP
1430: 7578  SIA $1428           12: NOP
1431: 7577  SIA $1428           11: NOP
1432: 207a  ADA $007a           1
1433: 7553  SIA $1446           0f: SI Select std charset
1434: 7555  SIA $1449           0e: SO Select alt charset
1435: 7559  SIA $144e           0d: CR Move to start of current line
1436: 7572  SIA $1428           0c: NOP
1437: 087a  LDB $007a           = 1
1438: 7558  SIA $1450           0b: VT One line up
1439: 0884  LDB $0084           = ffff
143a: 7556  SIA $1450           0a: LF One line down
143b: 756d  SIA $1428           09: NOP
143c: 7546  SIA $1442           08: BS Back one character
143d: 752b  SZA $1428           07: NOP
143e: 00ab  LDA $00ab           Set error 4 (illegal char)
143f: 413b  JSM $013b
1440: 690a  JMP $010a
*
* Move horizontally to next char on the right
*
1441: 087a  LDB $007a           = 1
1442: 0095  LDA $0095           = 0
1443: 46ed  JSM $14ed
1444: 6e52  JMP $1452
*
* SS cmd
*
1445: 4128  JSM $0128
1446: 0660  LDA $1460           = 7ecf
1447: 6e4a  JMP $144a
*
* SA cmd
*
1448: 4128  JSM $0128
1449: 0661  LDA $1461           = 7ed1
144a: 32cd  STA $fecd
144b: 207a  ADA $007a           = 1
144c: 32ce  STA $fece
144d: 690a  JMP $010a
*
* Carriage return
*
144e: 46de  JSM $14de           Clear hor position
144f: 6e52  JMP $1452
*
* Move one line up (B=1) or down (B=-1)
*
1450: 0095  LDA $0095           = 0
1451: 46e5  JSM $14e5
1452: 087a  LDB $007a           = 1
1453: 460c  JSM $140c           Set pen up
1454: 479e  JSM $159e           Clear pos in cell
1455: 47a1  JSM $15a1
1456: 690a  JMP $010a
*
* LB cmd terminated
*
1457: 0662  LDA $1462           = 177e
1458: 32e6  STA $fee6
1459: 469d  JSM $149d
145a: c0c6  JSM $00c6,I         = 08cf
145b: 5a29  DSZ $fe29
145c: 4a29  ISZ $fe29
145d: 4a2a  ISZ $fe2a
145e: 690a  JMP $010a
145f: 1419  CPA $1619
1460: 7ecf  SLB $146f,S
1461: 7ed1  SLB $1472,S
1462: 177e  CPA $157e
*
* SM cmd
*
1463: 0095  LDA $0095           = 0
1464: 32eb  STA $feeb
1465: 022a  LDA $fe2a
1466: 741d  RZA $1483           No param
1467: 4a29  ISZ $fe29           Set char. parsing mode
1468: 411d  JSM $011d           Get 2 chars
1469: 187e  CPB $007e           = '\n'
146a: 6e7a  JMP $147a
146b: 18b8  CPB $00b8           = ';'
146c: 6e7a  JMP $147a
146d: 189f  CPB $009f           = '\r'
146e: 6e70  JMP $1470
146f: 6e74  JMP $1474
1470: 32e8  STA $fee8
1471: 4124  JSM $0124
1472: 107e  CPA $007e           = '\n'
1473: 6e79  JMP $1479
1474: 0095  LDA $0095           = 0
1475: 3229  STA $fe29
1476: 007a  LDA $007a           = 1
1477: 329e  STA $fe9e
1478: 6928  JMP $0128
1479: 02e8  LDA $fee8
147a: 4a2a  ISZ $fe2a           Set to non-zero (i.e. no more params)
147b: 0095  LDA $0095           = 0
147c: 3229  STA $fe29           Disable char. parsing
147d: 46ff  JSM $14ff           Get glyph of char in (fe2c) i.e. 1st param
147e: fc02  SBP $1480
147f: 692f  JMP $012f           Error 3 if glyph not available
1480: 3aec  STB $feec
1481: 02e6  LDA $fee6
1482: 32eb  STA $feeb
1483: 690a  JMP $010a
*
*
*
1484: c69f  JSM $149f,I         = 08b4
1485: 6e87  JMP $1487
*
*
*
1486: c0c5  JSM $00c5,I         = 08cb
1487: 02eb  LDA $feeb
1488: 750e  SZA $1496           SM disabled
1489: 32e6  STA $fee6
148a: 0aec  LDB $feec
148b: 3ae5  STB $fee5
148c: 4ae5  ISZ $fee5
148d: 4769  JSM $1569
148e: 008e  LDA $008e           = fffc
148f: 22e9  ADA $fee9
1490: 8000  LDA $0000(A),I      -> 1e2d
1491: 2089  ADA $0089           = fffe
1492: 8000  LDA $0000(A),I      -> 1e30
1493: 2889  ADB $0089           = fffe
1494: fd02  SBM $1496
1495: 4757  JSM $1557           Get displacements from 1st op code
1496: f081  RET 1
1497: 2000  ADA $0000(A)        Double them
1498: 2801  ADB $0001(B)
1499: 479e  JSM $159e           Start from this position inside char cell
149a: 46e0  JSM $14e0
149b: 46f9  JSM $14f9
149c: 472b  JSM $152b           Draw symbol character
*
* Raise pen & position it at 0,0 pos of char cell
*
149d: 46dc  JSM $14dc
149e: 6fa1  JMP $15a1           Reposition pen
149f: 08b4  LDB $00b4
*
* CP cmd
*
14a0: 0084  LDA $0084           = ffff
14a1: 32f9  STA $fef9           Request inverse scaling when cmd ends
14a2: 46f5  JSM $14f5
14a3: 022a  LDA $fe2a
14a4: 7504  SZA $14a8
14a5: 46de  JSM $14de           No params, do CR/LF
14a6: 0884  LDB $0084           = ffff
14a7: 6e50  JMP $1450           Move one line down
14a8: 4115  JSM $0115           Get 2 dec. params
14a9: 0001  LDA $0001(B)
14aa: f907  ABR 8
14ab: f187  SAL 8
14ac: 46e5  JSM $14e5           Move vertically
14ad: 0a2c  LDB $fe2c
14ae: 0001  LDA $0001(B)
14af: f907  ABR 8
14b0: f187  SAL 8
14b1: 46ed  JSM $14ed           Move horizontally
14b2: 0a30  LDB $fe30
14b3: 6e53  JMP $1453
*
* UC cmd
*
14b4: 0084  LDA $0084           = ffff
14b5: 32f9  STA $fef9           Request inverse scaling when cmd ends
14b6: 46f5  JSM $14f5
14b7: 022a  LDA $fe2a
14b8: 7502  SZA $14ba
14b9: 6e4e  JMP $144e           No more parameters
14ba: 3228  STA $fe28
14bb: 82ce  LDA $fece,I         = 16df
14bc: 2084  ADA $0084           = ffff
14bd: 8000  LDA $0000(A),I      = 1700
14be: 2084  ADA $0084           = ffff
14bf: 8000  LDA $0000(A),I      = 177e
14c0: 32e6  STA $fee6
14c1: 469d  JSM $149d
14c2: 46d6  JSM $14d6           Get 1 param
14c3: f407  SAP $14ca           |param| <= 98
14c4: 0095  LDA $0095           = 0
14c5: fc02  SBP $14c7           param >= 99
14c6: 007a  LDA $007a           = 1
14c7: 3232  STA $fe32
14c8: c0c7  JSM $00c7,I         = 08d1 Set pen up/down
14c9: 6ed3  JMP $14d3
14ca: f982  SBL 3
14cb: 3ae9  STB $fee9           Store x motion * 8
14cc: 46d6  JSM $14d6           Get y motion
14cd: f402  SAP $14cf           |param| <= 98
14ce: 692f  JMP $012f           Bad parameter
14cf: f981  SBL 2
14d0: 3aea  STB $feea           Store y motion * 4
14d1: 4798  JSM $1598           Set new position inside char. cell
14d2: 47a1  JSM $15a1           Move pen
14d3: 022a  LDA $fe2a
14d4: 752e  SZA $14c2           More parameters
14d5: 6e41  JMP $1441           Move to next char & exit
*
* Get 1 integer param
* IN:  A        0
* OUT: A        98 - |param|
*
14d6: 4124  JSM $0124
14d7: f502  SAM $14d9
14d8: f020  TCA
14d9: 26db  ADA $14db           = 0062/98
14da: f081  RET 1
14db: 0062  LDA $0062
*
* Set pen up, clear position inside char cell
*
14dc: 46e0  JSM $14e0
14dd: 6f9e  JMP $159e
*
* Clear hor position
*
14de: 46e2  JSM $14e2
14df: 6ef2  JMP $14f2
14e0: 087a  LDB $007a           = 1
14e1: 3a32  STB $fe32
14e2: 0895  LDB $0095           = 0
14e3: 0095  LDA $0095           = 0
14e4: f081  RET 1
*
* Move vertically
* IN: A         Fraction of char. height
*     B         Char. heights
*
14e5: ff81  SES $14e6,C
14e6: 22d9  ADA $fed9
14e7: f781  SOS $14e8,C
14e8: c6e9  JSM $14e9,I         = 1400
14e9: 1400  CPA $1600
14ea: 3ad8  STB $fed8
14eb: 32d9  STA $fed9
14ec: f081  RET 1
*
* Move horizontally
* IN: A         Fraction of 1 char. width
*     B         Char. widths
*
14ed: ff81  SES $14ee,C
14ee: 22d7  ADA $fed7
14ef: f781  SOS $14f0,C
14f0: c6f1  JSM $14f1,I         = 1404
14f1: 1404  CPA $1604
14f2: 3ad6  STB $fed6
14f3: 32d7  STA $fed7
14f4: f081  RET 1
*
* Begin char. drawing
*
14f5: 087a  LDB $007a           = 1
14f6: 1a19  CPB $fe19
14f7: f081  RET 1               Already started
14f8: 3a19  STB $fe19           Set char. drawing
14f9: 0a3f  LDB $fe3f
14fa: 3ad4  STB $fed4
14fb: 0a40  LDB $fe40
14fc: 3ad5  STB $fed5           Save pen pos in fed4:fed5
14fd: 46de  JSM $14de           Clear horizontal motion
14fe: 6eea  JMP $14ea           Clear vertical motion
*
* Get glyph for character in (fe2c)
* OUT: fee5     Glyph offset (?)
*      fee6     Pointer to glyph table
*
14ff: 82ce  LDA $fece,I
1500: 32e9  STA $fee9           Points to translation table (16df)
1501: 8acd  LDB $fecd,I         Get current (std/alt) charset no.
1502: 7d04  SZB $1506
1503: 4716  JSM $1516           Translate char. code for charsets 1..4
1504: 6f0a  JMP $150a
1505: 0895  LDB $0095           If translation for charsets 1..4 fails, use charset 0
1506: 4716  JSM $1516           Translate char. code for charset 0
1507: 6f0a  JMP $150a
1508: 008c  LDA $008c           = fffd
1509: fccc  SBP $1515,S
150a: 4768  JSM $1568           Get offset in glyph table (fee9 = 1700)
150b: 3ae5  STB $fee5           Save offset
150c: 4768  JSM $1568           (fee9 = 177e)
150d: 02e9  LDA $fee9           Points to glyph table (177e)
150e: 32e6  STA $fee6
150f: 208c  ADA $008c           = fffd
1510: a800  ADB $0000(A),I
1511: fcc4  SBP $1515,S
1512: 4ae5  ISZ $fee5
1513: 0ae5  LDB $fee5
1514: 4ae5  ISZ $fee5
1515: f081  RET 1
*
* Translate char in fe2c to internal code in B
* IN: B         Charset no.
*     fe2c      Character to translate
* OUT:B         Internal code
* RET 1 if translation done
* RET 2 if translation not possible
*
1516: 476a  JSM $156a           Get start/end indexes of trans. table
1517: 32e5  STA $fee5
1518: 3ae6  STB $fee6
1519: 0ae5  LDB $fee5
151a: 1ae6  CPB $fee6
151b: f082  RET 2               Translation not found
151c: 4ae5  ISZ $fee5
151d: 476a  JSM $156a
151e: 122c  CPA $fe2c
151f: f081  RET 1               Single character matched
1520: 0ae5  LDB $fee5
1521: 4ae5  ISZ $fee5
1522: f437  SAP $1519
1523: 4ae5  ISZ $fee5
1524: 222c  ADA $fe2c
1525: f434  SAP $1519           Upper bound for char range not matched
1526: 476a  JSM $156a
1527: 222c  ADA $fe2c
1528: f531  SAM $1519           Lower bound for char range not matched
1529: 2800  ADB $0000(A)
152a: f081  RET 1
*
* Draw a character
* IN: fee5      Offset of character glyph
*     fee6      Pointer to glyph table
*
* while (1) {
*   regB = vFEE5++;
*   regA = vFEE6;
*   // Get op code from glyph table
*   fn1569();
*   regA = vFEE9 - 2;
*   // Move vFEE9 to 1e2d (unless op code is 0)
*   fn1557();
*   // If op code == 1, get 0001 from 1e31 (ignored)
*   if (fn1558() == 2) {
*     // 1537
*     vFED3 = 0xffff;
*   } else {
*     // 153f
*     // If 2 <= op code <= 1a7, move/draw
*     if (fn1558() == 2) {
*       // 1541
*       if (vFED3 != 0) {
*         // 153a
*         regA = 1;
*         fn1597();
*         vFED3 = 0;
*       } else {
*         // 1543
*         regA = 1;
*         if (vFE32 == 1) {
*           fn15A1();
*         }
*         regA = 0;
*         fn1597();
*         fn15A1();
*       }
*     } else {
*       // 154a
*       // If op code >= 1a8, char. is terminated
*       // op code == 1a8 -> do not move to next char
*       // op code == 1a9 -> move to char on the right
*       vFECB = *--vFEE9;
*       regA = regB;
*       regB = 0;
*       div();
*       vFEE9 = regA;
*       regA = regB << 15;
*       regB /= 2;
*       div();
*       regB = vFEE9;
*       regA <<= 1;
*       return;
*     }
*   }
* }
*
152b: 0ae5  LDB $fee5
152c: 4ae5  ISZ $fee5
152d: 02e6  LDA $fee6           -> 177e
152e: 4769  JSM $1569
152f: 0089  LDA $0089           = fffe
1530: 22e9  ADA $fee9           -> 177c
1531: 4757  JSM $1557           Table @177b
1532: 6f35  JMP $1535
1533: 0000  NOP
1534: 0000  NOP
1535: 4758  JSM $1558           Table @1e2d
1536: 6f3f  JMP $153f
1537: 0084  LDA $0084           = ffff
1538: 32d3  STA $fed3
1539: 6f2b  JMP $152b
153a: 007a  LDA $007a           = 1
153b: 4797  JSM $1597
153c: 0095  LDA $0095           = 0
153d: 32d3  STA $fed3
153e: 6f2b  JMP $152b
153f: 4758  JSM $1558
1540: 6f4a  JMP $154a
1541: 02d3  LDA $fed3
1542: 7438  RZA $153a
1543: 007a  LDA $007a           = 1
1544: 1232  CPA $fe32
1545: 47a1  JSM $15a1
1546: 0095  LDA $0095           = 0
1547: 4797  JSM $1597
1548: 47a1  JSM $15a1
1549: 6f2b  JMP $152b
154a: 4765  JSM $1565
154b: 32cb  STA $fecb
154c: 0001  LDA $0001(B)
154d: 0895  LDB $0095
154e: 4160  JSM $0160
154f: 32e9  STA $fee9
1550: 0001  LDA $0001(B)
1551: f900  ABR 1
1552: f18e  SAL 15
1553: 4160  JSM $0160
1554: 0ae9  LDB $fee9
1555: f180  SAL 1
1556: f081  RET 1
*
* IN: A         Pointer to table
*     B         Index
*
* vFEE9 = regA;
* regA = *--vFEE9;
* regA += regB;
* if (regA == regB) {
*   return 1;
* } else if (regA >= 0) {
*   regB = regA;
*   regA = *--vFEE9;
*   vFEE9 = regA;
*   return 1;
* } else {
*   vFEE9 = *(vFEE9 - 1);
*   fn156A();
*   vFEE9 = regA;
*   vFEEA = regB;
*   return 2;
* }
*
1557: 32e9  STA $fee9
1558: 4765  JSM $1565
1559: 2001  ADA $0001(B)
155a: 1001  CPA $0001(B)
155b: f081  RET 1
155c: f505  SAM $1561
155d: 3001  STA $0001(B)
155e: 4765  JSM $1565
155f: 32e9  STA $fee9
1560: f081  RET 1
1561: 4768  JSM $1568
1562: 32e9  STA $fee9
1563: 3aea  STB $feea
1564: f082  RET 2
*
* regA = *--vFEE9;
*
1565: 5ae9  DSZ $fee9
1566: 82e9  LDA $fee9,I
1567: f081  RET 1
*
* vFEE9 = *(vFEE9 - 1);
* fn156A();
*
1568: 4765  JSM $1565
1569: 32e9  STA $fee9
*
* Get 2 bytes or 1 word from indexed table
*
* IN: fee9      Pointer to table
*     B         Index
* OUT: A        Top byte
*      B        Bottom byte or word
*
* if (*vFEE9 & 0xf) {
*   regA = (regB & 1) ? 0 : 0xffff;
*   regB >>= 1;
* } else {
*   regA = 0xffff;
* }
* vFEEA = regA;
* regB = regB + vFEE9 + 1;
* regA = *regB;
* regB = *(regB + 1);
* if (vFEEA != 0xffff) {
*   regA = (regA << 8) | (regB >> 8);
* }
* regB = *vFEE9 / 2048;
* if (regB != 0) {
*   vFEEA = regA;
*   regA /= 256;
*   if (regB & 0x8000) {
*     regA &= 0xff;
*   }
*   regB = vFEEA;
*   vFEEA = regA;
*   regA = regB;
* }
* regB = (*vFEE9 << 5) / 2048;
* if (regB != 0) {
*   regA = (regA << 8) / 256;
*   if (regB & 0x8000) {
*     regA &= 0xff;
*   }
* } else {
*   vFEEA = 0;
* }
* regB = regA;
* regA = vFEEA;
*
156a: 82e9  LDA $fee9,I
156b: 5098  AND $0098           = 000f
156c: 7506  SZA $1572
156d: 0084  LDA $0084           = ffff
156e: 7e02  SLB $1570
156f: f060  CMA
1570: f940  SBR 1
1571: 6f73  JMP $1573
1572: 0084  LDA $0084           = ffff
1573: 32ea  STA $feea
1574: 2ae9  ADB $fee9
1575: 287a  ADB $007a           = 1
1576: 8001  LDA $0001(B),I
1577: 287a  ADB $007a           = 1
1578: 8801  LDB $0001(B),I
1579: 4aea  ISZ $feea
157a: 6f7c  JMP $157c
157b: 6f7f  JMP $157f
157c: f187  SAL 8
157d: f947  SBR 8
157e: 6001  IOR $0001(B)
157f: 8ae9  LDB $fee9,I
1580: f90a  ABR 11
1581: 7d08  SZB $1589
1582: 32ea  STA $feea
1583: f107  AAR 8
1584: fc02  SBP $1586
1585: 50a9  AND $00a9           = 00ff
1586: 0aea  LDB $feea
1587: 32ea  STA $feea
1588: 0001  LDA $0001(B)
1589: 8ae9  LDB $fee9,I
158a: f984  SBL 5
158b: f90a  ABR 11
158c: 7d06  SZB $1592
158d: f187  SAL 8
158e: f107  AAR 8
158f: fc02  SBP $1591
1590: 50a9  AND $00a9           = 00ff
1591: 6f94  JMP $1594
1592: 0895  LDB $0095           = 0
1593: 3aea  STB $feea
1594: 0800  LDB $0000(A)
1595: 02ea  LDA $feea
1596: f081  RET 1
*
* (fe32) = A
* (feda) += (fee9) * 2
* (fedb) += (feea) * 2
*
1597: 3232  STA $fe32
1598: 02e9  LDA $fee9
1599: 0aea  LDB $feea
159a: 2801  ADB $0001(B)
159b: 2000  ADA $0000(A)
159c: 22da  ADA $feda
159d: 2adb  ADB $fedb
159e: 32da  STA $feda
159f: 3adb  STB $fedb
15a0: f081  RET 1
*
* Move pen to pos (feda)-(fedb)
*
15a1: 0248  LDA $fe48
15a2: 743e  RZA $15a0           Skip if lost
15a3: 3233  STA $fe33
15a4: 0084  LDA $0084           = ffff
15a5: 0ada  LDB $feda
15a6: 47d2  JSM $15d2           Turn feda into fractional hor position
15a7: 0ad6  LDB $fed6
15a8: 02d7  LDA $fed7
15a9: 47e1  JSM $15e1           Sum character hor displacement
15aa: 02de  LDA $fede           width of chars
15ab: 47e5  JSM $15e5           Turn hor position into PU
15ac: 322e  STA $fe2e
15ad: 0089  LDA $0089           = fffe
15ae: 0adb  LDB $fedb
15af: 47d2  JSM $15d2           Turn fedb into fractional ver position
15b0: 02df  LDA $fedf           height of chars
15b1: 47e5  JSM $15e5
15b2: 0ae4  LDB $fee4
15b3: 4193  JSM $0193
15b4: f987  SBL 8
15b5: f147  SAR 8
15b6: 2001  ADA $0001(B)
15b7: 222e  ADA $fe2e           Add slant to hor position
15b8: 0a2e  LDB $fe2e
15b9: 4408  JSM $1608           Check for overflow
15ba: 322e  STA $fe2e
15bb: 0ad8  LDB $fed8
15bc: 02d9  LDA $fed9
15bd: 47e1  JSM $15e1           Sum character ver displacement
15be: 02df  LDA $fedf
15bf: 47e5  JSM $15e5           Turn ver position into PU
15c0: 322f  STA $fe2f
15c1: f020  TCA
15c2: 0a2e  LDB $fe2e
15c3: 47f8  JSM $15f8           Compute displacement from start x pos
15c4: 22d4  ADA $fed4           Add start x pos
15c5: 0a2e  LDB $fe2e
15c6: 4408  JSM $1608           Check for overflow
15c7: 0a2e  LDB $fe2e
15c8: 322e  STA $fe2e
15c9: 0001  LDA $0001(B)
15ca: 0a2f  LDB $fe2f
15cb: 47f8  JSM $15f8           Compute displacement from start y pos
15cc: 22d5  ADA $fed5           Add start y pos
15cd: 0a2f  LDB $fe2f
15ce: 4408  JSM $1608
15cf: 322f  STA $fe2f
15d0: c0c5  JSM $00c5,I         = 08cb Move to (fe2e)-(fe2f), draw if (fe32) == 0
15d1: f081  RET 1
*
* Compute fractional hor/ver position in characters
*
* IN: B         Hor/ver position
*     A         Offset of divisor from glyph table (-1 = horizontal, -2 = vertical)
*     fee6      Pointer to glyph table
* OUT: feca:fec9        B * 2^16 / divisor
*
15d2: 22e6  ADA $fee6
15d3: 8000  LDA $0000(A),I
15d4: 32cb  STA $fecb           Divisor = (horizontal ? 96 : 128) @177c/@177d
15d5: 0001  LDA $0001(B)
15d6: f90f  ABR 16
15d7: 4160  JSM $0160
15d8: 32e7  STA $fee7           fee7 = B // divisor
15d9: 0001  LDA $0001(B)
15da: f18e  SAL 15
15db: f900  ABR 1
15dc: 4160  JSM $0160           Divide (B % divisor) * 2^15 by divisor
15dd: 0800  LDB $0000(A)
15de: f90f  ABR 16
15df: 47e2  JSM $15e2           feca:fec9 = (B % divisor) * 2^15 // divisor
15e0: 2ae7  ADB $fee7
15e1: 4150  JSM $0150
15e2: 3aca  STB $feca           feca:fec9 = 2 * ((B % divisor) * 2^15 // divisor) + (B // divisor) * 2^16
15e3: 32c9  STA $fec9
15e4: f081  RET 1
*
* IN: A         width/height of char. space
*     feca:fec9 Fractional hor/ver position
* OUT:A         hor/ver position in PU (clipped to +7fff,-8000)
*
15e5: 32e7  STA $fee7
15e6: 0ac9  LDB $fec9
15e7: f940  SBR 1
15e8: 4193  JSM $0193
15e9: f980  SBL 1
15ea: f402  SAP $15ec
15eb: 287a  ADB $007a           = 1
15ec: 02e7  LDA $fee7
15ed: 3ae7  STB $fee7
15ee: 0aca  LDB $feca
15ef: 4193  JSM $0193
15f0: fc02  SBP $15f2
15f1: f5c2  SAM $15f3,S
15f2: f517  SAM $1609
15f3: 22e7  ADA $fee7
15f4: 7d14  SZB $1608
15f5: 1884  CPB $0084           = ffff
15f6: 6c08  JMP $1608
15f7: 6c09  JMP $1609
*
* IN: A         X
*     B         Y
* OUT:A         (X * (fee3) + Y * (fee2)) * 2^-14 (clipped)
*
15f8: 3ae7  STB $fee7
15f9: 0ae3  LDB $fee3
15fa: 4402  JSM $1602
15fb: 0ae7  LDB $fee7
15fc: 32e7  STA $fee7
15fd: 02e2  LDA $fee2
15fe: 4402  JSM $1602
15ff: 0800  LDB $0000(A)
1600: 22e7  ADA $fee7
1601: 6c08  JMP $1608
1602: 4193  JSM $0193
1603: f14d  SAR 14
1604: 2001  ADA $0001(B)
1605: 2001  ADA $0001(B)
1606: 2001  ADA $0001(B)
1607: 2001  ADA $0001(B)
1608: f688  SOC $1610,C
1609: 00b7  LDA $00b7           = 7fff
160a: fc02  SBP $160c
160b: f060  CMA
160c: 32e7  STA $fee7
160d: 00b4  LDA $00b4           Set error 6 (pos overflow)
160e: 413b  JSM $013b
160f: 02e7  LDA $fee7
1610: f081  RET 1
*
* CS cmd
*
1611: 0660  LDA $1460           = 7ecf
1612: 6c14  JMP $1614
*
* CA cmd
*
1613: 0661  LDA $1461           = 7ed1
1614: 32e8  STA $fee8
1615: 0095  LDA $0095
1616: 122a  CPA $fe2a
1617: 4111  JSM $0111           Get charset no. if provided
1618: 322c  STA $fe2c
1619: 0434  LDA $1634           = 16da
161a: 4425  JSM $1625
161b: 7503  SZA $161e
161c: 007d  LDA $007d           = 5
161d: 6935  JMP $0135
161e: 02e7  LDA $fee7
161f: 207b  ADA $007b           = 2
1620: bae8  STB $fee8,I         (fed1) = charset no.
1621: 4ae8  ISZ $fee8
1622: b2e8  STA $fee8,I         (fed2) = 16df
1623: 690a  JMP $010a
1624: 8000  LDA $0000(A),I
1625: 7402  RZA $1627
1626: f082  RET 2
1627: 32e7  STA $fee7
1628: 4430  JSM $1630
1629: fc3b  SBP $1624
162a: 4430  JSM $1630
162b: fd39  SBM $1624
162c: 0436  LDA $1636           = ffe6
162d: 4ae7  ISZ $fee7
162e: d2e7  AND $fee7,I
162f: f081  RET 1
1630: 4ae7  ISZ $fee7
1631: 0a2c  LDB $fe2c
1632: aae7  ADB $fee7,I
1633: f081  RET 1
1634: 16da  CPA $14da
1635: 2003  ADA $0003(R)
1636: ffe6  SES $161c,S
*
* SR cmd
*
1637: 443e  JSM $163e
1638: 00fc  LDA $00fc           = 00c0 (0.75)
1639: 08fd  LDB $00fd           = 0180 (1.5)
163a: 32dc  STA $fedc
163b: 3add  STB $fedd
163c: 444f  JSM $164f
163d: 690a  JMP $010a
163e: 022a  LDA $fe2a
163f: 7502  SZA $1641
1640: f081  RET 1
1641: 4115  JSM $0115           Get width & height params
1642: f504  SAM $1646
1643: 7503  SZA $1646           width must be > 0
1644: fd02  SBM $1646
1645: 1895  CPB $0095           height must be > 0
1646: 692f  JMP $012f
1647: f083  RET 3               Back to 163a/16c2
*
* Update text direction, size & accumulators
*
1648: 02e0  LDA $fee0
1649: 0ae1  LDB $fee1
164a: 7402  RZA $164c
164b: 7d02  SZB $164d
164c: 4493  JSM $1693           Compute char. direction cosines when DR cmd active
164d: 0add  LDB $fedd
164e: 7d32  SZB $1640           Skip if absolute char. size
164f: c469  JSM $1669,I         = 0a39
1650: 3ae8  STB $fee8
1651: 0adc  LDB $fedc
1652: c468  JSM $1668,I         = 0a2b
*
* Set character width/height & update accumulators
* IN: B         Char. width (in plotter units)
*     fee8      Char. height (in PU)
*
1653: 3ae7  STB $fee7
1654: f900  ABR 1
1655: 2ae7  ADB $fee7           B = 1.5 B (width of char. space = 1.5 char. width)
1656: 02de  LDA $fede
1657: 32e7  STA $fee7
1658: 3ade  STB $fede
1659: 3acb  STB $fecb
165a: 0ad6  LDB $fed6
165b: 02d7  LDA $fed7
165c: 446a  JSM $166a
165d: 46f2  JSM $14f2
165e: 0ae8  LDB $fee8
165f: f980  SBL 1
1660: 02df  LDA $fedf           B = 2B (height of char. space = 2 char. height)
1661: 32e7  STA $fee7
1662: 3adf  STB $fedf
1663: 3acb  STB $fecb
1664: 0ad8  LDB $fed8
1665: 02d9  LDA $fed9
1666: 446a  JSM $166a
1667: 6eea  JMP $14ea
1668: 0a2b  LDB $fe2b
1669: 0a39  LDB $fe39
*
* IN: B:A       accumulator
*     (fee7)    Previous width/height
*     (fecb)    New width/height
* OUT: B:A      updated accumulator
*
166a: 32c9  STA $fec9
166b: 02e7  LDA $fee7
166c: 4193  JSM $0193
166d: 32ca  STA $feca           = (fee7) * B
166e: 02c9  LDA $fec9
166f: f140  SAR 1
1670: 0ae7  LDB $fee7
1671: 4193  JSM $0193
1672: f980  SBL 1
1673: 2aca  ADB $feca
1674: f402  SAP $1676
1675: 287a  ADB $007a           = 1
1676: f180  SAL 1
1677: 32c9  STA $fec9           = B:fec9 = A / 2 * (fee7) * 2 + (fee7) * B * 2^16
1678: 0001  LDA $0001(B)
1679: f90f  ABR 16
167a: 4160  JSM $0160
167b: 32ca  STA $feca
167c: 02c9  LDA $fec9
167d: f140  SAR 1
167e: 7e02  SLB $1680
167f: f4c1  SAP $1680,S
1680: f900  ABR 1
1681: 4160  JSM $0160
1682: 0800  LDB $0000(A)
1683: f90e  ABR 15
1684: 2aca  ADB $feca
1685: f180  SAL 1
1686: f081  RET 1
*
* DR cmd
*
1687: 44b2  JSM $16b2
1688: 44a1  JSM $16a1
1689: 32e0  STA $fee0
168a: 3ae1  STB $fee1
168b: 4493  JSM $1693
168c: 6c91  JMP $1691
*
* DI cmd
*
168d: 44b2  JSM $16b2
168e: 449b  JSM $169b
168f: 32e0  STA $fee0
1690: 32e1  STA $fee1
1691: 3219  STA $fe19
1692: 690a  JMP $010a
*
* Compute direction cosines for char. drawing from DR params
*
1693: 32e7  STA $fee7
1694: c469  JSM $1669,I         = 0a39
1695: 0ae7  LDB $fee7
1696: 32e7  STA $fee7
1697: c468  JSM $1668,I         = 0a2b
1698: 0ae7  LDB $fee7
1699: 7402  RZA $169b
169a: 7d03  SZB $169d
*
* Compute direction cosines for char. drawing from DI params
*
169b: 44a1  JSM $16a1
169c: 41bb  JSM $01bb
169d: 32e2  STA $fee2
169e: 3ae3  STB $fee3
169f: 0095  LDA $0095
16a0: f081  RET 1
*
* Maximise resolution on A/B ratio
*
16a1: f681  SOC $16a2,C
16a2: fe81  SEC $16a3,C
16a3: 2000  ADA $0000(A)
16a4: f708  SOS $16ac
16a5: fe81  SEC $16a6,C
16a6: 2801  ADB $0001(B)
16a7: f63b  SOC $16a2
16a8: f101  AAR 2
16a9: f940  SBR 1
16aa: fe06  SEC $16b0
16ab: fcc5  SBP $16b0,S
16ac: f140  SAR 1
16ad: fe02  SEC $16af
16ae: f4c1  SAP $16af,S
16af: f100  AAR 1
16b0: f900  ABR 1
16b1: f081  RET 1
*
*
*
16b2: 00ae  LDA $00ae           = 0100
16b3: 0895  LDB $0095           = 0
16b4: 1a2a  CPB $fe2a
16b5: 4115  JSM $0115           Get 2 decimal params
16b6: 743b  RZA $16b1           Params must not be both 0
16b7: 7c3a  RZB $16b1
16b8: 692f  JMP $012f
*
* SL cmd
*
16b9: 007a  LDA $007a           = 1
16ba: 0895  LDB $0095           = 0
16bb: 1a2a  CPB $fe2a
16bc: 4111  JSM $0111
16bd: 3ae4  STB $fee4
16be: 690a  JMP $010a
*
* SI cmd
*
16bf: c4d8  JSM $16d8,I         = 163e Get width & height
16c0: 00fe  LDA $00fe           = 0049 (.285) Default values
16c1: 08ff  LDB $00ff           = 0060 (.375)
16c2: 32e7  STA $fee7           163e returns here when w&h present
16c3: 24d9  ADA $16d9
16c4: f404  SAP $16c8           width must be < 10485 (40.957)
16c5: 0001  LDA $0001(B)
16c6: 24d9  ADA $16d9
16c7: f502  SAM $16c9           height must be < 10485 (40.957)
16c8: 692f  JMP $012f
16c9: 44d1  JSM $16d1
16ca: 3ae8  STB $fee8           = height * 400 (def = 150)
16cb: 0ae7  LDB $fee7
16cc: 44d1  JSM $16d1
16cd: 0095  LDA $0095           = 0 B = width * 400 (def = 114)
16ce: 32dd  STA $fedd
16cf: c4d7  JSM $16d7,I         = 1653
16d0: 690a  JMP $010a
16d1: 0085  LDA $0085           = fff8
16d2: 32cc  STA $fecc
16d3: 00bf  LDA $00bf           = 0190 (400)
16d4: 4193  JSM $0193
16d5: ecd6  JMP $16d6,I         = 0a10
16d6: 0a10  LDB $fe10
16d7: 1653  CPA $1453
16d8: 163e  CPA $143e
16d9: d70b  AND $150b,I
16da: 0000  NOP
16db: fffb  SES $16d6,S
16dc: 0000  NOP
16dd: 0019  LDA $0019
16de: 1700  CPA $1500
16df: 39c8  STB $01c8           **** Translation table ****
16e0: 0609  LDA $1409
16e1: 1323  CPA $ff23
16e2: 2f3e  ADB $153e
16e3: 81df  LDA $01df,I         Translation charset 0: [0x21..0x7e] -> [0x00..0x5d]
16e4: 0027  LDA $0027           Translation charset 1: 0x27->0x5f
16e5: 5f5c  DSZ $155c           0x5c->0x60
16e6: 609f  IOR $009f           [0x5e..0x60] -> [0x61..0x63]
16e7: a261  ADA $fe61,I
16e8: 8185  LDA $0185,I         [0x7b..0x7e] -> [0x64..0x67]
16e9: 6423  IOR $1623           Translation charset 2: 0x23->0x68
16ea: 6827  JMP $0027           0x27->0x69
16eb: 695c  JMP $015c           0x5c->0x6a
16ec: 6a5e  JMP $fe5e           0x5e->0x6b
16ed: 6b9f  JMP $ff9f
16ee: a162  ADA $0162,I         [0x5f..0x60] -> [0x62..0x63]
16ef: 8285  LDA $fe85,I         [0x7b..0x7d] -> [0x6c..0x6e]
16f0: 6c7e  JMP $167e           0x7e->0x5f
16f1: 5f23  DSZ $1523           Translation charset 3: 0x23->0x68
16f2: 68a1  JMP $00a1           [0x5b..0x5e] -> [0x6f..0x72]
16f3: a56f  ADA $176f,I
16f4: 5f62  DSZ $1562           0x5f->0x62
16f5: 8285  LDA $fe85,I         [0x7b..0x7d] -> [0x6c..0x6e]
16f6: 6c7e  JMP $167e           0x7e->0x73
16f7: 7323  ???                 Translation charset 4: 0x23->0x74
16f8: 7427  RZA $16df           0x27->0x69
16f9: 695c  JMP $015c           0x5c->0x75
16fa: 755e  SIA $1718           0x5e->0x6b
16fb: 6b5f  JMP $ff5f           0x5f->0x62
16fc: 6282  IOR $fe82           [0x7b..0x7d] -> [0x76..0x78]
16fd: 8576  LDA $1776,I
16fe: 7e67  SLB $16e5           0x7e->0x67
16ff: 177e  CPA $157e
1700: 0000  NOP                 **** Offset table ****
1701: 0000  NOP                 Offset in glyph table for char code 0
1702: 000c  LDA $000c
1703: 0015  LDA $0015
1704: 0024  LDA $0024
1705: 003d  LDA $003d
1706: 005f  LDA $005f
1707: 007a  LDA $007a
1708: 0085  LDA $0085
1709: 0091  LDA $0091
170a: 009d  LDA $009d
170b: 00a9  LDA $00a9
170c: 00b2  LDA $00b2
170d: 00bd  LDA $00bd
170e: 00c3  LDA $00c3
170f: 00cc  LDA $00cc
1710: 00d2  LDA $00d2
1711: 00e7  LDA $00e7
1712: 00f1  LDA $00f1
1713: 0102  LDA $0102
1714: 011a  LDA $011a
1715: 0122  LDA $0122
1716: 0134  LDA $0134
1717: 014a  LDA $014a
1718: 0151  LDA $0151
1719: 016e  LDA $016e
171a: 0184  LDA $0184
171b: 0193  LDA $0193
171c: 01a4  LDA $01a4
171d: 01ab  LDA $01ab
171e: 01b4  LDA $01b4
171f: 01bb  LDA $01bb
1720: 01d1  LDA $01d1
1721: 01ee  LDA $01ee
1722: 01f8  LDA $01f8
1723: 020d  LDA $fe0d
1724: 0221  LDA $fe21
1725: 0230  LDA $fe30
1726: 023b  LDA $fe3b
1727: 0245  LDA $fe45
1728: 025a  LDA $fe5a
1729: 0266  LDA $fe66
172a: 0272  LDA $fe72
172b: 0282  LDA $fe82
172c: 028f  LDA $fe8f
172d: 0296  LDA $fe96
172e: 029f  LDA $fe9f
172f: 02a7  LDA $fea7
1730: 02bc  LDA $febc
1731: 02c9  LDA $fec9
1732: 02e1  LDA $fee1
1733: 02f3  LDA $fef3
1734: 0309  LDA $ff09
1735: 0312  LDA $ff12
1736: 0320  LDA $ff20
1737: 0327  LDA $ff27
1738: 0330  LDA $ff30
1739: 0339  LDA $ff39
173a: 0343  LDA $ff43
173b: 034b  LDA $ff4b
173c: 0353  LDA $ff53
173d: 0359  LDA $ff59
173e: 0361  LDA $ff61
173f: 0368  LDA $ff68
1740: 036e  LDA $ff6e
1741: 0374  LDA $ff74
1742: 038d  LDA $ff8d
1743: 03a0  LDA $ffa0
1744: 03b0  LDA $ffb0
1745: 03c3  LDA $ffc3
1746: 03d4  LDA $ffd4
1747: 03e0  LDA $ffe0
1748: 03f7  LDA $fff7
1749: 0405  LDA $1605
174a: 0412  LDA $1612
174b: 041f  LDA $161f
174c: 042c  LDA $162c
174d: 0436  LDA $1636
174e: 044c  LDA $164c
174f: 045a  LDA $165a
1750: 046b  LDA $166b
1751: 047e  LDA $167e
1752: 0491  LDA $1691
1753: 049e  LDA $169e
1754: 04b4  LDA $16b4
1755: 04c1  LDA $16c1
1756: 04cf  LDA $16cf
1757: 04d6  LDA $16d6
1758: 04df  LDA $16df
1759: 04e8  LDA $16e8
175a: 04f4  LDA $16f4
175b: 04fc  LDA $16fc
175c: 050f  LDA $170f
175d: 0515  LDA $1715
175e: 0528  LDA $1728
175f: ffff  SES $175e,S
1760: 0536  LDA $1736
1761: 053c  LDA $173c
1762: 0545  LDA $1745
1763: 054f  LDA $174f
1764: 0555  LDA $1755
1765: 055b  LDA $175b
1766: 056d  LDA $176d
1767: 0576  LDA $1776
1768: 0580  LDA $1780
1769: 058e  LDA $178e
176a: 05ad  LDA $17ad
176b: 05b3  LDA $17b3
176c: 05c7  LDA $17c7
176d: 05ce  LDA $17ce
176e: 05dd  LDA $17dd
176f: 05ea  LDA $17ea
1770: 05f9  LDA $17f9
1771: 0611  LDA $1411
1772: 061f  LDA $141f
1773: 0633  LDA $1433
1774: 0653  LDA $1453
1775: 0660  LDA $1460
1776: 0676  LDA $1476
1777: 0682  LDA $1482
1778: 0690  LDA $1490
1779: 069e  LDA $149e           Offset in glyph table for char code 0x78
177a: 1e2d  CPB $142d
177b: ffff  SES $177a,S
177c: 0080  LDA $0080
177d: 0060  LDA $0060
*
* Starting offset of a glyph comes from offset table (1700)
* Offsets are relative to 177f
* First word of each glyph must be 0 (if != 0 glyph is undefined)
* Second word is the op code that centers character in SM mode
* Words from third on draw the character
* If op-code == 1, next displacement is accumulated to move raised pen
* Op-codes between 2 and 1a7 are looked up in displacement table (1e32)
* Op-code 2 is @1e33, op-code 3 @1e34 and so on
* Each displacement word is composed as follows:
* MSB   X displacement inside char. cell (in 1/48 of char. space width)
* LSB   Y displacement inside char. cell (in 1/64 of char. space height)
* Op-code == 1a8, drawing ends and next character is drawn on top of current one
* Op-code == 1a9, drawing ends and next character is drawn to the right of current one
*
177e: 0000  NOP                 **** Glyph table ****
177f: 0000  NOP
1780: 00a3  LDA $00a3
1781: 0001  LDA $0001(B)
1782: 00c8  LDA $00c8
1783: 00fd  LDA $00fd
1784: 00c9  LDA $00c9
1785: 009d  LDA $009d
1786: 00c7  LDA $00c7
1787: 0001  LDA $0001(B)
1788: 00f1  LDA $00f1
1789: 00da  LDA $00da
178a: 01a9  LDA $01a9
178b: 0000  NOP
178c: 0030  LDA $0030
178d: 0001  LDA $0001(B)
178e: 014d  LDA $014d
178f: 00d1  LDA $00d1
1790: 0001  LDA $0001(B)
1791: 0156  LDA $0156
1792: 00c0  LDA $00c0
1793: 01a9  LDA $01a9
1794: 0000  NOP
1795: 0036  LDA $0036
1796: 0001  LDA $0001(B)
1797: 0118  LDA $0118
1798: 015a  LDA $015a
1799: 0001  LDA $0001(B)
179a: 0156  LDA $0156
179b: 0058  LDA $0058
179c: 0001  LDA $0001(B)
179d: 016c  LDA $016c
179e: 0007  LDA $0007
179f: 0001  LDA $0001(B)
17a0: 00cf  LDA $00cf
17a1: 0197  LDA $0197
17a2: 01a9  LDA $01a9
17a3: 0000  NOP
17a4: 0036  LDA $0036
17a5: 0001  LDA $0001(B)
17a6: 00cd  LDA $00cd
17a7: 00fa  LDA $00fa
17a8: 0123  LDA $0123
17a9: 0173  LDA $0173
17aa: 0127  LDA $0127
17ab: 0100  LDA $0100
17ac: 00cc  LDA $00cc
17ad: 00a0  LDA $00a0
17ae: 007e  LDA $007e
17af: 002b  LDA $002b
17b0: 007e  LDA $007e
17b1: 00a0  LDA $00a0
17b2: 00cb  LDA $00cb
17b3: 0100  LDA $0100
17b4: 0127  LDA $0127
17b5: 0172  LDA $0172
17b6: 0123  LDA $0123
17b7: 00fa  LDA $00fa
17b8: 0001  LDA $0001(B)
17b9: 004a  LDA $004a
17ba: 00b2  LDA $00b2
17bb: 01a9  LDA $01a9
17bc: 0000  NOP
17bd: 0036  LDA $0036
17be: 0001  LDA $0001(B)
17bf: 00c8  LDA $00c8
17c0: 019e  LDA $019e
17c1: 0001  LDA $0001(B)
17c2: 0023  LDA $0023
17c3: 0073  LDA $0073
17c4: 008f  LDA $008f
17c5: 00aa  LDA $00aa
17c6: 00c4  LDA $00c4
17c7: 00ea  LDA $00ea
17c8: 010b  LDA $010b
17c9: 012f  LDA $012f
17ca: 010d  LDA $010d
17cb: 00ec  LDA $00ec
17cc: 00cc  LDA $00cc
17cd: 00ad  LDA $00ad
17ce: 0091  LDA $0091
17cf: 0001  LDA $0001(B)
17d0: 0151  LDA $0151
17d1: 008f  LDA $008f
17d2: 00aa  LDA $00aa
17d3: 00c4  LDA $00c4
17d4: 00ea  LDA $00ea
17d5: 010b  LDA $010b
17d6: 012f  LDA $012f
17d7: 010d  LDA $010d
17d8: 00ec  LDA $00ec
17d9: 00cc  LDA $00cc
17da: 00ad  LDA $00ad
17db: 0091  LDA $0091
17dc: 0073  LDA $0073
17dd: 01a9  LDA $01a9
17de: 0000  NOP
17df: 0036  LDA $0036
17e0: 0001  LDA $0001(B)
17e1: 0140  LDA $0140
17e2: 0071  LDA $0071
17e3: 0099  LDA $0099
17e4: 00c4  LDA $00c4
17e5: 00f9  LDA $00f9
17e6: 0116  LDA $0116
17e7: 0124  LDA $0124
17e8: 014a  LDA $014a
17e9: 0126  LDA $0126
17ea: 011a  LDA $011a
17eb: 0101  LDA $0101
17ec: 00cd  LDA $00cd
17ed: 0001  LDA $0001(B)
17ee: 0097  LDA $0097
17ef: 00ca  LDA $00ca
17f0: 00a0  LDA $00a0
17f1: 007d  LDA $007d
17f2: 005f  LDA $005f
17f3: 007b  LDA $007b
17f4: 009a  LDA $009a
17f5: 00c5  LDA $00c5
17f6: 00fa  LDA $00fa
17f7: 0180  LDA $0180
17f8: 01a9  LDA $01a9
17f9: 0000  NOP
17fa: 0031  LDA $0031
17fb: 0001  LDA $0001(B)
17fc: 0162  LDA $0162
17fd: 00fe  LDA $00fe
17fe: 00eb  LDA $00eb
17ff: 00cc  LDA $00cc
1800: 0090  LDA $0090
1801: 00c7  LDA $00c7
1802: 010c  LDA $010c
1803: 01a9  LDA $01a9
1804: 0000  NOP
1805: 0010  LDA $0010
1806: 0001  LDA $0001(B)
1807: 0196  LDA $0196
1808: 0087  LDA $0087
1809: 0095  LDA $0095
180a: 00af  LDA $00af
180b: 00d2  LDA $00d2
180c: 00ef  LDA $00ef
180d: 0111  LDA $0111
180e: 011c  LDA $011c
180f: 01a9  LDA $01a9
1810: 0000  NOP
1811: 007f  LDA $007f
1812: 0001  LDA $0001(B)
1813: 00c5  LDA $00c5
1814: 011c  LDA $011c
1815: 0111  LDA $0111
1816: 00ef  LDA $00ef
1817: 00d2  LDA $00d2
1818: 00af  LDA $00af
1819: 0095  LDA $0095
181a: 0087  LDA $0087
181b: 01a9  LDA $01a9
181c: 0000  NOP
181d: 0036  LDA $0036
181e: 0001  LDA $0001(B)
181f: 011c  LDA $011c
1820: 017e  LDA $017e
1821: 0001  LDA $0001(B)
1822: 0114  LDA $0114
1823: 0007  LDA $0007
1824: 0001  LDA $0001(B)
1825: 011e  LDA $011e
1826: 017b  LDA $017b
1827: 01a9  LDA $01a9
1828: 0000  NOP
1829: 0036  LDA $0036
182a: 0001  LDA $0001(B)
182b: 0169  LDA $0169
182c: 00dd  LDA $00dd
182d: 0001  LDA $0001(B)
182e: 0039  LDA $0039
182f: 0197  LDA $0197
1830: 01a9  LDA $01a9
1831: 0000  NOP
1832: 00ac  LDA $00ac
1833: 0001  LDA $0001(B)
1834: 010c  LDA $010c
1835: 0090  LDA $0090
1836: 00c9  LDA $00c9
1837: 010c  LDA $010c
1838: 00c4  LDA $00c4
1839: 00ab  LDA $00ab
183a: 009c  LDA $009c
183b: 01a9  LDA $01a9
183c: 0000  NOP
183d: 0036  LDA $0036
183e: 0001  LDA $0001(B)
183f: 00d6  LDA $00d6
1840: 0197  LDA $0197
1841: 01a9  LDA $01a9
1842: 0000  NOP
1843: 003c  LDA $003c
1844: 0001  LDA $0001(B)
1845: 0160  LDA $0160
1846: 00c9  LDA $00c9
1847: 010c  LDA $010c
1848: 00c7  LDA $00c7
1849: 0090  LDA $0090
184a: 01a9  LDA $01a9
184b: 0000  NOP
184c: 0036  LDA $0036
184d: 0001  LDA $0001(B)
184e: 00c5  LDA $00c5
184f: 01a0  LDA $01a0
1850: 01a9  LDA $01a9
1851: 0000  NOP
1852: 0036  LDA $0036
1853: 0001  LDA $0001(B)
1854: 015d  LDA $015d
1855: 006f  LDA $006f
1856: 0093  LDA $0093
1857: 0096  LDA $0096
1858: 00d1  LDA $00d1
1859: 0112  LDA $0112
185a: 010f  LDA $010f
185b: 0131  LDA $0131
185c: 012f  LDA $012f
185d: 012d  LDA $012d
185e: 0109  LDA $0109
185f: 0106  LDA $0106
1860: 00c0  LDA $00c0
1861: 008a  LDA $008a
1862: 008d  LDA $008d
1863: 0072  LDA $0072
1864: 007c  LDA $007c
1865: 01a9  LDA $01a9
1866: 0000  NOP
1867: 0029  LDA $0029
1868: 0001  LDA $0001(B)
1869: 0141  LDA $0141
186a: 0158  LDA $0158
186b: 00b3  LDA $00b3
186c: 0001  LDA $0001(B)
186d: 005d  LDA $005d
186e: 0175  LDA $0175
186f: 01a9  LDA $01a9
1870: 0000  NOP
1871: 0036  LDA $0036
1872: 0001  LDA $0001(B)
1873: 00f3  LDA $00f3
1874: 0101  LDA $0101
1875: 0131  LDA $0131
1876: 0160  LDA $0160
1877: 012d  LDA $012d
1878: 00f9  LDA $00f9
1879: 00c4  LDA $00c4
187a: 0099  LDA $0099
187b: 0072  LDA $0072
187c: 003b  LDA $003b
187d: 0079  LDA $0079
187e: 0089  LDA $0089
187f: 0197  LDA $0197
1880: 01a9  LDA $01a9
1881: 0000  NOP
1882: 0036  LDA $0036
1883: 0001  LDA $0001(B)
1884: 00f4  LDA $00f4
1885: 0100  LDA $0100
1886: 0127  LDA $0127
1887: 0168  LDA $0168
1888: 0123  LDA $0123
1889: 00f9  LDA $00f9
188a: 00c6  LDA $00c6
188b: 0099  LDA $0099
188c: 0081  LDA $0081
188d: 0049  LDA $0049
188e: 0001  LDA $0001(B)
188f: 0160  LDA $0160
1890: 0123  LDA $0123
1891: 00f9  LDA $00f9
1892: 00c4  LDA $00c4
1893: 0099  LDA $0099
1894: 007a  LDA $007a
1895: 002a  LDA $002a
1896: 007e  LDA $007e
1897: 00a1  LDA $00a1
1898: 01a9  LDA $01a9
1899: 0000  NOP
189a: 0036  LDA $0036
189b: 0001  LDA $0001(B)
189c: 0199  LDA $0199
189d: 0007  LDA $0007
189e: 0188  LDA $0188
189f: 00b3  LDA $00b3
18a0: 01a9  LDA $01a9
18a1: 0000  NOP
18a2: 0036  LDA $0036
18a3: 0001  LDA $0001(B)
18a4: 00cc  LDA $00cc
18a5: 00fa  LDA $00fa
18a6: 012d  LDA $012d
18a7: 0168  LDA $0168
18a8: 0131  LDA $0131
18a9: 0101  LDA $0101
18aa: 00d0  LDA $00d0
18ab: 00a1  LDA $00a1
18ac: 0075  LDA $0075
18ad: 0049  LDA $0049
18ae: 0072  LDA $0072
18af: 008d  LDA $008d
18b0: 00d6  LDA $00d6
18b1: 0197  LDA $0197
18b2: 01a9  LDA $01a9
18b3: 0000  NOP
18b4: 0036  LDA $0036
18b5: 0001  LDA $0001(B)
18b6: 00d2  LDA $00d2
18b7: 0101  LDA $0101
18b8: 0127  LDA $0127
18b9: 0173  LDA $0173
18ba: 0123  LDA $0123
18bb: 00f9  LDA $00f9
18bc: 00c3  LDA $00c3
18bd: 0099  LDA $0099
18be: 007a  LDA $007a
18bf: 002a  LDA $002a
18c0: 007e  LDA $007e
18c1: 00a1  LDA $00a1
18c2: 00d9  LDA $00d9
18c3: 0101  LDA $0101
18c4: 0127  LDA $0127
18c5: 0173  LDA $0173
18c6: 0123  LDA $0123
18c7: 00f9  LDA $00f9
18c8: 01a9  LDA $01a9
18c9: 0000  NOP
18ca: 0036  LDA $0036
18cb: 0001  LDA $0001(B)
18cc: 00e3  LDA $00e3
18cd: 0197  LDA $0197
18ce: 001c  LDA $001c
18cf: 01a9  LDA $01a9
18d0: 0000  NOP
18d1: 0036  LDA $0036
18d2: 0001  LDA $0001(B)
18d3: 0001  LDA $0001(B)
18d4: 0137  LDA $0137
18d5: 0085  LDA $0085
18d6: 00a1  LDA $00a1
18d7: 00cb  LDA $00cb
18d8: 0100  LDA $0100
18d9: 0127  LDA $0127
18da: 0168  LDA $0168
18db: 0123  LDA $0123
18dc: 00f9  LDA $00f9
18dd: 00c6  LDA $00c6
18de: 0099  LDA $0099
18df: 0081  LDA $0081
18e0: 002a  LDA $002a
18e1: 007a  LDA $007a
18e2: 0099  LDA $0099
18e3: 00c4  LDA $00c4
18e4: 00f9  LDA $00f9
18e5: 0123  LDA $0123
18e6: 0173  LDA $0173
18e7: 0127  LDA $0127
18e8: 0101  LDA $0101
18e9: 00cc  LDA $00cc
18ea: 00a1  LDA $00a1
18eb: 007e  LDA $007e
18ec: 01a9  LDA $01a9
18ed: 0000  NOP
18ee: 0036  LDA $0036
18ef: 0001  LDA $0001(B)
18f0: 00cd  LDA $00cd
18f1: 00f9  LDA $00f9
18f2: 0123  LDA $0123
18f3: 0173  LDA $0173
18f4: 0127  LDA $0127
18f5: 0101  LDA $0101
18f6: 00d9  LDA $00d9
18f7: 00a1  LDA $00a1
18f8: 007e  LDA $007e
18f9: 002a  LDA $002a
18fa: 007a  LDA $007a
18fb: 0099  LDA $0099
18fc: 00c3  LDA $00c3
18fd: 00f9  LDA $00f9
18fe: 0123  LDA $0123
18ff: 0173  LDA $0173
1900: 0127  LDA $0127
1901: 0101  LDA $0101
1902: 01a9  LDA $01a9
1903: 0000  NOP
1904: 00a4  LDA $00a4
1905: 0001  LDA $0001(B)
1906: 00c8  LDA $00c8
1907: 00c9  LDA $00c9
1908: 010c  LDA $010c
1909: 00c7  LDA $00c7
190a: 0090  LDA $0090
190b: 0001  LDA $0001(B)
190c: 00db  LDA $00db
190d: 00c9  LDA $00c9
190e: 010c  LDA $010c
190f: 00c7  LDA $00c7
1910: 0090  LDA $0090
1911: 01a9  LDA $01a9
1912: 0000  NOP
1913: 00a5  LDA $00a5
1914: 0001  LDA $0001(B)
1915: 010c  LDA $010c
1916: 0090  LDA $0090
1917: 00c9  LDA $00c9
1918: 010c  LDA $010c
1919: 00c4  LDA $00c4
191a: 00ab  LDA $00ab
191b: 009c  LDA $009c
191c: 0001  LDA $0001(B)
191d: 00df  LDA $00df
191e: 00c9  LDA $00c9
191f: 010c  LDA $010c
1920: 00c7  LDA $00c7
1921: 0090  LDA $0090
1922: 01a9  LDA $01a9
1923: 0000  NOP
1924: 0036  LDA $0036
1925: 0001  LDA $0001(B)
1926: 0198  LDA $0198
1927: 000a  LDA $000a
1928: 019b  LDA $019b
1929: 01a9  LDA $01a9
192a: 0000  NOP
192b: 0036  LDA $0036
192c: 0001  LDA $0001(B)
192d: 00d2  LDA $00d2
192e: 0197  LDA $0197
192f: 0001  LDA $0001(B)
1930: 0008  LDA $0008
1931: 0197  LDA $0197
1932: 01a9  LDA $01a9
1933: 0000  NOP
1934: 0036  LDA $0036
1935: 0001  LDA $0001(B)
1936: 00cb  LDA $00cb
1937: 019b  LDA $019b
1938: 000a  LDA $000a
1939: 01a9  LDA $01a9
193a: 0000  NOP
193b: 0036  LDA $0036
193c: 0001  LDA $0001(B)
193d: 00df  LDA $00df
193e: 0100  LDA $0100
193f: 0127  LDA $0127
1940: 0173  LDA $0173
1941: 0123  LDA $0123
1942: 00fa  LDA $00fa
1943: 00c3  LDA $00c3
1944: 009a  LDA $009a
1945: 007a  LDA $007a
1946: 006a  LDA $006a
1947: 009b  LDA $009b
1948: 00a9  LDA $00a9
1949: 0001  LDA $0001(B)
194a: 00a6  LDA $00a6
194b: 010c  LDA $010c
194c: 00c7  LDA $00c7
194d: 0090  LDA $0090
194e: 00c9  LDA $00c9
194f: 01a9  LDA $01a9
1950: 0000  NOP
1951: 0036  LDA $0036
1952: 0001  LDA $0001(B)
1953: 0185  LDA $0185
1954: 002a  LDA $002a
1955: 0074  LDA $0074
1956: 0093  LDA $0093
1957: 00ae  LDA $00ae
1958: 00d6  LDA $00d6
1959: 00ee  LDA $00ee
195a: 010f  LDA $010f
195b: 0130  LDA $0130
195c: 0156  LDA $0156
195d: 012e  LDA $012e
195e: 0109  LDA $0109
195f: 00e8  LDA $00e8
1960: 00bf  LDA $00bf
1961: 008d  LDA $008d
1962: 0082  LDA $0082
1963: 0067  LDA $0067
1964: 0084  LDA $0084
1965: 0093  LDA $0093
1966: 00cd  LDA $00cd
1967: 010f  LDA $010f
1968: 0119  LDA $0119
1969: 0146  LDA $0146
196a: 0117  LDA $0117
196b: 0109  LDA $0109
196c: 01a9  LDA $01a9
196d: 0000  NOP
196e: 0036  LDA $0036
196f: 0001  LDA $0001(B)
1970: 00c8  LDA $00c8
1971: 0170  LDA $0170
1972: 0163  LDA $0163
1973: 0001  LDA $0001(B)
1974: 0012  LDA $0012
1975: 017c  LDA $017c
1976: 01a9  LDA $01a9
1977: 0000  NOP
1978: 0036  LDA $0036
1979: 0001  LDA $0001(B)
197a: 00c8  LDA $00c8
197b: 00e3  LDA $00e3
197c: 017c  LDA $017c
197d: 0123  LDA $0123
197e: 00fa  LDA $00fa
197f: 00c4  LDA $00c4
1980: 009a  LDA $009a
1981: 007a  LDA $007a
1982: 012d  LDA $012d
1983: 00f9  LDA $00f9
1984: 00c4  LDA $00c4
1985: 0099  LDA $0099
1986: 0072  LDA $0072
1987: 001e  LDA $001e
1988: 0001  LDA $0001(B)
1989: 00d7  LDA $00d7
198a: 017c  LDA $017c
198b: 01a9  LDA $01a9
198c: 0000  NOP
198d: 0036  LDA $0036
198e: 0001  LDA $0001(B)
198f: 018d  LDA $018d
1990: 00a9  LDA $00a9
1991: 008d  LDA $008d
1992: 006d  LDA $006d
1993: 006b  LDA $006b
1994: 006e  LDA $006e
1995: 0093  LDA $0093
1996: 00a2  LDA $00a2
1997: 00d2  LDA $00d2
1998: 0103  LDA $0103
1999: 010f  LDA $010f
199a: 0136  LDA $0136
199b: 013b  LDA $013b
199c: 0134  LDA $0134
199d: 0109  LDA $0109
199e: 00e9  LDA $00e9
199f: 01a9  LDA $01a9
19a0: 0000  NOP
19a1: 0036  LDA $0036
19a2: 0001  LDA $0001(B)
19a3: 00c8  LDA $00c8
19a4: 00e3  LDA $00e3
19a5: 0175  LDA $0175
19a6: 0134  LDA $0134
19a7: 0109  LDA $0109
19a8: 00f7  LDA $00f7
19a9: 00be  LDA $00be
19aa: 0098  LDA $0098
19ab: 008d  LDA $008d
19ac: 006d  LDA $006d
19ad: 0026  LDA $0026
19ae: 01a9  LDA $01a9
19af: 0000  NOP
19b0: 0036  LDA $0036
19b1: 0001  LDA $0001(B)
19b2: 0197  LDA $0197
19b3: 0007  LDA $0007
19b4: 00e3  LDA $00e3
19b5: 0197  LDA $0197
19b6: 0001  LDA $0001(B)
19b7: 0004  LDA $0004
19b8: 0182  LDA $0182
19b9: 01a9  LDA $01a9
19ba: 0000  NOP
19bb: 0036  LDA $0036
19bc: 0001  LDA $0001(B)
19bd: 00c8  LDA $00c8
19be: 00e3  LDA $00e3
19bf: 0197  LDA $0197
19c0: 0001  LDA $0001(B)
19c1: 0004  LDA $0004
19c2: 017c  LDA $017c
19c3: 01a9  LDA $01a9
19c4: 0000  NOP
19c5: 0036  LDA $0036
19c6: 0001  LDA $0001(B)
19c7: 018a  LDA $018a
19c8: 0093  LDA $0093
19c9: 006e  LDA $006e
19ca: 006b  LDA $006b
19cb: 006d  LDA $006d
19cc: 008d  LDA $008d
19cd: 0098  LDA $0098
19ce: 00be  LDA $00be
19cf: 00f7  LDA $00f7
19d0: 0109  LDA $0109
19d1: 0134  LDA $0134
19d2: 013b  LDA $013b
19d3: 0136  LDA $0136
19d4: 010f  LDA $010f
19d5: 0103  LDA $0103
19d6: 00cc  LDA $00cc
19d7: 003d  LDA $003d
19d8: 01a9  LDA $01a9
19d9: 0000  NOP
19da: 0036  LDA $0036
19db: 0001  LDA $0001(B)
19dc: 00c8  LDA $00c8
19dd: 00e3  LDA $00e3
19de: 0001  LDA $0001(B)
19df: 00bc  LDA $00bc
19e0: 0197  LDA $0197
19e1: 0001  LDA $0001(B)
19e2: 00d5  LDA $00d5
19e3: 00b3  LDA $00b3
19e4: 01a9  LDA $01a9
19e5: 0000  NOP
19e6: 0036  LDA $0036
19e7: 0001  LDA $0001(B)
19e8: 0120  LDA $0120
19e9: 017c  LDA $017c
19ea: 0001  LDA $0001(B)
19eb: 005d  LDA $005d
19ec: 00b3  LDA $00b3
19ed: 0001  LDA $0001(B)
19ee: 005d  LDA $005d
19ef: 017c  LDA $017c
19f0: 01a9  LDA $01a9
19f1: 0000  NOP
19f2: 0036  LDA $0036
19f3: 0001  LDA $0001(B)
19f4: 015a  LDA $015a
19f5: 0175  LDA $0175
19f6: 0001  LDA $0001(B)
19f7: 006b  LDA $006b
19f8: 00b7  LDA $00b7
19f9: 00a7  LDA $00a7
19fa: 008d  LDA $008d
19fb: 007b  LDA $007b
19fc: 0073  LDA $0073
19fd: 007d  LDA $007d
19fe: 0093  LDA $0093
19ff: 00b0  LDA $00b0
1a00: 01a9  LDA $01a9
1a01: 0000  NOP
1a02: 0036  LDA $0036
1a03: 0001  LDA $0001(B)
1a04: 00c8  LDA $00c8
1a05: 00e3  LDA $00e3
1a06: 0001  LDA $0001(B)
1a07: 00bc  LDA $00bc
1a08: 014a  LDA $014a
1a09: 0001  LDA $0001(B)
1a0a: 0176  LDA $0176
1a0b: 0024  LDA $0024
1a0c: 0178  LDA $0178
1a0d: 01a9  LDA $01a9
1a0e: 0000  NOP
1a0f: 0036  LDA $0036
1a10: 0001  LDA $0001(B)
1a11: 00e3  LDA $00e3
1a12: 00b3  LDA $00b3
1a13: 0197  LDA $0197
1a14: 01a9  LDA $01a9
1a15: 0000  NOP
1a16: 0036  LDA $0036
1a17: 0001  LDA $0001(B)
1a18: 00c8  LDA $00c8
1a19: 00e3  LDA $00e3
1a1a: 0164  LDA $0164
1a1b: 016f  LDA $016f
1a1c: 00b3  LDA $00b3
1a1d: 01a9  LDA $01a9
1a1e: 0000  NOP
1a1f: 0036  LDA $0036
1a20: 0001  LDA $0001(B)
1a21: 00c8  LDA $00c8
1a22: 00e3  LDA $00e3
1a23: 0193  LDA $0193
1a24: 00e3  LDA $00e3
1a25: 01a9  LDA $01a9
1a26: 0000  NOP
1a27: 0036  LDA $0036
1a28: 0001  LDA $0001(B)
1a29: 0156  LDA $0156
1a2a: 006e  LDA $006e
1a2b: 0093  LDA $0093
1a2c: 00a2  LDA $00a2
1a2d: 00d2  LDA $00d2
1a2e: 0103  LDA $0103
1a2f: 010f  LDA $010f
1a30: 0136  LDA $0136
1a31: 013b  LDA $013b
1a32: 0134  LDA $0134
1a33: 0109  LDA $0109
1a34: 00f7  LDA $00f7
1a35: 00be  LDA $00be
1a36: 0098  LDA $0098
1a37: 008d  LDA $008d
1a38: 006d  LDA $006d
1a39: 006b  LDA $006b
1a3a: 01a9  LDA $01a9
1a3b: 0000  NOP
1a3c: 0036  LDA $0036
1a3d: 0001  LDA $0001(B)
1a3e: 00c8  LDA $00c8
1a3f: 00e3  LDA $00e3
1a40: 017f  LDA $017f
1a41: 0123  LDA $0123
1a42: 00fa  LDA $00fa
1a43: 00c2  LDA $00c2
1a44: 009a  LDA $009a
1a45: 007a  LDA $007a
1a46: 001a  LDA $001a
1a47: 01a9  LDA $01a9
1a48: 0000  NOP
1a49: 0036  LDA $0036
1a4a: 0001  LDA $0001(B)
1a4b: 0156  LDA $0156
1a4c: 006e  LDA $006e
1a4d: 0093  LDA $0093
1a4e: 00a2  LDA $00a2
1a4f: 00d2  LDA $00d2
1a50: 0103  LDA $0103
1a51: 010f  LDA $010f
1a52: 0136  LDA $0136
1a53: 013b  LDA $013b
1a54: 0134  LDA $0134
1a55: 0109  LDA $0109
1a56: 00f7  LDA $00f7
1a57: 00be  LDA $00be
1a58: 0098  LDA $0098
1a59: 008d  LDA $008d
1a5a: 006d  LDA $006d
1a5b: 006b  LDA $006b
1a5c: 0001  LDA $0001(B)
1a5d: 013f  LDA $013f
1a5e: 0152  LDA $0152
1a5f: 01a9  LDA $01a9
1a60: 0000  NOP
1a61: 0036  LDA $0036
1a62: 0001  LDA $0001(B)
1a63: 00c8  LDA $00c8
1a64: 00e3  LDA $00e3
1a65: 017f  LDA $017f
1a66: 0123  LDA $0123
1a67: 00fa  LDA $00fa
1a68: 00c2  LDA $00c2
1a69: 009a  LDA $009a
1a6a: 007a  LDA $007a
1a6b: 001a  LDA $001a
1a6c: 0001  LDA $0001(B)
1a6d: 017f  LDA $017f
1a6e: 0123  LDA $0123
1a6f: 00fa  LDA $00fa
1a70: 00c1  LDA $00c1
1a71: 01a9  LDA $01a9
1a72: 0000  NOP
1a73: 0036  LDA $0036
1a74: 0001  LDA $0001(B)
1a75: 00cc  LDA $00cc
1a76: 00fa  LDA $00fa
1a77: 0123  LDA $0123
1a78: 0173  LDA $0173
1a79: 0127  LDA $0127
1a7a: 0100  LDA $0100
1a7b: 00cd  LDA $00cd
1a7c: 00a0  LDA $00a0
1a7d: 007e  LDA $007e
1a7e: 002b  LDA $002b
1a7f: 007e  LDA $007e
1a80: 00a0  LDA $00a0
1a81: 00cc  LDA $00cc
1a82: 0100  LDA $0100
1a83: 0127  LDA $0127
1a84: 0172  LDA $0172
1a85: 0123  LDA $0123
1a86: 00fa  LDA $00fa
1a87: 01a9  LDA $01a9
1a88: 0000  NOP
1a89: 0036  LDA $0036
1a8a: 0001  LDA $0001(B)
1a8b: 00e3  LDA $00e3
1a8c: 0197  LDA $0197
1a8d: 0001  LDA $0001(B)
1a8e: 003d  LDA $003d
1a8f: 00b3  LDA $00b3
1a90: 01a9  LDA $01a9
1a91: 0000  NOP
1a92: 0036  LDA $0036
1a93: 0001  LDA $0001(B)
1a94: 00e3  LDA $00e3
1a95: 00b6  LDA $00b6
1a96: 00f8  LDA $00f8
1a97: 0109  LDA $0109
1a98: 0134  LDA $0134
1a99: 013b  LDA $013b
1a9a: 0136  LDA $0136
1a9b: 010f  LDA $010f
1a9c: 0102  LDA $0102
1a9d: 00dc  LDA $00dc
1a9e: 01a9  LDA $01a9
1a9f: 0000  NOP
1aa0: 0036  LDA $0036
1aa1: 0001  LDA $0001(B)
1aa2: 00e3  LDA $00e3
1aa3: 0163  LDA $0163
1aa4: 0170  LDA $0170
1aa5: 01a9  LDA $01a9
1aa6: 0000  NOP
1aa7: 0036  LDA $0036
1aa8: 0001  LDA $0001(B)
1aa9: 00e3  LDA $00e3
1aaa: 0113  LDA $0113
1aab: 0159  LDA $0159
1aac: 0150  LDA $0150
1aad: 0120  LDA $0120
1aae: 01a9  LDA $01a9
1aaf: 0000  NOP
1ab0: 0036  LDA $0036
1ab1: 0001  LDA $0001(B)
1ab2: 00c8  LDA $00c8
1ab3: 018e  LDA $018e
1ab4: 0001  LDA $0001(B)
1ab5: 000e  LDA $000e
1ab6: 018b  LDA $018b
1ab7: 01a9  LDA $01a9
1ab8: 0000  NOP
1ab9: 0048  LDA $0048
1aba: 0001  LDA $0001(B)
1abb: 0160  LDA $0160
1abc: 00d4  LDA $00d4
1abd: 0001  LDA $0001(B)
1abe: 0041  LDA $0041
1abf: 0165  LDA $0165
1ac0: 016d  LDA $016d
1ac1: 01a9  LDA $01a9
1ac2: 0000  NOP
1ac3: 0036  LDA $0036
1ac4: 0001  LDA $0001(B)
1ac5: 00f5  LDA $00f5
1ac6: 0189  LDA $0189
1ac7: 000c  LDA $000c
1ac8: 0197  LDA $0197
1ac9: 01a9  LDA $01a9
1aca: 0000  NOP
1acb: 0015  LDA $0015
1acc: 0001  LDA $0001(B)
1acd: 0196  LDA $0196
1ace: 0062  LDA $0062
1acf: 00e6  LDA $00e6
1ad0: 014a  LDA $014a
1ad1: 01a9  LDA $01a9
1ad2: 0000  NOP
1ad3: 0036  LDA $0036
1ad4: 0001  LDA $0001(B)
1ad5: 00e4  LDA $00e4
1ad6: 0190  LDA $0190
1ad7: 01a9  LDA $01a9
1ad8: 0000  NOP
1ad9: 0077  LDA $0077
1ada: 0001  LDA $0001(B)
1adb: 00c5  LDA $00c5
1adc: 014a  LDA $014a
1add: 00e6  LDA $00e6
1ade: 0062  LDA $0062
1adf: 01a9  LDA $01a9
1ae0: 0000  NOP
1ae1: 004d  LDA $004d
1ae2: 0001  LDA $0001(B)
1ae3: 011f  LDA $011f
1ae4: 014b  LDA $014b
1ae5: 0149  LDA $0149
1ae6: 01a9  LDA $01a9
1ae7: 0000  NOP
1ae8: 001f  LDA $001f
1ae9: 0001  LDA $0001(B)
1aea: 00c3  LDA $00c3
1aeb: 01a5  LDA $01a5
1aec: 01a9  LDA $01a9
1aed: 0000  NOP
1aee: 004c  LDA $004c
1aef: 0001  LDA $0001(B)
1af0: 0144  LDA $0144
1af1: 0153  LDA $0153
1af2: 01a9  LDA $01a9
1af3: 0000  NOP
1af4: 0052  LDA $0052
1af5: 0001  LDA $0001(B)
1af6: 0105  LDA $0105
1af7: 00fe  LDA $00fe
1af8: 0130  LDA $0130
1af9: 013b  LDA $013b
1afa: 012e  LDA $012e
1afb: 0109  LDA $0109
1afc: 00e8  LDA $00e8
1afd: 00bb  LDA $00bb
1afe: 0001  LDA $0001(B)
1aff: 00d1  LDA $00d1
1b00: 0093  LDA $0093
1b01: 0084  LDA $0084
1b02: 0054  LDA $0054
1b03: 0082  LDA $0082
1b04: 008d  LDA $008d
1b05: 00c3  LDA $00c3
1b06: 0109  LDA $0109
1b07: 0117  LDA $0117
1b08: 015d  LDA $015d
1b09: 0119  LDA $0119
1b0a: 010f  LDA $010f
1b0b: 01a9  LDA $01a9
1b0c: 0000  NOP
1b0d: 0050  LDA $0050
1b0e: 0001  LDA $0001(B)
1b0f: 00c8  LDA $00c8
1b10: 00e3  LDA $00e3
1b11: 0001  LDA $0001(B)
1b12: 00bd  LDA $00bd
1b13: 0110  LDA $0110
1b14: 0131  LDA $0131
1b15: 014a  LDA $014a
1b16: 012d  LDA $012d
1b17: 0107  LDA $0107
1b18: 00c0  LDA $00c0
1b19: 008b  LDA $008b
1b1a: 0072  LDA $0072
1b1b: 0062  LDA $0062
1b1c: 0075  LDA $0075
1b1d: 0094  LDA $0094
1b1e: 01a9  LDA $01a9
1b1f: 0000  NOP
1b20: 0052  LDA $0052
1b21: 0001  LDA $0001(B)
1b22: 0187  LDA $0187
1b23: 0094  LDA $0094
1b24: 0075  LDA $0075
1b25: 0062  LDA $0062
1b26: 0072  LDA $0072
1b27: 008b  LDA $008b
1b28: 00c0  LDA $00c0
1b29: 0107  LDA $0107
1b2a: 012d  LDA $012d
1b2b: 014a  LDA $014a
1b2c: 0131  LDA $0131
1b2d: 0110  LDA $0110
1b2e: 01a9  LDA $01a9
1b2f: 0000  NOP
1b30: 0036  LDA $0036
1b31: 0001  LDA $0001(B)
1b32: 0186  LDA $0186
1b33: 008c  LDA $008c
1b34: 0072  LDA $0072
1b35: 0062  LDA $0062
1b36: 0075  LDA $0075
1b37: 0095  LDA $0095
1b38: 00d1  LDA $00d1
1b39: 0111  LDA $0111
1b3a: 0131  LDA $0131
1b3b: 014a  LDA $014a
1b3c: 012d  LDA $012d
1b3d: 0108  LDA $0108
1b3e: 0001  LDA $0001(B)
1b3f: 00d4  LDA $00d4
1b40: 00b3  LDA $00b3
1b41: 01a9  LDA $01a9
1b42: 0000  NOP
1b43: 0052  LDA $0052
1b44: 0001  LDA $0001(B)
1b45: 00d3  LDA $00d3
1b46: 0185  LDA $0185
1b47: 00cb  LDA $00cb
1b48: 0095  LDA $0095
1b49: 0075  LDA $0075
1b4a: 0062  LDA $0062
1b4b: 0072  LDA $0072
1b4c: 008b  LDA $008b
1b4d: 00c0  LDA $00c0
1b4e: 0107  LDA $0107
1b4f: 012d  LDA $012d
1b50: 0156  LDA $0156
1b51: 0132  LDA $0132
1b52: 01a9  LDA $01a9
1b53: 0000  NOP
1b54: 0059  LDA $0059
1b55: 0001  LDA $0001(B)
1b56: 0156  LDA $0156
1b57: 00e0  LDA $00e0
1b58: 0100  LDA $0100
1b59: 0126  LDA $0126
1b5a: 0125  LDA $0125
1b5b: 0001  LDA $0001(B)
1b5c: 0028  LDA $0028
1b5d: 0174  LDA $0174
1b5e: 01a9  LDA $01a9
1b5f: 0000  NOP
1b60: 0053  LDA $0053
1b61: 0001  LDA $0001(B)
1b62: 00e7  LDA $00e7
1b63: 012d  LDA $012d
1b64: 0156  LDA $0156
1b65: 0131  LDA $0131
1b66: 0110  LDA $0110
1b67: 00de  LDA $00de
1b68: 0001  LDA $0001(B)
1b69: 00c3  LDA $00c3
1b6a: 0094  LDA $0094
1b6b: 0075  LDA $0075
1b6c: 0062  LDA $0062
1b6d: 0072  LDA $0072
1b6e: 008b  LDA $008b
1b6f: 00c2  LDA $00c2
1b70: 0107  LDA $0107
1b71: 012d  LDA $012d
1b72: 014a  LDA $014a
1b73: 0131  LDA $0131
1b74: 0111  LDA $0111
1b75: 01a9  LDA $01a9
1b76: 0000  NOP
1b77: 0050  LDA $0050
1b78: 0001  LDA $0001(B)
1b79: 00c8  LDA $00c8
1b7a: 00e3  LDA $00e3
1b7b: 0001  LDA $0001(B)
1b7c: 00bd  LDA $00bd
1b7d: 0110  LDA $0110
1b7e: 0131  LDA $0131
1b7f: 014a  LDA $014a
1b80: 012d  LDA $012d
1b81: 0108  LDA $0108
1b82: 00b9  LDA $00b9
1b83: 01a9  LDA $01a9
1b84: 0000  NOP
1b85: 0036  LDA $0036
1b86: 0001  LDA $0001(B)
1b87: 015f  LDA $015f
1b88: 00c7  LDA $00c7
1b89: 0001  LDA $0001(B)
1b8a: 0069  LDA $0069
1b8b: 0156  LDA $0156
1b8c: 00b7  LDA $00b7
1b8d: 0001  LDA $0001(B)
1b8e: 005d  LDA $005d
1b8f: 0175  LDA $0175
1b90: 01a9  LDA $01a9
1b91: 0000  NOP
1b92: 0065  LDA $0065
1b93: 0001  LDA $0001(B)
1b94: 012b  LDA $012b
1b95: 0125  LDA $0125
1b96: 0126  LDA $0126
1b97: 0100  LDA $0100
1b98: 00de  LDA $00de
1b99: 005d  LDA $005d
1b9a: 0001  LDA $0001(B)
1b9b: 013e  LDA $013e
1b9c: 00c9  LDA $00c9
1b9d: 01a9  LDA $01a9
1b9e: 0000  NOP
1b9f: 0050  LDA $0050
1ba0: 0001  LDA $0001(B)
1ba1: 00c8  LDA $00c8
1ba2: 00e3  LDA $00e3
1ba3: 0001  LDA $0001(B)
1ba4: 0181  LDA $0181
1ba5: 0025  LDA $0025
1ba6: 0073  LDA $0073
1ba7: 0001  LDA $0001(B)
1ba8: 012f  LDA $012f
1ba9: 0179  LDA $0179
1baa: 01a9  LDA $01a9
1bab: 0000  NOP
1bac: 0036  LDA $0036
1bad: 0001  LDA $0001(B)
1bae: 0133  LDA $0133
1baf: 0156  LDA $0156
1bb0: 00b3  LDA $00b3
1bb1: 0001  LDA $0001(B)
1bb2: 005d  LDA $005d
1bb3: 0175  LDA $0175
1bb4: 01a9  LDA $01a9
1bb5: 0000  NOP
1bb6: 0039  LDA $0039
1bb7: 0001  LDA $0001(B)
1bb8: 00c8  LDA $00c8
1bb9: 00dd  LDA $00dd
1bba: 0001  LDA $0001(B)
1bbb: 00c3  LDA $00c3
1bbc: 0101  LDA $0101
1bbd: 011a  LDA $011a
1bbe: 0118  LDA $0118
1bbf: 0116  LDA $0116
1bc0: 00f9  LDA $00f9
1bc1: 00b9  LDA $00b9
1bc2: 0001  LDA $0001(B)
1bc3: 00d8  LDA $00d8
1bc4: 0101  LDA $0101
1bc5: 011a  LDA $011a
1bc6: 0118  LDA $0118
1bc7: 0116  LDA $0116
1bc8: 00f9  LDA $00f9
1bc9: 00b9  LDA $00b9
1bca: 01a9  LDA $01a9
1bcb: 0000  NOP
1bcc: 0052  LDA $0052
1bcd: 0001  LDA $0001(B)
1bce: 00c8  LDA $00c8
1bcf: 00dd  LDA $00dd
1bd0: 0001  LDA $0001(B)
1bd1: 00c3  LDA $00c3
1bd2: 0110  LDA $0110
1bd3: 0131  LDA $0131
1bd4: 014a  LDA $014a
1bd5: 012d  LDA $012d
1bd6: 0108  LDA $0108
1bd7: 00b9  LDA $00b9
1bd8: 01a9  LDA $01a9
1bd9: 0000  NOP
1bda: 0052  LDA $0052
1bdb: 0001  LDA $0001(B)
1bdc: 0146  LDA $0146
1bdd: 0075  LDA $0075
1bde: 0095  LDA $0095
1bdf: 00d1  LDA $00d1
1be0: 0111  LDA $0111
1be1: 0131  LDA $0131
1be2: 014a  LDA $014a
1be3: 012d  LDA $012d
1be4: 0107  LDA $0107
1be5: 00c0  LDA $00c0
1be6: 008b  LDA $008b
1be7: 0072  LDA $0072
1be8: 0062  LDA $0062
1be9: 01a9  LDA $01a9
1bea: 0000  NOP
1beb: 0053  LDA $0053
1bec: 0001  LDA $0001(B)
1bed: 00c2  LDA $00c2
1bee: 00e3  LDA $00e3
1bef: 0001  LDA $0001(B)
1bf0: 00c3  LDA $00c3
1bf1: 0110  LDA $0110
1bf2: 0131  LDA $0131
1bf3: 014a  LDA $014a
1bf4: 012d  LDA $012d
1bf5: 0107  LDA $0107
1bf6: 00c0  LDA $00c0
1bf7: 008b  LDA $008b
1bf8: 0072  LDA $0072
1bf9: 0062  LDA $0062
1bfa: 0075  LDA $0075
1bfb: 0094  LDA $0094
1bfc: 01a9  LDA $01a9
1bfd: 0000  NOP
1bfe: 0053  LDA $0053
1bff: 0001  LDA $0001(B)
1c00: 0187  LDA $0187
1c01: 0094  LDA $0094
1c02: 0075  LDA $0075
1c03: 0062  LDA $0062
1c04: 0072  LDA $0072
1c05: 008b  LDA $008b
1c06: 00c0  LDA $00c0
1c07: 0107  LDA $0107
1c08: 012d  LDA $012d
1c09: 014a  LDA $014a
1c0a: 0131  LDA $0131
1c0b: 0110  LDA $0110
1c0c: 0001  LDA $0001(B)
1c0d: 00d8  LDA $00d8
1c0e: 00b3  LDA $00b3
1c0f: 01a9  LDA $01a9
1c10: 0000  NOP
1c11: 0052  LDA $0052
1c12: 0001  LDA $0001(B)
1c13: 00c8  LDA $00c8
1c14: 00dd  LDA $00dd
1c15: 0001  LDA $0001(B)
1c16: 00c2  LDA $00c2
1c17: 011d  LDA $011d
1c18: 0131  LDA $0131
1c19: 0146  LDA $0146
1c1a: 012d  LDA $012d
1c1b: 0107  LDA $0107
1c1c: 01a9  LDA $01a9
1c1d: 0000  NOP
1c1e: 0052  LDA $0052
1c1f: 0001  LDA $0001(B)
1c20: 00cb  LDA $00cb
1c21: 0109  LDA $0109
1c22: 012e  LDA $012e
1c23: 014a  LDA $014a
1c24: 0130  LDA $0130
1c25: 010f  LDA $010f
1c26: 00cc  LDA $00cc
1c27: 0093  LDA $0093
1c28: 0074  LDA $0074
1c29: 0062  LDA $0062
1c2a: 0074  LDA $0074
1c2b: 0092  LDA $0092
1c2c: 00cc  LDA $00cc
1c2d: 010e  LDA $010e
1c2e: 0130  LDA $0130
1c2f: 014a  LDA $014a
1c30: 012e  LDA $012e
1c31: 010a  LDA $010a
1c32: 01a9  LDA $01a9
1c33: 0000  NOP
1c34: 0051  LDA $0051
1c35: 0001  LDA $0001(B)
1c36: 00db  LDA $00db
1c37: 017c  LDA $017c
1c38: 0001  LDA $0001(B)
1c39: 003f  LDA $003f
1c3a: 00b4  LDA $00b4
1c3b: 0109  LDA $0109
1c3c: 0117  LDA $0117
1c3d: 0146  LDA $0146
1c3e: 011a  LDA $011a
1c3f: 01a9  LDA $01a9
1c40: 0000  NOP
1c41: 0052  LDA $0052
1c42: 0001  LDA $0001(B)
1c43: 00dd  LDA $00dd
1c44: 00b9  LDA $00b9
1c45: 0108  LDA $0108
1c46: 012d  LDA $012d
1c47: 014a  LDA $014a
1c48: 0131  LDA $0131
1c49: 0110  LDA $0110
1c4a: 0001  LDA $0001(B)
1c4b: 00d8  LDA $00d8
1c4c: 00b5  LDA $00b5
1c4d: 01a9  LDA $01a9
1c4e: 0000  NOP
1c4f: 0052  LDA $0052
1c50: 0001  LDA $0001(B)
1c51: 00dd  LDA $00dd
1c52: 015c  LDA $015c
1c53: 015e  LDA $015e
1c54: 01a9  LDA $01a9
1c55: 0000  NOP
1c56: 0039  LDA $0039
1c57: 0001  LDA $0001(B)
1c58: 00dd  LDA $00dd
1c59: 0121  LDA $0121
1c5a: 014f  LDA $014f
1c5b: 014e  LDA $014e
1c5c: 012a  LDA $012a
1c5d: 01a9  LDA $01a9
1c5e: 0000  NOP
1c5f: 0052  LDA $0052
1c60: 0001  LDA $0001(B)
1c61: 00c8  LDA $00c8
1c62: 0184  LDA $0184
1c63: 0001  LDA $0001(B)
1c64: 0018  LDA $0018
1c65: 0183  LDA $0183
1c66: 01a9  LDA $01a9
1c67: 0000  NOP
1c68: 0053  LDA $0053
1c69: 0001  LDA $0001(B)
1c6a: 0122  LDA $0122
1c6b: 0118  LDA $0118
1c6c: 011b  LDA $011b
1c6d: 0111  LDA $0111
1c6e: 0159  LDA $0159
1c6f: 0001  LDA $0001(B)
1c70: 0011  LDA $0011
1c71: 0164  LDA $0164
1c72: 01a9  LDA $01a9
1c73: 0000  NOP
1c74: 0052  LDA $0052
1c75: 0001  LDA $0001(B)
1c76: 00f2  LDA $00f2
1c77: 0182  LDA $0182
1c78: 0014  LDA $0014
1c79: 0185  LDA $0185
1c7a: 01a9  LDA $01a9
1c7b: 0000  NOP
1c7c: 0017  LDA $0017
1c7d: 0001  LDA $0001(B)
1c7e: 019f  LDA $019f
1c7f: 0090  LDA $0090
1c80: 009c  LDA $009c
1c81: 00aa  LDA $00aa
1c82: 00be  LDA $00be
1c83: 00aa  LDA $00aa
1c84: 009b  LDA $009b
1c85: 008f  LDA $008f
1c86: 010b  LDA $010b
1c87: 00fb  LDA $00fb
1c88: 00ea  LDA $00ea
1c89: 00be  LDA $00be
1c8a: 00ea  LDA $00ea
1c8b: 00fc  LDA $00fc
1c8c: 010c  LDA $010c
1c8d: 01a9  LDA $01a9
1c8e: 0000  NOP
1c8f: 00bb  LDA $00bb
1c90: 0001  LDA $0001(B)
1c91: 00c5  LDA $00c5
1c92: 00e6  LDA $00e6
1c93: 01a9  LDA $01a9
1c94: 0000  NOP
1c95: 0070  LDA $0070
1c96: 0001  LDA $0001(B)
1c97: 00e4  LDA $00e4
1c98: 010c  LDA $010c
1c99: 00fc  LDA $00fc
1c9a: 00ea  LDA $00ea
1c9b: 00be  LDA $00be
1c9c: 00ea  LDA $00ea
1c9d: 00fb  LDA $00fb
1c9e: 010b  LDA $010b
1c9f: 008f  LDA $008f
1ca0: 009b  LDA $009b
1ca1: 00aa  LDA $00aa
1ca2: 00be  LDA $00be
1ca3: 00aa  LDA $00aa
1ca4: 009c  LDA $009c
1ca5: 0090  LDA $0090
1ca6: 01a9  LDA $01a9
1ca7: 0000  NOP
1ca8: 004e  LDA $004e
1ca9: 0001  LDA $0001(B)
1caa: 00e2  LDA $00e2
1cab: 011c  LDA $011c
1cac: 010d  LDA $010d
1cad: 010c  LDA $010c
1cae: 00fc  LDA $00fc
1caf: 0115  LDA $0115
1cb0: 00fc  LDA $00fc
1cb1: 010c  LDA $010c
1cb2: 010d  LDA $010d
1cb3: 011c  LDA $011c
1cb4: 01a9  LDA $01a9
1cb5: 0000  NOP
1cb6: 002e  LDA $002e
1cb7: 0001  LDA $0001(B)
1cb8: 0171  LDA $0171
1cb9: 00c2  LDA $00c2
1cba: 01a9  LDA $01a9
1cbb: 0000  NOP
1cbc: 0036  LDA $0036
1cbd: 0001  LDA $0001(B)
1cbe: 00d6  LDA $00d6
1cbf: 013b  LDA $013b
1cc0: 0138  LDA $0138
1cc1: 0143  LDA $0143
1cc2: 013b  LDA $013b
1cc3: 01a9  LDA $01a9
1cc4: 0000  NOP
1cc5: 0036  LDA $0036
1cc6: 0001  LDA $0001(B)
1cc7: 0168  LDA $0168
1cc8: 00e3  LDA $00e3
1cc9: 0001  LDA $0001(B)
1cca: 0039  LDA $0039
1ccb: 016c  LDA $016c
1ccc: 0167  LDA $0167
1ccd: 01a9  LDA $01a9
1cce: 0000  NOP
1ccf: 017d  LDA $017d
1cd0: 0001  LDA $0001(B)
1cd1: 00c3  LDA $00c3
1cd2: 0002  LDA $0002(P)
1cd3: 01a8  LDA $01a8
1cd4: 0000  NOP
1cd5: 0192  LDA $0192
1cd6: 0001  LDA $0001(B)
1cd7: 0019  LDA $0019
1cd8: 005e  LDA $005e
1cd9: 01a8  LDA $01a8
1cda: 0000  NOP
1cdb: 0038  LDA $0038
1cdc: 0001  LDA $0001(B)
1cdd: 00d8  LDA $00d8
1cde: 0129  LDA $0129
1cdf: 00fe  LDA $00fe
1ce0: 010c  LDA $010c
1ce1: 0154  LDA $0154
1ce2: 010c  LDA $010c
1ce3: 00fe  LDA $00fe
1ce4: 0129  LDA $0129
1ce5: 0001  LDA $0001(B)
1ce6: 001d  LDA $001d
1ce7: 00b5  LDA $00b5
1ce8: 0001  LDA $0001(B)
1ce9: 016e  LDA $016e
1cea: 00b8  LDA $00b8
1ceb: 01a9  LDA $01a9
1cec: 0000  NOP
1ced: 0036  LDA $0036
1cee: 0001  LDA $0001(B)
1cef: 00c8  LDA $00c8
1cf0: 00e3  LDA $00e3
1cf1: 0001  LDA $0001(B)
1cf2: 00bb  LDA $00bb
1cf3: 0197  LDA $0197
1cf4: 01a9  LDA $01a9
1cf5: 0000  NOP
1cf6: 0036  LDA $0036
1cf7: 0001  LDA $0001(B)
1cf8: 00d6  LDA $00d6
1cf9: 0197  LDA $0197
1cfa: 0001  LDA $0001(B)
1cfb: 0068  LDA $0068
1cfc: 0145  LDA $0145
1cfd: 0066  LDA $0066
1cfe: 01a9  LDA $01a9
1cff: 0000  NOP
1d00: 01a3  LDA $01a3
1d01: 0001  LDA $0001(B)
1d02: 0027  LDA $0027
1d03: 0080  LDA $0080
1d04: 008f  LDA $008f
1d05: 0090  LDA $0090
1d06: 009e  LDA $009e
1d07: 0086  LDA $0086
1d08: 009e  LDA $009e
1d09: 0090  LDA $0090
1d0a: 008f  LDA $008f
1d0b: 0080  LDA $0080
1d0c: 01a8  LDA $01a8
1d0d: 0000  NOP
1d0e: 0036  LDA $0036
1d0f: 0001  LDA $0001(B)
1d10: 0141  LDA $0141
1d11: 0168  LDA $0168
1d12: 0001  LDA $0001(B)
1d13: 013e  LDA $013e
1d14: 0093  LDA $0093
1d15: 0091  LDA $0091
1d16: 0083  LDA $0083
1d17: 008f  LDA $008f
1d18: 009b  LDA $009b
1d19: 00a8  LDA $00a8
1d1a: 00ba  LDA $00ba
1d1b: 00a8  LDA $00a8
1d1c: 008d  LDA $008d
1d1d: 008f  LDA $008f
1d1e: 0083  LDA $0083
1d1f: 0091  LDA $0091
1d20: 009f  LDA $009f
1d21: 00c9  LDA $00c9
1d22: 00ff  LDA $00ff
1d23: 010d  LDA $010d
1d24: 0118  LDA $0118
1d25: 010b  LDA $010b
1d26: 013a  LDA $013a
1d27: 010b  LDA $010b
1d28: 0118  LDA $0118
1d29: 011a  LDA $011a
1d2a: 00ec  LDA $00ec
1d2b: 01a9  LDA $01a9
1d2c: 0000  NOP
1d2d: 01a1  LDA $01a1
1d2e: 0001  LDA $0001(B)
1d2f: 0013  LDA $0013
1d30: 005a  LDA $005a
1d31: 01a8  LDA $01a8
1d32: 0000  NOP
1d33: 0053  LDA $0053
1d34: 0001  LDA $0001(B)
1d35: 015b  LDA $015b
1d36: 010f  LDA $010f
1d37: 0088  LDA $0088
1d38: 0001  LDA $0001(B)
1d39: 016a  LDA $016a
1d3a: 008c  LDA $008c
1d3b: 0072  LDA $0072
1d3c: 0062  LDA $0062
1d3d: 0075  LDA $0075
1d3e: 0095  LDA $0095
1d3f: 00d1  LDA $00d1
1d40: 0111  LDA $0111
1d41: 0131  LDA $0131
1d42: 014a  LDA $014a
1d43: 012d  LDA $012d
1d44: 0108  LDA $0108
1d45: 01a9  LDA $01a9
1d46: 0000  NOP
1d47: 01a2  LDA $01a2
1d48: 0001  LDA $0001(B)
1d49: 0021  LDA $0021
1d4a: 0063  LDA $0063
1d4b: 0061  LDA $0061
1d4c: 01a8  LDA $01a8
1d4d: 0000  NOP
1d4e: 0191  LDA $0191
1d4f: 0001  LDA $0001(B)
1d50: 0022  LDA $0022
1d51: 00c9  LDA $00c9
1d52: 0090  LDA $0090
1d53: 00c7  LDA $00c7
1d54: 010c  LDA $010c
1d55: 0001  LDA $0001(B)
1d56: 0057  LDA $0057
1d57: 0090  LDA $0090
1d58: 00c7  LDA $00c7
1d59: 010c  LDA $010c
1d5a: 00c9  LDA $00c9
1d5b: 01a8  LDA $01a8
1d5c: 0000  NOP
1d5d: 018f  LDA $018f
1d5e: 0001  LDA $0001(B)
1d5f: 0016  LDA $0016
1d60: 00ca  LDA $00ca
1d61: 0092  LDA $0092
1d62: 0083  LDA $0083
1d63: 008e  LDA $008e
1d64: 00c6  LDA $00c6
1d65: 010a  LDA $010a
1d66: 0118  LDA $0118
1d67: 010e  LDA $010e
1d68: 01a8  LDA $01a8
1d69: 0000  NOP
1d6a: 01a4  LDA $01a4
1d6b: 0001  LDA $0001(B)
1d6c: 0019  LDA $0019
1d6d: 00c9  LDA $00c9
1d6e: 0090  LDA $0090
1d6f: 00c7  LDA $00c7
1d70: 010c  LDA $010c
1d71: 0001  LDA $0001(B)
1d72: 0057  LDA $0057
1d73: 0090  LDA $0090
1d74: 00c7  LDA $00c7
1d75: 010c  LDA $010c
1d76: 00c9  LDA $00c9
1d77: 01a8  LDA $01a8
1d78: 0000  NOP
1d79: 0036  LDA $0036
1d7a: 0001  LDA $0001(B)
1d7b: 00c8  LDA $00c8
1d7c: 019e  LDA $019e
1d7d: 0001  LDA $0001(B)
1d7e: 007b  LDA $007b
1d7f: 006e  LDA $006e
1d80: 006b  LDA $006b
1d81: 006d  LDA $006d
1d82: 008d  LDA $008d
1d83: 0098  LDA $0098
1d84: 00be  LDA $00be
1d85: 00f7  LDA $00f7
1d86: 0109  LDA $0109
1d87: 0134  LDA $0134
1d88: 013b  LDA $013b
1d89: 0136  LDA $0136
1d8a: 010f  LDA $010f
1d8b: 0103  LDA $0103
1d8c: 00d2  LDA $00d2
1d8d: 00a2  LDA $00a2
1d8e: 0093  LDA $0093
1d8f: 01a9  LDA $01a9
1d90: 0000  NOP
1d91: 0036  LDA $0036
1d92: 0001  LDA $0001(B)
1d93: 00c8  LDA $00c8
1d94: 015f  LDA $015f
1d95: 0173  LDA $0173
1d96: 0001  LDA $0001(B)
1d97: 0049  LDA $0049
1d98: 00b3  LDA $00b3
1d99: 0160  LDA $0160
1d9a: 0001  LDA $0001(B)
1d9b: 001b  LDA $001b
1d9c: 017f  LDA $017f
1d9d: 01a9  LDA $01a9
1d9e: 0000  NOP
1d9f: 0052  LDA $0052
1da0: 0001  LDA $0001(B)
1da1: 00c8  LDA $00c8
1da2: 0188  LDA $0188
1da3: 0001  LDA $0001(B)
1da4: 0067  LDA $0067
1da5: 0062  LDA $0062
1da6: 0072  LDA $0072
1da7: 008b  LDA $008b
1da8: 00c0  LDA $00c0
1da9: 0107  LDA $0107
1daa: 012d  LDA $012d
1dab: 014a  LDA $014a
1dac: 0131  LDA $0131
1dad: 0111  LDA $0111
1dae: 00d1  LDA $00d1
1daf: 0095  LDA $0095
1db0: 0075  LDA $0075
1db1: 01a9  LDA $01a9
1db2: 0000  NOP
1db3: 0039  LDA $0039
1db4: 0001  LDA $0001(B)
1db5: 0169  LDA $0169
1db6: 009a  LDA $009a
1db7: 008f  LDA $008f
1db8: 0073  LDA $0073
1db9: 0091  LDA $0091
1dba: 00a0  LDA $00a0
1dbb: 00cb  LDA $00cb
1dbc: 010f  LDA $010f
1dbd: 0131  LDA $0131
1dbe: 0136  LDA $0136
1dbf: 0168  LDA $0168
1dc0: 00cd  LDA $00cd
1dc1: 00a0  LDA $00a0
1dc2: 0091  LDA $0091
1dc3: 0073  LDA $0073
1dc4: 008f  LDA $008f
1dc5: 009a  LDA $009a
1dc6: 0001  LDA $0001(B)
1dc7: 003e  LDA $003e
1dc8: 011a  LDA $011a
1dc9: 0135  LDA $0135
1dca: 010b  LDA $010b
1dcb: 00fa  LDA $00fa
1dcc: 00bb  LDA $00bb
1dcd: 00fa  LDA $00fa
1dce: 010b  LDA $010b
1dcf: 0135  LDA $0135
1dd0: 011a  LDA $011a
1dd1: 01a9  LDA $01a9
1dd2: 0000  NOP
1dd3: 01a2  LDA $01a2
1dd4: 0001  LDA $0001(B)
1dd5: 000f  LDA $000f
1dd6: 00ca  LDA $00ca
1dd7: 0092  LDA $0092
1dd8: 0083  LDA $0083
1dd9: 008e  LDA $008e
1dda: 00c6  LDA $00c6
1ddb: 010a  LDA $010a
1ddc: 0118  LDA $0118
1ddd: 010e  LDA $010e
1dde: 01a8  LDA $01a8
1ddf: 0000  NOP
1de0: 003a  LDA $003a
1de1: 0001  LDA $0001(B)
1de2: 016f  LDA $016f
1de3: 00c7  LDA $00c7
1de4: 010c  LDA $010c
1de5: 00c9  LDA $00c9
1de6: 0090  LDA $0090
1de7: 0001  LDA $0001(B)
1de8: 00f6  LDA $00f6
1de9: 00a9  LDA $00a9
1dea: 009b  LDA $009b
1deb: 006a  LDA $006a
1dec: 007a  LDA $007a
1ded: 009a  LDA $009a
1dee: 00c3  LDA $00c3
1def: 00fa  LDA $00fa
1df0: 0123  LDA $0123
1df1: 0173  LDA $0173
1df2: 0127  LDA $0127
1df3: 0100  LDA $0100
1df4: 01a9  LDA $01a9
1df5: 0000  NOP
1df6: 000d  LDA $000d
1df7: 0001  LDA $0001(B)
1df8: 018c  LDA $018c
1df9: 00da  LDA $00da
1dfa: 0001  LDA $0001(B)
1dfb: 00b1  LDA $00b1
1dfc: 00c9  LDA $00c9
1dfd: 00fd  LDA $00fd
1dfe: 00c7  LDA $00c7
1dff: 009d  LDA $009d
1e00: 01a9  LDA $01a9
1e01: 0000  NOP
1e02: 01a6  LDA $01a6
1e03: 0001  LDA $0001(B)
1e04: 0046  LDA $0046
1e05: 002d  LDA $002d
1e06: 0082  LDA $0082
1e07: 0073  LDA $0073
1e08: 0084  LDA $0084
1e09: 002c  LDA $002c
1e0a: 0084  LDA $0084
1e0b: 0073  LDA $0073
1e0c: 0082  LDA $0082
1e0d: 002d  LDA $002d
1e0e: 01a8  LDA $01a8
1e0f: 0000  NOP
1e10: 018f  LDA $018f
1e11: 0001  LDA $0001(B)
1e12: 0045  LDA $0045
1e13: 0078  LDA $0078
1e14: 009c  LDA $009c
1e15: 0090  LDA $0090
1e16: 0091  LDA $0091
1e17: 0076  LDA $0076
1e18: 0091  LDA $0091
1e19: 0090  LDA $0090
1e1a: 009c  LDA $009c
1e1b: 0078  LDA $0078
1e1c: 01a8  LDA $01a8
1e1d: 0000  NOP
1e1e: 01a7  LDA $01a7
1e1f: 0001  LDA $0001(B)
1e20: 0044  LDA $0044
1e21: 002d  LDA $002d
1e22: 0082  LDA $0082
1e23: 0073  LDA $0073
1e24: 0084  LDA $0084
1e25: 002c  LDA $002c
1e26: 0084  LDA $0084
1e27: 0073  LDA $0073
1e28: 0082  LDA $0082
1e29: 002d  LDA $002d
1e2a: 01a8  LDA $01a8
1e2b: 1e30  CPB $1c30
1e2c: ffff  SES $1e2b,S
1e2d: 39c0  STB $01c0
1e2e: 1e32  CPB $1c32
1e2f: fe5a  SEC $1e49
1e30: 39c0  STB $01c0
1e31: 0001  LDA $0001(B)
1e32: 39c0  STB $01c0
1e33: d000  AND $0000(A),I
1e34: e0e8  IOR $00e8,I
1e35: e0f1  IOR $00f1,I
1e36: e0f2  IOR $00f2,I
1e37: e0f6  IOR $00f6,I
1e38: e000  IOR $0000(A),I
1e39: e008  IOR $0008,I
1e3a: e00a  IOR $000a,I
1e3b: e00c  IOR $000c,I
1e3c: e018  IOR $0018,I
1e3d: e1e0  IOR $01e0,I
1e3e: e1f8  IOR $01f8,I
1e3f: e200  IOR $fe00,I
1e40: e320  IOR $ff20,I
1e41: e4f0  IOR $1ef0,I
1e42: e400  IOR $1e00,I
1e43: e408  IOR $1e08,I
1e44: e426  IOR $1e26,I
1e45: e5e8  IOR $1fe8,I
1e46: e5f0  IOR $1ff0,I
1e47: e528  IOR $1f28,I
1e48: e6f0  IOR $1cf0,I
1e49: e600  IOR $1c00,I
1e4a: e61e  IOR $1c1e,I
1e4b: e700  IOR $1d00,I
1e4c: e710  IOR $1d10,I
1e4d: e8e0  JMP $00e0,I
1e4e: e8fe  JMP $00fe,I
1e4f: e800  JMP $0000(A),I
1e50: e806  JMP $0006,I
1e51: e80c  JMP $000c,I
1e52: e81e  JMP $001e,I
1e53: e826  JMP $0026,I
1e54: ea00  JMP $fe00,I
1e55: ecf1  JMP $1ef1,I
1e56: ecf5  JMP $1ef5,I
1e57: ec00  JMP $1e00,I
1e58: ec23  JMP $1e23,I
1e59: edf4  JMP $1ff4,I
1e5a: eef0  JMP $1cf0,I
1e5b: ee00  JMP $1c00,I
1e5c: ee01  JMP $1c01,I
1e5d: ee06  JMP $1c06,I
1e5e: eff9  JMP $1df9,I
1e5f: f0de  RET 30,P
1e60: f0e0  RET -32,P
1e61: f0e1  RET -31,P
1e62: f0e2  RET -30,P
1e63: f0e3  RET -29,P
1e64: f0e8  RET -24,P
1e65: f0ed  RET -19,P
1e66: f0ef  RET -17,P
1e67: f0f0  RET -16,P
1e68: f0f1  RET -15,P
1e69: f0f3  RET -13,P
1e6a: f0f4  RET -12,P
1e6b: f0f8  RET -8,P
1e6c: f0fe  RET -2,P
1e6d: f0ff  RET -1,P
1e6e: f000  EXE $0000(A),I
1e6f: f002  EXE $0002(P),I
1e70: f00a  EXE $000a,I
1e71: f00c  EXE $000c,I
1e72: f012  EXE $0012,I
1e73: f018  EXE $0018,I
1e74: f020  TCA
1e75: f026  ???
1e76: f02c  ???
1e77: f02e  ???
1e78: f1e2  ???
1e79: f1f0  ???
1e7a: f100  AAR 1
1e7b: f10a  AAR 11
1e7c: f10c  AAR 13
1e7d: f2de  ???
1e7e: f2df  ???
1e7f: f2e0  ???
1e80: f2ee  ???
1e81: f2f0  ???
1e82: f2f1  ???
1e83: f2f4  ???
1e84: f2f8  ???
1e85: f200  ???
1e86: f20a  ???
1e87: f212  ???
1e88: f302  ???
1e89: f4e0  SAP $1e69,S
1e8a: f4f0  SAP $1e7a,S
1e8b: f4f8  SAP $1e83,S
1e8c: f4fa  SAP $1e86,S
1e8d: f4fd  SAP $1e8a,S
1e8e: f400  SAP $1e8e
1e8f: f408  SAP $1e97
1e90: f500  SAM $1e90
1e91: f6f9  SOC $1e8a,S
1e92: f6fa  SOC $1e8c,S
1e93: f600  SOC $1e93
1e94: f606  SOC $1e9a
1e95: f607  SOC $1e9c
1e96: f7f4  SOS $1e8a,S
1e97: f7fd  SOS $1e94,S
1e98: f700  SOS $1e98
1e99: f703  SOS $1e9c
1e9a: f8f8  ???
1e9b: f8ff  ???
1e9c: f800  ???
1e9d: f806  ???
1e9e: f9ff  ???
1e9f: f901  ABR 2
1ea0: f902  ABR 3
1ea1: faf0  ???
1ea2: fafd  ???
1ea3: fafe  ???
1ea4: fa00  ???
1ea5: fa01  ???
1ea6: fa02  ???
1ea7: fa04  ???
1ea8: fbf0  ???
1ea9: fbfb  ???
1eaa: fbfd  ???
1eab: fbfe  ???
1eac: fbff  ???
1ead: fb00  ???
1eae: fb01  ???
1eaf: fb02  ???
1eb0: fcf0  SBP $1ea0,S
1eb1: fcfc  SBP $1ead,S
1eb2: fcfe  SBP $1eb0,S
1eb3: fcff  SBP $1eb2,S
1eb4: fc00  SBP $1eb4
1eb5: fc01  SBP $1eb6
1eb6: fc02  SBP $1eb8
1eb7: fc03  SBP $1eba
1eb8: fc04  SBP $1ebc
1eb9: fc05  SBP $1ebe
1eba: fdf6  SBM $1eb0,S
1ebb: fdfa  SBM $1eb5,S
1ebc: fdfb  SBM $1eb7,S
1ebd: fdfc  SBM $1eb9,S
1ebe: fdfd  SBM $1ebb,S
1ebf: fdfe  SBM $1ebd,S
1ec0: fdff  SBM $1ebf,S
1ec1: fd00  SBM $1ec1
1ec2: fd01  SBM $1ec3
1ec3: fd02  SBM $1ec5
1ec4: fd03  SBM $1ec7
1ec5: fd04  SBM $1ec9
1ec6: fd05  SBM $1ecb
1ec7: fd06  SBM $1ecd
1ec8: fd0c  SBM $1ed4
1ec9: fefa  SEC $1ec3,S
1eca: fefc  SEC $1ec6,S
1ecb: fefd  SEC $1ec8,S
1ecc: fefe  SEC $1eca,S
1ecd: feff  SEC $1ecc,S
1ece: fe00  SEC $1ece
1ecf: fe01  SEC $1ed0
1ed0: fe02  SEC $1ed2
1ed1: fe03  SEC $1ed4
1ed2: fe04  SEC $1ed6
1ed3: fe06  SEC $1ed9
1ed4: fff0  SES $1ec4,S
1ed5: fff4  SES $1ec9,S
1ed6: fff7  SES $1ecd,S
1ed7: fff8  SES $1ecf,S
1ed8: fffa  SES $1ed2,S
1ed9: fffc  SES $1ed5,S
1eda: fffd  SES $1ed7,S
1edb: fffe  SES $1ed9,S
1edc: ffff  SES $1edb,S
1edd: ff01  SES $1ede
1ede: ff02  SES $1ee0
1edf: ff04  SES $1ee3
1ee0: ff05  SES $1ee5
1ee1: ff06  SES $1ee7
1ee2: ff09  SES $1eeb
1ee3: 00d8  LDA $00d8
1ee4: 00e0  LDA $00e0
1ee5: 00e4  LDA $00e4
1ee6: 00e8  LDA $00e8
1ee7: 00e9  LDA $00e9
1ee8: 00ea  LDA $00ea
1ee9: 00ec  LDA $00ec
1eea: 00ee  LDA $00ee
1eeb: 00ef  LDA $00ef
1eec: 00f0  LDA $00f0
1eed: 00f1  LDA $00f1
1eee: 00f2  LDA $00f2
1eef: 00f4  LDA $00f4
1ef0: 00f5  LDA $00f5
1ef1: 00f6  LDA $00f6
1ef2: 00f7  LDA $00f7
1ef3: 00f8  LDA $00f8
1ef4: 00fa  LDA $00fa
1ef5: 00fb  LDA $00fb
1ef6: 00fc  LDA $00fc
1ef7: 00fd  LDA $00fd
1ef8: 00fe  LDA $00fe
1ef9: 0000  NOP
1efa: 0002  LDA $0002(P)
1efb: 0003  LDA $0003(R)
1efc: 0004  LDA $0004
1efd: 0005  LDA $0005
1efe: 0006  LDA $0006
1eff: 0007  LDA $0007
1f00: 0008  LDA $0008
1f01: 0009  LDA $0009
1f02: 000a  LDA $000a
1f03: 000c  LDA $000c
1f04: 000d  LDA $000d
1f05: 000e  LDA $000e
1f06: 000f  LDA $000f
1f07: 0010  LDA $0010
1f08: 0011  LDA $0011
1f09: 0012  LDA $0012
1f0a: 0014  LDA $0014
1f0b: 0015  LDA $0015
1f0c: 0016  LDA $0016
1f0d: 0017  LDA $0017
1f0e: 0018  LDA $0018
1f0f: 001a  LDA $001a
1f10: 001b  LDA $001b
1f11: 001c  LDA $001c
1f12: 001d  LDA $001d
1f13: 001e  LDA $001e
1f14: 0020  LDA $0020
1f15: 0024  LDA $0024
1f16: 0026  LDA $0026
1f17: 0028  LDA $0028
1f18: 01fa  LDA $01fa
1f19: 01fc  LDA $01fc
1f1a: 01fd  LDA $01fd
1f1b: 01fe  LDA $01fe
1f1c: 0101  LDA $0101
1f1d: 0102  LDA $0102
1f1e: 0103  LDA $0103
1f1f: 0104  LDA $0104
1f20: 0105  LDA $0105
1f21: 0109  LDA $0109
1f22: 010b  LDA $010b
1f23: 0118  LDA $0118
1f24: 011a  LDA $011a
1f25: 011b  LDA $011b
1f26: 0120  LDA $0120
1f27: 02f6  LDA $fef6
1f28: 02fa  LDA $fefa
1f29: 02fb  LDA $fefb
1f2a: 02fc  LDA $fefc
1f2b: 02fd  LDA $fefd
1f2c: 02fe  LDA $fefe
1f2d: 02ff  LDA $feff
1f2e: 0200  LDA $fe00
1f2f: 0201  LDA $fe01
1f30: 0202  LDA $fe02
1f31: 0203  LDA $fe03
1f32: 0204  LDA $fe04
1f33: 0205  LDA $fe05
1f34: 0206  LDA $fe60
1f35: 0208  LDA $fe08
1f36: 0216  LDA $fe16
1f37: 03fa  LDA $fffa
1f38: 03fb  LDA $fffb
1f39: 03fc  LDA $fffc
1f3a: 03fd  LDA $fffd
1f3b: 03fe  LDA $fffe
1f3c: 03ff  LDA $ffff
1f3d: 0300  LDA $ff00
1f3e: 0301  LDA $ff01
1f3f: 0302  LDA $ff02
1f40: 0303  LDA $ff03
1f41: 0304  LDA $ff04
1f42: 0305  LDA $ff05
1f43: 0306  LDA $ff06
1f44: 04e0  LDA $1ee0
1f45: 04f4  LDA $1ef4
1f46: 04fd  LDA $1efd
1f47: 04fe  LDA $1efe
1f48: 04ff  LDA $1eff
1f49: 0400  LDA $1e00
1f4a: 0401  LDA $1e01
1f4b: 0402  LDA $1e02
1f4c: 0403  LDA $1e03
1f4d: 0404  LDA $1e04
1f4e: 0406  LDA $1e06
1f4f: 040c  LDA $1e0c
1f50: 041e  LDA $1e1e
1f51: 0420  LDA $1e20
1f52: 05e8  LDA $1fe8
1f53: 05f8  LDA $1ff8
1f54: 05fe  LDA $1ffe
1f55: 05ff  LDA $1fff
1f56: 0500  LDA $1f00
1f57: 0501  LDA $1f01
1f58: 0502  LDA $1f02
1f59: 0504  LDA $1f04
1f5a: 0505  LDA $1f05
1f5b: 0518  LDA $1f18
1f5c: 06f8  LDA $1cf8
1f5d: 06fc  LDA $1cfc
1f5e: 06fe  LDA $1cfe
1f5f: 06ff  LDA $1cff
1f60: 0600  LDA $1c00
1f61: 0601  LDA $1c01
1f62: 0602  LDA $1c02
1f63: 0603  LDA $1c03
1f64: 0620  LDA $1c20
1f65: 07ff  LDA $1dff
1f66: 0700  LDA $1d00
1f67: 0701  LDA $1d01
1f68: 0711  LDA $1d11
1f69: 08f0  LDB $00f0
1f6a: 08f8  LDB $00f8
1f6b: 08fa  LDB $00fa
1f6c: 0800  LDB $0000(A)
1f6d: 0804  LDB $0004
1f6e: 0806  LDB $0006
1f6f: 0808  LDB $0008
1f70: 080d  LDB $000d
1f71: 0813  LDB $0013
1f72: 0814  LDB $0014
1f73: 0815  LDB $0015
1f74: 0820  LDB $0020
1f75: 0826  LDB $0026
1f76: 09fd  LDB $01fd
1f77: 0900  LDB $0100
1f78: 0913  LDB $0113
1f79: 0af9  LDB $fef9
1f7a: 0afa  LDB $fefa
1f7b: 0a00  LDB $fe00
1f7c: 0a06  LDB $fe06
1f7d: 0a07  LDB $fe07
1f7e: 0a1a  LDB $fe1a
1f7f: 0bee  LDB $ffee
1f80: 0b12  LDB $ff12
1f81: 0ce8  LDB $1ee8
1f82: 0ceb  LDB $1eeb
1f83: 0cf3  LDB $1ef3
1f84: 0cf8  LDB $1ef8
1f85: 0cfc  LDB $1efc
1f86: 0cfd  LDB $1efd
1f87: 0c00  LDB $1e00
1f88: 0c03  LDB $1e03
1f89: 0c0c  LDB $1e0c
1f8a: 0c18  LDB $1e18
1f8b: 0c20  LDB $1e20
1f8c: 0df8  LDB $1ff8
1f8d: 0ee8  LDB $1ce8
1f8e: 0e00  LDB $1c00
1f8f: 0e18  LDB $1c18
1f90: 0e20  LDB $1c20
1f91: 0f00  LDB $1d00
1f92: 0f04  LDB $1d04
1f93: 0f1b  LDB $1d1b
1f94: 10e0  CPA $00e0
1f95: 10e8  CPA $00e8
1f96: 10ee  CPA $00ee
1f97: 10f0  CPA $00f0
1f98: 10f4  CPA $00f4
1f99: 1000  CPA $0000(A)
1f9a: 1004  CPA $0004
1f9b: 1006  CPA $0006
1f9c: 100b  CPA $000b
1f9d: 100c  CPA $000c
1f9e: 1012  CPA $0012
1f9f: 1014  CPA $0014
1fa0: 1018  CPA $0018
1fa1: 1020  CPA $0020
1fa2: 1026  CPA $0026
1fa3: 1100  CPA $0100
1fa4: 1200  CPA $fe00
1fa5: 1300  CPA $ff00
1fa6: 1400  CPA $1e00
1fa7: 140f  CPA $1e0f
1fa8: 141d  CPA $1e1d
1fa9: 16ef  CPA $1cef
1faa: 16f3  CPA $1cf3
1fab: 18da  CPB $00da
1fac: 18e8  CPB $00e8
1fad: 1800  CPB $0000(A)
1fae: 1806  CPB $0006
1faf: 1818  CPB $0018
1fb0: 1900  CPB $0100
1fb1: 1aeb  CPB $feeb
1fb2: 1af8  CPB $fef8
1fb3: 1a00  CPB $fe00
1fb4: 1be8  CPB $ffe8
1fb5: 1b18  CPB $ff18
1fb6: 1c00  CPB $1e00
1fb7: 1c06  CPB $1e06
1fb8: 1c12  CPB $1e12
1fb9: 1c18  CPB $1e18
1fba: 1e00  CPB $1c00
1fbb: 1e1c  CPB $1c1c
1fbc: 1fe0  CPB $1de0
1fbd: 1ff8  CPB $1df8
1fbe: 1f07  CPB $1d07
1fbf: 1f20  CPB $1d20
1fc0: 20d7  ADA $00d7
1fc1: 20d8  ADA $00d8
1fc2: 20d9  ADA $00d9
1fc3: 20de  ADA $00de
1fc4: 20e0  ADA $00e0
1fc5: 20e8  ADA $00e8
1fc6: 20f6  ADA $00f6
1fc7: 20fc  ADA $00fc
1fc8: 2000  ADA $0000(A)
1fc9: 2004  ADA $0004
1fca: 2008  ADA $0008
1fcb: 200a  ADA $000a
1fcc: 200c  ADA $000c
1fcd: 2018  ADA $0018
1fce: 201c  ADA $001c
1fcf: 2020  ADA $0020
1fd0: 2024  ADA $0024
1fd1: 2028  ADA $0028
1fd2: 22de  ADA $fede
1fd3: 22df  ADA $fedf
1fd4: 22e0  ADA $fee0
1fd5: 22e1  ADA $fee1
1fd6: 3000  STA $0000(A)
1fd7: 38d6  STB $00d6
1fd8: 38de  STB $00de
1fd9: 0000  NOP
1fda: 0000  NOP
1fdb: 0000  NOP
1fdc: 0000  NOP
1fdd: 0000  NOP
1fde: 0000  NOP
1fdf: 0000  NOP
1fe0: 0000  NOP
1fe1: 0000  NOP
1fe2: 0000  NOP
1fe3: 0000  NOP
1fe4: 0000  NOP
1fe5: 0000  NOP
1fe6: 0000  NOP
1fe7: 0000  NOP
1fe8: 0000  NOP
1fe9: 0000  NOP
1fea: 0000  NOP
1feb: 0000  NOP
1fec: 0000  NOP
1fed: 0000  NOP
1fee: 0000  NOP
1fef: 0000  NOP
1ff0: 0000  NOP
1ff1: 0000  NOP
1ff2: 0000  NOP
1ff3: 0000  NOP
1ff4: 0000  NOP
1ff5: 0000  NOP
1ff6: 0000  NOP
1ff7: 0000  NOP
1ff8: 0000  NOP
1ff9: 0000  NOP
1ffa: 0000  NOP
1ffb: 0000  NOP
1ffc: 0000  NOP
1ffd: 0000  NOP
1ffe: 0000  NOP
1fff: d3d9  AND $ffd9,I
